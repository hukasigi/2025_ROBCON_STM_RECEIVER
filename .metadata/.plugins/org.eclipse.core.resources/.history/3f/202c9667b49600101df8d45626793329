/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "stdio.h"
#include "stdbool.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
CAN_HandleTypeDef hcan;

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim17;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void        SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_CAN_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM17_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int8_t use_data[8];
int    unpack_data[8];
int    id;
int    can_received = 0;

typedef struct {
        uint8_t circle;   // ○ボタン (bit0)
        uint8_t triangle; // △ボタン (bit1)
        uint8_t square;   // □ボタン (bit2)
        uint8_t cross;    // ×ボタン (bit3)
        uint8_t L1;       // L1ボタン (bit4)
        uint8_t R1;       // R1ボタン (bit5)
        uint8_t left;     // 左ボタン (bit6)
        uint8_t right;    // 右ボタン (bit7)
} ButtonStates;
typedef struct {
        int8_t r_x; // 右スティックX軸 (use_data[1])
        int8_t r_y; // 右スティックY軸 (use_data[2])
} AnalogSticks;

ButtonStates ps4_buttons = {0};
AnalogSticks ps4_sticks  = {0};

void unpack_button_data(uint8_t packed_data, ButtonStates* buttons) {
    buttons->circle   = (packed_data >> 0) & 1; // bit0
    buttons->triangle = (packed_data >> 1) & 1; // bit1
    buttons->square   = (packed_data >> 2) & 1; // bit2
    buttons->cross    = (packed_data >> 3) & 1; // bit3
    buttons->L1       = (packed_data >> 4) & 1; // bit4
    buttons->R1       = (packed_data >> 5) & 1; // bit5
    buttons->left     = (packed_data >> 6) & 1; // bit6
    buttons->right    = (packed_data >> 7) & 1; // bit7
}
void unpack_analog_data(int8_t* raw_data, AnalogSticks* sticks) {
    sticks->r_x = raw_data[1]; // 右スティックX
    sticks->r_y = raw_data[2]; // 右スティックY
}
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan) {
    CAN_RxHeaderTypeDef RxHeader;  // 受信メッセージの情報が格納されるインスタンス
    uint8_t             RxData[8]; // 受信したデータを一時保存する配列
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
        id = RxHeader.StdId; // RxHeaderの中に入っているidを取り出す
        if (id == 0x001) {
            for (int i = 0; i <= 7; i++) {
                use_data[i] = RxData[i];
            }
        }

        unpack_button_data(use_data[0], &ps4_buttons);

        unpack_analog_data(use_data, &ps4_sticks);
    }
}

int _write(int file, char* ptr, int len) {
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
    return len;
}

int16_t mapping_data(double x, double in_min, double in_max, int16_t out_min, int16_t out_max) {
    // 入力値を0～1の比率に正規化
    double proportion = (x - in_min) / (in_max - in_min);

    // 出力範囲の幅を計算
    double out_base = (double)(out_max - out_min);

    // 正規化された比率を出力範囲にスケーリング
    return out_min + out_base * proportion;
}

/* USER CODE END 0 */

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {

    /* USER CODE BEGIN 1 */
	int before_time = 0;
	int now_time = 0;
	bool pomp = 0;

    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();

    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();

    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
    MX_USART2_UART_Init();
    MX_CAN_Init();
    MX_TIM1_Init();
    MX_TIM2_Init();
    MX_TIM3_Init();
    MX_TIM17_Init();
    /* USER CODE BEGIN 2 */
    // CANスタート
    if (HAL_CAN_Start(&hcan) != HAL_OK) {
        printf("CAN Start Error\r\n");
        Error_Handler();
    } else {
        printf("CAN Started Successfully\r\n");
    }

    // 割り込み有効
    if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
        printf("CAN Notification Error\r\n");
        Error_Handler();
    } else {
        printf("CAN Notification Activated\r\n");
    }
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);//test
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);//開閉_左 PWM5
//    HAL_GPIO_WritePin(GPIOB, DIR5_Pin, 0);
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);//開閉_右 PWM3
//    HAL_GPIO_WritePin(GPIOB, DIR3_Pin, 0);
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);//アーム昇降 PWM1
//    HAL_GPIO_WritePin(GPIOA, DIR1_Pin, 0);
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);//アーム昇降 PWM2
//    HAL_GPIO_WritePin(GPIOB, DIR2_Pin, 1);
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);//真空ポンプ＿左 PWM4
    HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);//真空ポンプ_右 PWM6
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    //  uint8_t testData[8] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
    int loop_count = 0;

    while (1) {
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */

        printf("Data: %d %d %d %d %d %d %d %d\r\n", use_data[0], use_data[1], use_data[2], use_data[3], use_data[4],
               use_data[5], use_data[6], use_data[7]);

        loop_count++;
        HAL_Delay(5);

        for (int i = 0; i < 8; i++) {
            unpack_data[i] = (use_data[0] >> i) & 1;
        }
        //	     printf("CAN Status - Loop: %d, Received: %d\r\n", loop_count, can_received);
        printf("UnpackData: %d %d %d %d %d %d %d %d\r\n", unpack_data[0], unpack_data[1], unpack_data[2], unpack_data[3],
               unpack_data[4], unpack_data[5], unpack_data[6], unpack_data[7]);

        // unpack_data Circle Triangle Square Cross L1 R1 Left Right
        // R_X R_Y
        /*挟むアーム　385  *2 STM1 L1+Rs(右狭く、左広く) R1+Rs(右狭く,左広く)
        Qアーム昇降 385 *2 STM1 Rs
        真空ポンプ　555 *2 STM1 L1+Cross R1+Cross　一回オスとモーターがうごきもういっかいおすとモータとまる*/

        if (ps4_buttons.circle == 1) {
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 500); // PWM test
            HAL_Delay(10);
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 2200);
            HAL_Delay(10);
        }

        //	     アーム開閉＿左 20000
        if (ps4_buttons.L1 == 1) {
            // __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,500);//PWM5
            int16_t arm_side_data = mapping_data(ps4_sticks.r_x, -127, 127, -19990, 19990);
            if (ps4_sticks.r_x <= 0) {
                HAL_GPIO_WritePin(GPIOB, DIR5_Pin, 0);

            } else {
                printf("GPIO_1");
                HAL_GPIO_WritePin(GPIOB, DIR5_Pin, 1);
            }
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, abs(arm_side_data)); // PWM5
            printf("%d\r\n", arm_side_data);
        }else{
        	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0); // PWM5
        }
//        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0); // PWM5
//        アーム開閉＿右
        if (ps4_buttons.R1 == 1) {
            //	    	 __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,500);//PWM3
            int16_t arm_side_data = mapping_data(ps4_sticks.r_x, -127, 127, -19990, 19990);
            if (ps4_sticks.r_x <= 0) {
                HAL_GPIO_WritePin(GPIOB, DIR3_Pin, 1);
            } else {
                HAL_GPIO_WritePin(GPIOB, DIR3_Pin, 0);
            }
            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, abs(arm_side_data)); // PWM3
            printf("%d\r\n", arm_side_data);
        }else{
        	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0); // PWM3
        }
//        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0); // PWM3
//        アーム昇降
        int16_t arm_up_down_data = mapping_data(ps4_sticks.r_y, -127, 127, -19990, 19990);
        if (ps4_sticks.r_y <= 0) {
            HAL_GPIO_WritePin(GPIOA, DIR1_Pin, 0);
            HAL_GPIO_WritePin(GPIOB, DIR2_Pin, 1);
        } else {
            HAL_GPIO_WritePin(GPIOA, DIR1_Pin, 1);
            HAL_GPIO_WritePin(GPIOB, DIR2_Pin, 0);
        }
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, abs(arm_up_down_data)); // PWM1
        __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,abs(arm_up_down_data));//PWM2
        printf("%d\r\n", arm_up_down_data);


//           真空ポンプ＿左
        if (ps4_buttons.L1 == 1 && ps4_buttons.cross == 1) {
            //	    	 __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,500);//PWM4
            //	         HAL_Delay(2000);
            //	    	 __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,2200);
            //	    	 HAL_Delay(2000);
        	if(now_time >= before_time + 60){
            	pomp = !(pomp);
        	}


        	if(pomp == 1){
        		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,20000);
        		printf("pomp");
        	}else{
        		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,0);
        	}
        	printf("hoge");
        }

        //           真空ポンプ＿右
                if (ps4_buttons.R1 == 1 && ps4_buttons.cross == 1) {
                	if(now_time >= before_time + 60){
                    	pomp = !(pomp);
                	}


                	if(pomp == 1){
                		__HAL_TIM_SET_COMPARE(&htim17,TIM_CHANNEL_1,20000);//PWM6
                		printf("pomp");
                	}else{
                		__HAL_TIM_SET_COMPARE(&htim17,TIM_CHANNEL_1,0);
                	}
                	printf("hoge");
                }

    }

    /* USER CODE END 3 */
}

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
    RCC_OscInitTypeDef       RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef       RCC_ClkInitStruct = {0};
    RCC_PeriphCLKInitTypeDef PeriphClkInit     = {0};

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
    RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
    RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
    RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLL_MUL16;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
        Error_Handler();
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
        Error_Handler();
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
    PeriphClkInit.Tim1ClockSelection   = RCC_TIM1CLK_HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
        Error_Handler();
    }
}

/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {

    /* USER CODE BEGIN CAN_Init 0 */

    /* USER CODE END CAN_Init 0 */

    /* USER CODE BEGIN CAN_Init 1 */

    /* USER CODE END CAN_Init 1 */
    hcan.Instance                  = CAN;
    hcan.Init.Prescaler            = 2;
    hcan.Init.Mode                 = CAN_MODE_NORMAL;
    hcan.Init.SyncJumpWidth        = CAN_SJW_1TQ;
    hcan.Init.TimeSeg1             = CAN_BS1_13TQ;
    hcan.Init.TimeSeg2             = CAN_BS2_2TQ;
    hcan.Init.TimeTriggeredMode    = DISABLE;
    hcan.Init.AutoBusOff           = DISABLE;
    hcan.Init.AutoWakeUp           = DISABLE;
    hcan.Init.AutoRetransmission   = DISABLE;
    hcan.Init.ReceiveFifoLocked    = DISABLE;
    hcan.Init.TransmitFifoPriority = DISABLE;
    if (HAL_CAN_Init(&hcan) != HAL_OK) {
        Error_Handler();
    }
    /* USER CODE BEGIN CAN_Init 2 */
    CAN_FilterTypeDef filter;
    filter.FilterIdHigh         = 0x001 << 5;            // フィルターID1
    filter.FilterIdLow          = 0x002 << 5;            // フィルターID2
    filter.FilterMaskIdHigh     = 0x003 << 5;            // フィルターID3
    filter.FilterMaskIdLow      = 0x004 << 5;            // フィルターID4
    filter.FilterScale          = CAN_FILTERSCALE_16BIT; // 16モード
    filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;      // FIFO0へ格納
    filter.FilterBank           = 0;
    filter.FilterMode           = CAN_FILTERMODE_IDLIST; // IDリストモード
    filter.SlaveStartFilterBank = 14;
    filter.FilterActivation     = ENABLE;

    HAL_CAN_ConfigFilter(&hcan, &filter);

    /* USER CODE END CAN_Init 2 */
}

/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {

    /* USER CODE BEGIN TIM1_Init 0 */

    /* USER CODE END TIM1_Init 0 */

    TIM_ClockConfigTypeDef         sClockSourceConfig   = {0};
    TIM_MasterConfigTypeDef        sMasterConfig        = {0};
    TIM_OC_InitTypeDef             sConfigOC            = {0};
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

    /* USER CODE BEGIN TIM1_Init 1 */

    /* USER CODE END TIM1_Init 1 */
    htim1.Instance               = TIM1;
    htim1.Init.Prescaler         = 63;
    htim1.Init.CounterMode       = TIM_COUNTERMODE_UP;
    htim1.Init.Period            = 19999;
    htim1.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
    htim1.Init.RepetitionCounter = 0;
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
        Error_Handler();
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
        Error_Handler();
    }
    if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
        Error_Handler();
    }
    sMasterConfig.MasterOutputTrigger  = TIM_TRGO_RESET;
    sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
    sMasterConfig.MasterSlaveMode      = TIM_MASTERSLAVEMODE_DISABLE;
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
        Error_Handler();
    }
    sConfigOC.OCMode       = TIM_OCMODE_PWM1;
    sConfigOC.Pulse        = 0;
    sConfigOC.OCPolarity   = TIM_OCPOLARITY_HIGH;
    sConfigOC.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
    sConfigOC.OCFastMode   = TIM_OCFAST_DISABLE;
    sConfigOC.OCIdleState  = TIM_OCIDLESTATE_RESET;
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
    if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
        Error_Handler();
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
        Error_Handler();
    }
    sBreakDeadTimeConfig.OffStateRunMode  = TIM_OSSR_DISABLE;
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
    sBreakDeadTimeConfig.LockLevel        = TIM_LOCKLEVEL_OFF;
    sBreakDeadTimeConfig.DeadTime         = 0;
    sBreakDeadTimeConfig.BreakState       = TIM_BREAK_DISABLE;
    sBreakDeadTimeConfig.BreakPolarity    = TIM_BREAKPOLARITY_HIGH;
    sBreakDeadTimeConfig.BreakFilter      = 0;
    sBreakDeadTimeConfig.Break2State      = TIM_BREAK2_DISABLE;
    sBreakDeadTimeConfig.Break2Polarity   = TIM_BREAK2POLARITY_HIGH;
    sBreakDeadTimeConfig.Break2Filter     = 0;
    sBreakDeadTimeConfig.AutomaticOutput  = TIM_AUTOMATICOUTPUT_DISABLE;
    if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
        Error_Handler();
    }
    /* USER CODE BEGIN TIM1_Init 2 */

    /* USER CODE END TIM1_Init 2 */
    HAL_TIM_MspPostInit(&htim1);
}

/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {

    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_ClockConfigTypeDef  sClockSourceConfig = {0};
    TIM_MasterConfigTypeDef sMasterConfig      = {0};
    TIM_OC_InitTypeDef      sConfigOC          = {0};

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance               = TIM2;
    htim2.Init.Prescaler         = 63;
    htim2.Init.CounterMode       = TIM_COUNTERMODE_UP;
    htim2.Init.Period            = 19999;
    htim2.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
        Error_Handler();
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
        Error_Handler();
    }
    if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
        Error_Handler();
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
    sMasterConfig.MasterSlaveMode     = TIM_MASTERSLAVEMODE_DISABLE;
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
        Error_Handler();
    }
    sConfigOC.OCMode     = TIM_OCMODE_PWM1;
    sConfigOC.Pulse      = 0;
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
        Error_Handler();
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */
    HAL_TIM_MspPostInit(&htim2);
}

/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_ClockConfigTypeDef  sClockSourceConfig = {0};
    TIM_MasterConfigTypeDef sMasterConfig      = {0};
    TIM_OC_InitTypeDef      sConfigOC          = {0};

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance               = TIM3;
    htim3.Init.Prescaler         = 63;
    htim3.Init.CounterMode       = TIM_COUNTERMODE_UP;
    htim3.Init.Period            = 19999;
    htim3.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
        Error_Handler();
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
        Error_Handler();
    }
    if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
        Error_Handler();
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
    sMasterConfig.MasterSlaveMode     = TIM_MASTERSLAVEMODE_DISABLE;
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
        Error_Handler();
    }
    sConfigOC.OCMode     = TIM_OCMODE_PWM1;
    sConfigOC.Pulse      = 0;
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
        Error_Handler();
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
        Error_Handler();
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
        Error_Handler();
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */
    HAL_TIM_MspPostInit(&htim3);
}

/**
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void) {

    /* USER CODE BEGIN TIM17_Init 0 */

    /* USER CODE END TIM17_Init 0 */

    TIM_OC_InitTypeDef             sConfigOC            = {0};
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

    /* USER CODE BEGIN TIM17_Init 1 */

    /* USER CODE END TIM17_Init 1 */
    htim17.Instance               = TIM17;
    htim17.Init.Prescaler         = 63;
    htim17.Init.CounterMode       = TIM_COUNTERMODE_UP;
    htim17.Init.Period            = 19999;
    htim17.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
    htim17.Init.RepetitionCounter = 0;
    htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    if (HAL_TIM_Base_Init(&htim17) != HAL_OK) {
        Error_Handler();
    }
    if (HAL_TIM_PWM_Init(&htim17) != HAL_OK) {
        Error_Handler();
    }
    sConfigOC.OCMode       = TIM_OCMODE_PWM1;
    sConfigOC.Pulse        = 0;
    sConfigOC.OCPolarity   = TIM_OCPOLARITY_HIGH;
    sConfigOC.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
    sConfigOC.OCFastMode   = TIM_OCFAST_DISABLE;
    sConfigOC.OCIdleState  = TIM_OCIDLESTATE_RESET;
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
    if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
        Error_Handler();
    }
    sBreakDeadTimeConfig.OffStateRunMode  = TIM_OSSR_DISABLE;
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
    sBreakDeadTimeConfig.LockLevel        = TIM_LOCKLEVEL_OFF;
    sBreakDeadTimeConfig.DeadTime         = 0;
    sBreakDeadTimeConfig.BreakState       = TIM_BREAK_DISABLE;
    sBreakDeadTimeConfig.BreakPolarity    = TIM_BREAKPOLARITY_HIGH;
    sBreakDeadTimeConfig.BreakFilter      = 0;
    sBreakDeadTimeConfig.AutomaticOutput  = TIM_AUTOMATICOUTPUT_DISABLE;
    if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK) {
        Error_Handler();
    }
    /* USER CODE BEGIN TIM17_Init 2 */

    /* USER CODE END TIM17_Init 2 */
    HAL_TIM_MspPostInit(&htim17);
}

/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {

    /* USER CODE BEGIN USART2_Init 0 */

    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance                    = USART2;
    huart2.Init.BaudRate               = 115200;
    huart2.Init.WordLength             = UART_WORDLENGTH_8B;
    huart2.Init.StopBits               = UART_STOPBITS_1;
    huart2.Init.Parity                 = UART_PARITY_NONE;
    huart2.Init.Mode                   = UART_MODE_TX_RX;
    huart2.Init.HwFlowCtl              = UART_HWCONTROL_NONE;
    huart2.Init.OverSampling           = UART_OVERSAMPLING_16;
    huart2.Init.OneBitSampling         = UART_ONE_BIT_SAMPLE_DISABLE;
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
    if (HAL_UART_Init(&huart2) != HAL_OK) {
        Error_Handler();
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */
}

/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
    GPIO_InitTypeDef GPIO_InitStruct = {0};
    /* USER CODE BEGIN MX_GPIO_Init_1 */

    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOF_CLK_ENABLE();
    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, DIR4_Pin | DIR1_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, DIR2_Pin | DIR3_Pin | DIR5_Pin | DIR6_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pins : DIR4_Pin DIR1_Pin */
    GPIO_InitStruct.Pin   = DIR4_Pin | DIR1_Pin;
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /*Configure GPIO pins : DIR2_Pin DIR3_Pin DIR5_Pin DIR6_Pin */
    GPIO_InitStruct.Pin   = DIR2_Pin | DIR3_Pin | DIR5_Pin | DIR6_Pin;
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* USER CODE BEGIN MX_GPIO_Init_2 */

    /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
    }
    /* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
 * @brief  Reports the name of the source file and the source line number
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t* file, uint32_t line) {
    /* USER CODE BEGIN 6 */
    /* User can add his own implementation to report the file name and line number,
       ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
