
STM_1_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006590  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08006720  08006720  00007720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067a0  080067a0  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080067a0  080067a0  000077a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067a8  080067a8  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067a8  080067a8  000077a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080067ac  080067ac  000077ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080067b0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008068  2**0
                  CONTENTS
 10 .bss          00000360  20000068  20000068  00008068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003c8  200003c8  00008068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 13 .debug_info   000101bd  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020ce  00000000  00000000  00018255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e08  00000000  00000000  0001a328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000af9  00000000  00000000  0001b130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c88e  00000000  00000000  0001bc29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010c47  00000000  00000000  000384b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a90e7  00000000  00000000  000490fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f21e5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004384  00000000  00000000  000f2228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  000f65ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006708 	.word	0x08006708

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006708 	.word	0x08006708

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <CAN_TX>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t  use_data[8];
uint32_t id;
int      i = 0;
void     CAN_TX(uint32_t recipient) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b08c      	sub	sp, #48	@ 0x30
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
    // 送信用インスタンス等
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t            TxMailbox;
    uint8_t             TxData[8];
    // 送信メールボックスに空きがあったら送信開始
    if (0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan)) {
 8000278:	4820      	ldr	r0, [pc, #128]	@ (80002fc <CAN_TX+0x8c>)
 800027a:	f001 fb10 	bl	800189e <HAL_CAN_GetTxMailboxesFreeLevel>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d036      	beq.n	80002f2 <CAN_TX+0x82>
        // 送信用インスタンスの設定
        TxHeader.StdId              = recipient; // 受取手のCANのID
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	61bb      	str	r3, [r7, #24]
        TxHeader.RTR                = CAN_RTR_DATA;
 8000288:	2300      	movs	r3, #0
 800028a:	627b      	str	r3, [r7, #36]	@ 0x24
        TxHeader.IDE                = CAN_ID_STD;
 800028c:	2300      	movs	r3, #0
 800028e:	623b      	str	r3, [r7, #32]
        TxHeader.DLC                = 8; // データ長を8byteに設定
 8000290:	2308      	movs	r3, #8
 8000292:	62bb      	str	r3, [r7, #40]	@ 0x28
        TxHeader.TransmitGlobalTime = DISABLE;
 8000294:	2300      	movs	r3, #0
 8000296:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        // 各データ
        TxData[0] = 0;
 800029a:	2300      	movs	r3, #0
 800029c:	733b      	strb	r3, [r7, #12]
        TxData[1] = 1;
 800029e:	2301      	movs	r3, #1
 80002a0:	737b      	strb	r3, [r7, #13]
        TxData[2] = 2;
 80002a2:	2302      	movs	r3, #2
 80002a4:	73bb      	strb	r3, [r7, #14]
        TxData[3] = 3;
 80002a6:	2303      	movs	r3, #3
 80002a8:	73fb      	strb	r3, [r7, #15]
        TxData[4] = 4;
 80002aa:	2304      	movs	r3, #4
 80002ac:	743b      	strb	r3, [r7, #16]
        TxData[5] = 5;
 80002ae:	2305      	movs	r3, #5
 80002b0:	747b      	strb	r3, [r7, #17]
        TxData[6] = 6;
 80002b2:	2306      	movs	r3, #6
 80002b4:	74bb      	strb	r3, [r7, #18]
        if (i == 10) {
 80002b6:	4b12      	ldr	r3, [pc, #72]	@ (8000300 <CAN_TX+0x90>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	2b0a      	cmp	r3, #10
 80002bc:	d102      	bne.n	80002c4 <CAN_TX+0x54>
            i = 0;
 80002be:	4b10      	ldr	r3, [pc, #64]	@ (8000300 <CAN_TX+0x90>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]
        }
        TxData[7] = i;
 80002c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000300 <CAN_TX+0x90>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	74fb      	strb	r3, [r7, #19]
        // CANメッセージを送信
        if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 80002cc:	f107 0314 	add.w	r3, r7, #20
 80002d0:	f107 020c 	add.w	r2, r7, #12
 80002d4:	f107 0118 	add.w	r1, r7, #24
 80002d8:	4808      	ldr	r0, [pc, #32]	@ (80002fc <CAN_TX+0x8c>)
 80002da:	f001 fa10 	bl	80016fe <HAL_CAN_AddTxMessage>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <CAN_TX+0x78>
            Error_Handler();
 80002e4:	f000 fc96 	bl	8000c14 <Error_Handler>
        }
        i++;
 80002e8:	4b05      	ldr	r3, [pc, #20]	@ (8000300 <CAN_TX+0x90>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	3301      	adds	r3, #1
 80002ee:	4a04      	ldr	r2, [pc, #16]	@ (8000300 <CAN_TX+0x90>)
 80002f0:	6013      	str	r3, [r2, #0]
    }
}
 80002f2:	bf00      	nop
 80002f4:	3730      	adds	r7, #48	@ 0x30
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	20000084 	.word	0x20000084
 8000300:	20000270 	.word	0x20000270

08000304 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 8000304:	b580      	push	{r7, lr}
 8000306:	b08c      	sub	sp, #48	@ 0x30
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef RxHeader;  // 受信メッセージの情報が格納されるインスタンス
    uint8_t             RxData[8]; // 受信したデータを一時保存する配列
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 800030c:	f107 0308 	add.w	r3, r7, #8
 8000310:	f107 0210 	add.w	r2, r7, #16
 8000314:	2100      	movs	r1, #0
 8000316:	6878      	ldr	r0, [r7, #4]
 8000318:	f001 faf6 	bl	8001908 <HAL_CAN_GetRxMessage>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d119      	bne.n	8000356 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
        id = RxHeader.StdId; // RxHeaderの中に入っているidを取り出す
 8000322:	693b      	ldr	r3, [r7, #16]
 8000324:	4a0e      	ldr	r2, [pc, #56]	@ (8000360 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000326:	6013      	str	r3, [r2, #0]
        if (id == 0x001) {
 8000328:	4b0d      	ldr	r3, [pc, #52]	@ (8000360 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	2b01      	cmp	r3, #1
 800032e:	d112      	bne.n	8000356 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
            for (int i = 0; i <= 7; i++) {
 8000330:	2300      	movs	r3, #0
 8000332:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000334:	e00c      	b.n	8000350 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
                use_data[i] = RxData[i];
 8000336:	f107 0208 	add.w	r2, r7, #8
 800033a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800033c:	4413      	add	r3, r2
 800033e:	7819      	ldrb	r1, [r3, #0]
 8000340:	4a08      	ldr	r2, [pc, #32]	@ (8000364 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000344:	4413      	add	r3, r2
 8000346:	460a      	mov	r2, r1
 8000348:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i <= 7; i++) {
 800034a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800034c:	3301      	adds	r3, #1
 800034e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000352:	2b07      	cmp	r3, #7
 8000354:	ddef      	ble.n	8000336 <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
            }
        }
    }
}
 8000356:	bf00      	nop
 8000358:	3730      	adds	r7, #48	@ 0x30
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	2000026c 	.word	0x2000026c
 8000364:	20000264 	.word	0x20000264

08000368 <_write>:

int _write(int file, char* ptr, int len) {
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 10);
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	b29a      	uxth	r2, r3
 8000378:	230a      	movs	r3, #10
 800037a:	68b9      	ldr	r1, [r7, #8]
 800037c:	4803      	ldr	r0, [pc, #12]	@ (800038c <_write+0x24>)
 800037e:	f004 fd97 	bl	8004eb0 <HAL_UART_Transmit>
    return len;
 8000382:	687b      	ldr	r3, [r7, #4]
}
 8000384:	4618      	mov	r0, r3
 8000386:	3710      	adds	r7, #16
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	200001dc 	.word	0x200001dc

08000390 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN 1 */
    setbuf(stdout, NULL);
 8000394:	4b5b      	ldr	r3, [pc, #364]	@ (8000504 <main+0x174>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	689b      	ldr	r3, [r3, #8]
 800039a:	2100      	movs	r1, #0
 800039c:	4618      	mov	r0, r3
 800039e:	f005 fa95 	bl	80058cc <setbuf>
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80003a2:	f000 ff19 	bl	80011d8 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80003a6:	f000 f8c1 	bl	800052c <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80003aa:	f000 fbd3 	bl	8000b54 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 80003ae:	f000 fba1 	bl	8000af4 <MX_USART2_UART_Init>
    MX_CAN_Init();
 80003b2:	f000 f919 	bl	80005e8 <MX_CAN_Init>
    MX_TIM2_Init();
 80003b6:	f000 fa15 	bl	80007e4 <MX_TIM2_Init>
    MX_TIM3_Init();
 80003ba:	f000 fa89 	bl	80008d0 <MX_TIM3_Init>
    MX_TIM16_Init();
 80003be:	f000 fb1f 	bl	8000a00 <MX_TIM16_Init>
    MX_TIM1_Init();
 80003c2:	f000 f963 	bl	800068c <MX_TIM1_Init>
    /* USER CODE BEGIN 2 */

    // CANスタート
    HAL_CAN_Start(&hcan);
 80003c6:	4850      	ldr	r0, [pc, #320]	@ (8000508 <main+0x178>)
 80003c8:	f001 f955 	bl	8001676 <HAL_CAN_Start>
    // 割り込み有効
    HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80003cc:	2102      	movs	r1, #2
 80003ce:	484e      	ldr	r0, [pc, #312]	@ (8000508 <main+0x178>)
 80003d0:	f001 fbbc 	bl	8001b4c <HAL_CAN_ActivateNotification>

    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80003d4:	2100      	movs	r1, #0
 80003d6:	484d      	ldr	r0, [pc, #308]	@ (800050c <main+0x17c>)
 80003d8:	f003 fd08 	bl	8003dec <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80003dc:	2104      	movs	r1, #4
 80003de:	484c      	ldr	r0, [pc, #304]	@ (8000510 <main+0x180>)
 80003e0:	f003 fd04 	bl	8003dec <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80003e4:	2104      	movs	r1, #4
 80003e6:	484b      	ldr	r0, [pc, #300]	@ (8000514 <main+0x184>)
 80003e8:	f003 fd00 	bl	8003dec <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80003ec:	2108      	movs	r1, #8
 80003ee:	4849      	ldr	r0, [pc, #292]	@ (8000514 <main+0x184>)
 80003f0:	f003 fcfc 	bl	8003dec <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80003f4:	2100      	movs	r1, #0
 80003f6:	4847      	ldr	r0, [pc, #284]	@ (8000514 <main+0x184>)
 80003f8:	f003 fcf8 	bl	8003dec <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80003fc:	210c      	movs	r1, #12
 80003fe:	4845      	ldr	r0, [pc, #276]	@ (8000514 <main+0x184>)
 8000400:	f003 fcf4 	bl	8003dec <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000404:	2100      	movs	r1, #0
 8000406:	4844      	ldr	r0, [pc, #272]	@ (8000518 <main+0x188>)
 8000408:	f003 fcf0 	bl	8003dec <HAL_TIM_PWM_Start>
        //	  PWM5_T3_C1 DIR5_B5
        //	  PWM6_T16_1N DIR6_B7
        //	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
        //	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);

        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 800040c:	2201      	movs	r2, #1
 800040e:	2102      	movs	r1, #2
 8000410:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000414:	f002 f874 	bl	8002500 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 500);
 8000418:	4b3c      	ldr	r3, [pc, #240]	@ (800050c <main+0x17c>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000420:	635a      	str	r2, [r3, #52]	@ 0x34

        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 8000422:	2201      	movs	r2, #1
 8000424:	2108      	movs	r1, #8
 8000426:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800042a:	f002 f869 	bl	8002500 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 500);
 800042e:	4b39      	ldr	r3, [pc, #228]	@ (8000514 <main+0x184>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000436:	639a      	str	r2, [r3, #56]	@ 0x38

        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8000438:	2201      	movs	r2, #1
 800043a:	2102      	movs	r1, #2
 800043c:	4837      	ldr	r0, [pc, #220]	@ (800051c <main+0x18c>)
 800043e:	f002 f85f 	bl	8002500 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 500);
 8000442:	4b34      	ldr	r3, [pc, #208]	@ (8000514 <main+0x184>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800044a:	639a      	str	r2, [r3, #56]	@ 0x38

        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 800044c:	2201      	movs	r2, #1
 800044e:	2120      	movs	r1, #32
 8000450:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000454:	f002 f854 	bl	8002500 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 500);
 8000458:	4b2e      	ldr	r3, [pc, #184]	@ (8000514 <main+0x184>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000460:	639a      	str	r2, [r3, #56]	@ 0x38

        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000462:	2201      	movs	r2, #1
 8000464:	2120      	movs	r1, #32
 8000466:	482d      	ldr	r0, [pc, #180]	@ (800051c <main+0x18c>)
 8000468:	f002 f84a 	bl	8002500 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 500);
 800046c:	4b29      	ldr	r3, [pc, #164]	@ (8000514 <main+0x184>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000474:	639a      	str	r2, [r3, #56]	@ 0x38

        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8000476:	2201      	movs	r2, #1
 8000478:	2180      	movs	r1, #128	@ 0x80
 800047a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800047e:	f002 f83f 	bl	8002500 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 1000 - 500);
 8000482:	4b25      	ldr	r3, [pc, #148]	@ (8000518 <main+0x188>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800048a:	635a      	str	r2, [r3, #52]	@ 0x34

        CAN_TX(0x001);
 800048c:	2001      	movs	r0, #1
 800048e:	f7ff feef 	bl	8000270 <CAN_TX>
        printf("Receiver\r\n");
 8000492:	4823      	ldr	r0, [pc, #140]	@ (8000520 <main+0x190>)
 8000494:	f005 fa12 	bl	80058bc <puts>
        printf("%d\r\n", use_data[0]);
 8000498:	4b22      	ldr	r3, [pc, #136]	@ (8000524 <main+0x194>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	4619      	mov	r1, r3
 800049e:	4822      	ldr	r0, [pc, #136]	@ (8000528 <main+0x198>)
 80004a0:	f005 f9a4 	bl	80057ec <iprintf>
        printf("%d\r\n", use_data[1]);
 80004a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000524 <main+0x194>)
 80004a6:	785b      	ldrb	r3, [r3, #1]
 80004a8:	4619      	mov	r1, r3
 80004aa:	481f      	ldr	r0, [pc, #124]	@ (8000528 <main+0x198>)
 80004ac:	f005 f99e 	bl	80057ec <iprintf>
        printf("%d\r\n", use_data[2]);
 80004b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000524 <main+0x194>)
 80004b2:	789b      	ldrb	r3, [r3, #2]
 80004b4:	4619      	mov	r1, r3
 80004b6:	481c      	ldr	r0, [pc, #112]	@ (8000528 <main+0x198>)
 80004b8:	f005 f998 	bl	80057ec <iprintf>
        printf("%d\r\n", use_data[3]);
 80004bc:	4b19      	ldr	r3, [pc, #100]	@ (8000524 <main+0x194>)
 80004be:	78db      	ldrb	r3, [r3, #3]
 80004c0:	4619      	mov	r1, r3
 80004c2:	4819      	ldr	r0, [pc, #100]	@ (8000528 <main+0x198>)
 80004c4:	f005 f992 	bl	80057ec <iprintf>
        printf("%d\r\n", use_data[4]);
 80004c8:	4b16      	ldr	r3, [pc, #88]	@ (8000524 <main+0x194>)
 80004ca:	791b      	ldrb	r3, [r3, #4]
 80004cc:	4619      	mov	r1, r3
 80004ce:	4816      	ldr	r0, [pc, #88]	@ (8000528 <main+0x198>)
 80004d0:	f005 f98c 	bl	80057ec <iprintf>
        printf("%d\r\n", use_data[5]);
 80004d4:	4b13      	ldr	r3, [pc, #76]	@ (8000524 <main+0x194>)
 80004d6:	795b      	ldrb	r3, [r3, #5]
 80004d8:	4619      	mov	r1, r3
 80004da:	4813      	ldr	r0, [pc, #76]	@ (8000528 <main+0x198>)
 80004dc:	f005 f986 	bl	80057ec <iprintf>
        printf("%d\r\n", use_data[6]);
 80004e0:	4b10      	ldr	r3, [pc, #64]	@ (8000524 <main+0x194>)
 80004e2:	799b      	ldrb	r3, [r3, #6]
 80004e4:	4619      	mov	r1, r3
 80004e6:	4810      	ldr	r0, [pc, #64]	@ (8000528 <main+0x198>)
 80004e8:	f005 f980 	bl	80057ec <iprintf>
        printf("%d\r\n", use_data[7]);
 80004ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000524 <main+0x194>)
 80004ee:	79db      	ldrb	r3, [r3, #7]
 80004f0:	4619      	mov	r1, r3
 80004f2:	480d      	ldr	r0, [pc, #52]	@ (8000528 <main+0x198>)
 80004f4:	f005 f97a 	bl	80057ec <iprintf>
        HAL_Delay(100);
 80004f8:	2064      	movs	r0, #100	@ 0x64
 80004fa:	f000 fed3 	bl	80012a4 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 80004fe:	bf00      	nop
 8000500:	e784      	b.n	800040c <main+0x7c>
 8000502:	bf00      	nop
 8000504:	20000018 	.word	0x20000018
 8000508:	20000084 	.word	0x20000084
 800050c:	200000ac 	.word	0x200000ac
 8000510:	200000f8 	.word	0x200000f8
 8000514:	20000144 	.word	0x20000144
 8000518:	20000190 	.word	0x20000190
 800051c:	48000400 	.word	0x48000400
 8000520:	08006720 	.word	0x08006720
 8000524:	20000264 	.word	0x20000264
 8000528:	0800672c 	.word	0x0800672c

0800052c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b096      	sub	sp, #88	@ 0x58
 8000530:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef       RCC_OscInitStruct = {0};
 8000532:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000536:	2228      	movs	r2, #40	@ 0x28
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f005 fb5a 	bl	8005bf4 <memset>
    RCC_ClkInitTypeDef       RCC_ClkInitStruct = {0};
 8000540:	f107 031c 	add.w	r3, r7, #28
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit     = {0};
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
 800055c:	611a      	str	r2, [r3, #16]
 800055e:	615a      	str	r2, [r3, #20]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000560:	2301      	movs	r3, #1
 8000562:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
 8000564:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000568:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800056a:	2300      	movs	r3, #0
 800056c:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.HSIState       = RCC_HSI_ON;
 800056e:	2301      	movs	r3, #1
 8000570:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 8000572:	2302      	movs	r3, #2
 8000574:	64fb      	str	r3, [r7, #76]	@ 0x4c
    RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 8000576:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800057a:	653b      	str	r3, [r7, #80]	@ 0x50
    RCC_OscInitStruct.PLL.PLLMUL     = RCC_PLL_MUL8;
 800057c:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8000580:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000582:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000586:	4618      	mov	r0, r3
 8000588:	f001 ffd2 	bl	8002530 <HAL_RCC_OscConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x6a>
        Error_Handler();
 8000592:	f000 fb3f 	bl	8000c14 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000596:	230f      	movs	r3, #15
 8000598:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 800059a:	2302      	movs	r3, #2
 800059c:	623b      	str	r3, [r7, #32]
    RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80005ac:	f107 031c 	add.w	r3, r7, #28
 80005b0:	2102      	movs	r1, #2
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 ffca 	bl	800354c <HAL_RCC_ClockConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x96>
        Error_Handler();
 80005be:	f000 fb29 	bl	8000c14 <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80005c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005c6:	607b      	str	r3, [r7, #4]
    PeriphClkInit.Tim1ClockSelection   = RCC_TIM1CLK_HCLK;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	4618      	mov	r0, r3
 80005d0:	f003 f9ce 	bl	8003970 <HAL_RCCEx_PeriphCLKConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xb2>
        Error_Handler();
 80005da:	f000 fb1b 	bl	8000c14 <Error_Handler>
    }
}
 80005de:	bf00      	nop
 80005e0:	3758      	adds	r7, #88	@ 0x58
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08a      	sub	sp, #40	@ 0x28
 80005ec:	af00      	add	r7, sp, #0
    /* USER CODE END CAN_Init 0 */

    /* USER CODE BEGIN CAN_Init 1 */

    /* USER CODE END CAN_Init 1 */
    hcan.Instance                  = CAN;
 80005ee:	4b25      	ldr	r3, [pc, #148]	@ (8000684 <MX_CAN_Init+0x9c>)
 80005f0:	4a25      	ldr	r2, [pc, #148]	@ (8000688 <MX_CAN_Init+0xa0>)
 80005f2:	601a      	str	r2, [r3, #0]
    hcan.Init.Prescaler            = 2;
 80005f4:	4b23      	ldr	r3, [pc, #140]	@ (8000684 <MX_CAN_Init+0x9c>)
 80005f6:	2202      	movs	r2, #2
 80005f8:	605a      	str	r2, [r3, #4]
    hcan.Init.Mode                 = CAN_MODE_NORMAL;
 80005fa:	4b22      	ldr	r3, [pc, #136]	@ (8000684 <MX_CAN_Init+0x9c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
    hcan.Init.SyncJumpWidth        = CAN_SJW_1TQ;
 8000600:	4b20      	ldr	r3, [pc, #128]	@ (8000684 <MX_CAN_Init+0x9c>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
    hcan.Init.TimeSeg1             = CAN_BS1_11TQ;
 8000606:	4b1f      	ldr	r3, [pc, #124]	@ (8000684 <MX_CAN_Init+0x9c>)
 8000608:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 800060c:	611a      	str	r2, [r3, #16]
    hcan.Init.TimeSeg2             = CAN_BS2_4TQ;
 800060e:	4b1d      	ldr	r3, [pc, #116]	@ (8000684 <MX_CAN_Init+0x9c>)
 8000610:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000614:	615a      	str	r2, [r3, #20]
    hcan.Init.TimeTriggeredMode    = DISABLE;
 8000616:	4b1b      	ldr	r3, [pc, #108]	@ (8000684 <MX_CAN_Init+0x9c>)
 8000618:	2200      	movs	r2, #0
 800061a:	761a      	strb	r2, [r3, #24]
    hcan.Init.AutoBusOff           = DISABLE;
 800061c:	4b19      	ldr	r3, [pc, #100]	@ (8000684 <MX_CAN_Init+0x9c>)
 800061e:	2200      	movs	r2, #0
 8000620:	765a      	strb	r2, [r3, #25]
    hcan.Init.AutoWakeUp           = DISABLE;
 8000622:	4b18      	ldr	r3, [pc, #96]	@ (8000684 <MX_CAN_Init+0x9c>)
 8000624:	2200      	movs	r2, #0
 8000626:	769a      	strb	r2, [r3, #26]
    hcan.Init.AutoRetransmission   = DISABLE;
 8000628:	4b16      	ldr	r3, [pc, #88]	@ (8000684 <MX_CAN_Init+0x9c>)
 800062a:	2200      	movs	r2, #0
 800062c:	76da      	strb	r2, [r3, #27]
    hcan.Init.ReceiveFifoLocked    = DISABLE;
 800062e:	4b15      	ldr	r3, [pc, #84]	@ (8000684 <MX_CAN_Init+0x9c>)
 8000630:	2200      	movs	r2, #0
 8000632:	771a      	strb	r2, [r3, #28]
    hcan.Init.TransmitFifoPriority = DISABLE;
 8000634:	4b13      	ldr	r3, [pc, #76]	@ (8000684 <MX_CAN_Init+0x9c>)
 8000636:	2200      	movs	r2, #0
 8000638:	775a      	strb	r2, [r3, #29]
    if (HAL_CAN_Init(&hcan) != HAL_OK) {
 800063a:	4812      	ldr	r0, [pc, #72]	@ (8000684 <MX_CAN_Init+0x9c>)
 800063c:	f000 fe56 	bl	80012ec <HAL_CAN_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_CAN_Init+0x62>
        Error_Handler();
 8000646:	f000 fae5 	bl	8000c14 <Error_Handler>
    }
    /* USER CODE BEGIN CAN_Init 2 */
    CAN_FilterTypeDef filter;
    filter.FilterIdHigh         = 0x001 << 5;            // フィルターID1
 800064a:	2320      	movs	r3, #32
 800064c:	603b      	str	r3, [r7, #0]
    filter.FilterIdLow          = 0x002 << 5;            // フィルターID2
 800064e:	2340      	movs	r3, #64	@ 0x40
 8000650:	607b      	str	r3, [r7, #4]
    filter.FilterMaskIdHigh     = 0x003 << 5;            // フィルターID3
 8000652:	2360      	movs	r3, #96	@ 0x60
 8000654:	60bb      	str	r3, [r7, #8]
    filter.FilterMaskIdLow      = 0x004 << 5;            // フィルターID4
 8000656:	2380      	movs	r3, #128	@ 0x80
 8000658:	60fb      	str	r3, [r7, #12]
    filter.FilterScale          = CAN_FILTERSCALE_16BIT; // 16モード
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]
    filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;      // FIFO0へ格納
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]
    filter.FilterBank           = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	617b      	str	r3, [r7, #20]
    filter.FilterMode           = CAN_FILTERMODE_IDLIST; // IDリストモード
 8000666:	2301      	movs	r3, #1
 8000668:	61bb      	str	r3, [r7, #24]
    filter.SlaveStartFilterBank = 14;
 800066a:	230e      	movs	r3, #14
 800066c:	627b      	str	r3, [r7, #36]	@ 0x24
    filter.FilterActivation     = ENABLE;
 800066e:	2301      	movs	r3, #1
 8000670:	623b      	str	r3, [r7, #32]

    HAL_CAN_ConfigFilter(&hcan, &filter);
 8000672:	463b      	mov	r3, r7
 8000674:	4619      	mov	r1, r3
 8000676:	4803      	ldr	r0, [pc, #12]	@ (8000684 <MX_CAN_Init+0x9c>)
 8000678:	f000 ff33 	bl	80014e2 <HAL_CAN_ConfigFilter>

    /* USER CODE END CAN_Init 2 */
}
 800067c:	bf00      	nop
 800067e:	3728      	adds	r7, #40	@ 0x28
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000084 	.word	0x20000084
 8000688:	40006400 	.word	0x40006400

0800068c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b09a      	sub	sp, #104	@ 0x68
 8000690:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM1_Init 0 */

    /* USER CODE END TIM1_Init 0 */

    TIM_ClockConfigTypeDef         sClockSourceConfig   = {0};
 8000692:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef        sMasterConfig        = {0};
 80006a0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef             sConfigOC            = {0};
 80006ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
 80006bc:	615a      	str	r2, [r3, #20]
 80006be:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	222c      	movs	r2, #44	@ 0x2c
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f005 fa94 	bl	8005bf4 <memset>

    /* USER CODE BEGIN TIM1_Init 1 */

    /* USER CODE END TIM1_Init 1 */
    htim1.Instance               = TIM1;
 80006cc:	4b43      	ldr	r3, [pc, #268]	@ (80007dc <MX_TIM1_Init+0x150>)
 80006ce:	4a44      	ldr	r2, [pc, #272]	@ (80007e0 <MX_TIM1_Init+0x154>)
 80006d0:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler         = 64;
 80006d2:	4b42      	ldr	r3, [pc, #264]	@ (80007dc <MX_TIM1_Init+0x150>)
 80006d4:	2240      	movs	r2, #64	@ 0x40
 80006d6:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode       = TIM_COUNTERMODE_UP;
 80006d8:	4b40      	ldr	r3, [pc, #256]	@ (80007dc <MX_TIM1_Init+0x150>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
    htim1.Init.Period            = 1000;
 80006de:	4b3f      	ldr	r3, [pc, #252]	@ (80007dc <MX_TIM1_Init+0x150>)
 80006e0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006e4:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 80006e6:	4b3d      	ldr	r3, [pc, #244]	@ (80007dc <MX_TIM1_Init+0x150>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 80006ec:	4b3b      	ldr	r3, [pc, #236]	@ (80007dc <MX_TIM1_Init+0x150>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	615a      	str	r2, [r3, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f2:	4b3a      	ldr	r3, [pc, #232]	@ (80007dc <MX_TIM1_Init+0x150>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80006f8:	4838      	ldr	r0, [pc, #224]	@ (80007dc <MX_TIM1_Init+0x150>)
 80006fa:	f003 fa5d 	bl	8003bb8 <HAL_TIM_Base_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_TIM1_Init+0x7c>
        Error_Handler();
 8000704:	f000 fa86 	bl	8000c14 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000708:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800070c:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800070e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000712:	4619      	mov	r1, r3
 8000714:	4831      	ldr	r0, [pc, #196]	@ (80007dc <MX_TIM1_Init+0x150>)
 8000716:	f003 fde3 	bl	80042e0 <HAL_TIM_ConfigClockSource>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM1_Init+0x98>
        Error_Handler();
 8000720:	f000 fa78 	bl	8000c14 <Error_Handler>
    }
    if (HAL_TIM_OC_Init(&htim1) != HAL_OK) {
 8000724:	482d      	ldr	r0, [pc, #180]	@ (80007dc <MX_TIM1_Init+0x150>)
 8000726:	f003 fa9e 	bl	8003c66 <HAL_TIM_OC_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM1_Init+0xa8>
        Error_Handler();
 8000730:	f000 fa70 	bl	8000c14 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger  = TIM_TRGO_RESET;
 8000734:	2300      	movs	r3, #0
 8000736:	64fb      	str	r3, [r7, #76]	@ 0x4c
    sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000738:	2300      	movs	r3, #0
 800073a:	653b      	str	r3, [r7, #80]	@ 0x50
    sMasterConfig.MasterSlaveMode      = TIM_MASTERSLAVEMODE_DISABLE;
 800073c:	2300      	movs	r3, #0
 800073e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8000740:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000744:	4619      	mov	r1, r3
 8000746:	4825      	ldr	r0, [pc, #148]	@ (80007dc <MX_TIM1_Init+0x150>)
 8000748:	f004 fa7e 	bl	8004c48 <HAL_TIMEx_MasterConfigSynchronization>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM1_Init+0xca>
        Error_Handler();
 8000752:	f000 fa5f 	bl	8000c14 <Error_Handler>
    }
    sConfigOC.OCMode       = TIM_OCMODE_TIMING;
 8000756:	2300      	movs	r3, #0
 8000758:	633b      	str	r3, [r7, #48]	@ 0x30
    sConfigOC.Pulse        = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	637b      	str	r3, [r7, #52]	@ 0x34
    sConfigOC.OCPolarity   = TIM_OCPOLARITY_HIGH;
 800075e:	2300      	movs	r3, #0
 8000760:	63bb      	str	r3, [r7, #56]	@ 0x38
    sConfigOC.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 8000762:	2300      	movs	r3, #0
 8000764:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sConfigOC.OCFastMode   = TIM_OCFAST_DISABLE;
 8000766:	2300      	movs	r3, #0
 8000768:	643b      	str	r3, [r7, #64]	@ 0x40
    sConfigOC.OCIdleState  = TIM_OCIDLESTATE_RESET;
 800076a:	2300      	movs	r3, #0
 800076c:	647b      	str	r3, [r7, #68]	@ 0x44
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800076e:	2300      	movs	r3, #0
 8000770:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8000772:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000776:	2200      	movs	r2, #0
 8000778:	4619      	mov	r1, r3
 800077a:	4818      	ldr	r0, [pc, #96]	@ (80007dc <MX_TIM1_Init+0x150>)
 800077c:	f003 fc22 	bl	8003fc4 <HAL_TIM_OC_ConfigChannel>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_TIM1_Init+0xfe>
        Error_Handler();
 8000786:	f000 fa45 	bl	8000c14 <Error_Handler>
    }
    sBreakDeadTimeConfig.OffStateRunMode  = TIM_OSSR_DISABLE;
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
    sBreakDeadTimeConfig.LockLevel        = TIM_LOCKLEVEL_OFF;
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
    sBreakDeadTimeConfig.DeadTime         = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
    sBreakDeadTimeConfig.BreakState       = TIM_BREAK_DISABLE;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
    sBreakDeadTimeConfig.BreakPolarity    = TIM_BREAKPOLARITY_HIGH;
 800079e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007a2:	61bb      	str	r3, [r7, #24]
    sBreakDeadTimeConfig.BreakFilter      = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61fb      	str	r3, [r7, #28]
    sBreakDeadTimeConfig.Break2State      = TIM_BREAK2_DISABLE;
 80007a8:	2300      	movs	r3, #0
 80007aa:	623b      	str	r3, [r7, #32]
    sBreakDeadTimeConfig.Break2Polarity   = TIM_BREAK2POLARITY_HIGH;
 80007ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80007b0:	627b      	str	r3, [r7, #36]	@ 0x24
    sBreakDeadTimeConfig.Break2Filter     = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    sBreakDeadTimeConfig.AutomaticOutput  = TIM_AUTOMATICOUTPUT_DISABLE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	4619      	mov	r1, r3
 80007be:	4807      	ldr	r0, [pc, #28]	@ (80007dc <MX_TIM1_Init+0x150>)
 80007c0:	f004 fab0 	bl	8004d24 <HAL_TIMEx_ConfigBreakDeadTime>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM1_Init+0x142>
        Error_Handler();
 80007ca:	f000 fa23 	bl	8000c14 <Error_Handler>
    }
    /* USER CODE BEGIN TIM1_Init 2 */

    /* USER CODE END TIM1_Init 2 */
    HAL_TIM_MspPostInit(&htim1);
 80007ce:	4803      	ldr	r0, [pc, #12]	@ (80007dc <MX_TIM1_Init+0x150>)
 80007d0:	f000 faf0 	bl	8000db4 <HAL_TIM_MspPostInit>
}
 80007d4:	bf00      	nop
 80007d6:	3768      	adds	r7, #104	@ 0x68
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200000ac 	.word	0x200000ac
 80007e0:	40012c00 	.word	0x40012c00

080007e4 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08e      	sub	sp, #56	@ 0x38
 80007e8:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_ClockConfigTypeDef  sClockSourceConfig = {0};
 80007ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig      = {0};
 80007f8:	f107 031c 	add.w	r3, r7, #28
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef      sConfigOC          = {0};
 8000804:	463b      	mov	r3, r7
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]
 8000812:	615a      	str	r2, [r3, #20]
 8000814:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance               = TIM2;
 8000816:	4b2d      	ldr	r3, [pc, #180]	@ (80008cc <MX_TIM2_Init+0xe8>)
 8000818:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800081c:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler         = 63;
 800081e:	4b2b      	ldr	r3, [pc, #172]	@ (80008cc <MX_TIM2_Init+0xe8>)
 8000820:	223f      	movs	r2, #63	@ 0x3f
 8000822:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8000824:	4b29      	ldr	r3, [pc, #164]	@ (80008cc <MX_TIM2_Init+0xe8>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
    htim2.Init.Period            = 1000;
 800082a:	4b28      	ldr	r3, [pc, #160]	@ (80008cc <MX_TIM2_Init+0xe8>)
 800082c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000830:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 8000832:	4b26      	ldr	r3, [pc, #152]	@ (80008cc <MX_TIM2_Init+0xe8>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000838:	4b24      	ldr	r3, [pc, #144]	@ (80008cc <MX_TIM2_Init+0xe8>)
 800083a:	2200      	movs	r2, #0
 800083c:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800083e:	4823      	ldr	r0, [pc, #140]	@ (80008cc <MX_TIM2_Init+0xe8>)
 8000840:	f003 f9ba 	bl	8003bb8 <HAL_TIM_Base_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM2_Init+0x6a>
        Error_Handler();
 800084a:	f000 f9e3 	bl	8000c14 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800084e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000852:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000854:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000858:	4619      	mov	r1, r3
 800085a:	481c      	ldr	r0, [pc, #112]	@ (80008cc <MX_TIM2_Init+0xe8>)
 800085c:	f003 fd40 	bl	80042e0 <HAL_TIM_ConfigClockSource>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM2_Init+0x86>
        Error_Handler();
 8000866:	f000 f9d5 	bl	8000c14 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 800086a:	4818      	ldr	r0, [pc, #96]	@ (80008cc <MX_TIM2_Init+0xe8>)
 800086c:	f003 fa5c 	bl	8003d28 <HAL_TIM_PWM_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM2_Init+0x96>
        Error_Handler();
 8000876:	f000 f9cd 	bl	8000c14 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
    sMasterConfig.MasterSlaveMode     = TIM_MASTERSLAVEMODE_DISABLE;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	4810      	ldr	r0, [pc, #64]	@ (80008cc <MX_TIM2_Init+0xe8>)
 800088a:	f004 f9dd 	bl	8004c48 <HAL_TIMEx_MasterConfigSynchronization>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM2_Init+0xb4>
        Error_Handler();
 8000894:	f000 f9be 	bl	8000c14 <Error_Handler>
    }
    sConfigOC.OCMode     = TIM_OCMODE_PWM1;
 8000898:	2360      	movs	r3, #96	@ 0x60
 800089a:	603b      	str	r3, [r7, #0]
    sConfigOC.Pulse      = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	607b      	str	r3, [r7, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	613b      	str	r3, [r7, #16]
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 80008a8:	463b      	mov	r3, r7
 80008aa:	2204      	movs	r2, #4
 80008ac:	4619      	mov	r1, r3
 80008ae:	4807      	ldr	r0, [pc, #28]	@ (80008cc <MX_TIM2_Init+0xe8>)
 80008b0:	f003 fc02 	bl	80040b8 <HAL_TIM_PWM_ConfigChannel>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM2_Init+0xda>
        Error_Handler();
 80008ba:	f000 f9ab 	bl	8000c14 <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */
    HAL_TIM_MspPostInit(&htim2);
 80008be:	4803      	ldr	r0, [pc, #12]	@ (80008cc <MX_TIM2_Init+0xe8>)
 80008c0:	f000 fa78 	bl	8000db4 <HAL_TIM_MspPostInit>
}
 80008c4:	bf00      	nop
 80008c6:	3738      	adds	r7, #56	@ 0x38
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	200000f8 	.word	0x200000f8

080008d0 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08e      	sub	sp, #56	@ 0x38
 80008d4:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_ClockConfigTypeDef  sClockSourceConfig = {0};
 80008d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig      = {0};
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef      sConfigOC          = {0};
 80008f0:	463b      	mov	r3, r7
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]
 80008fe:	615a      	str	r2, [r3, #20]
 8000900:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance               = TIM3;
 8000902:	4b3d      	ldr	r3, [pc, #244]	@ (80009f8 <MX_TIM3_Init+0x128>)
 8000904:	4a3d      	ldr	r2, [pc, #244]	@ (80009fc <MX_TIM3_Init+0x12c>)
 8000906:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler         = 63;
 8000908:	4b3b      	ldr	r3, [pc, #236]	@ (80009f8 <MX_TIM3_Init+0x128>)
 800090a:	223f      	movs	r2, #63	@ 0x3f
 800090c:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode       = TIM_COUNTERMODE_UP;
 800090e:	4b3a      	ldr	r3, [pc, #232]	@ (80009f8 <MX_TIM3_Init+0x128>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
    htim3.Init.Period            = 1000;
 8000914:	4b38      	ldr	r3, [pc, #224]	@ (80009f8 <MX_TIM3_Init+0x128>)
 8000916:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800091a:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 800091c:	4b36      	ldr	r3, [pc, #216]	@ (80009f8 <MX_TIM3_Init+0x128>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000922:	4b35      	ldr	r3, [pc, #212]	@ (80009f8 <MX_TIM3_Init+0x128>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000928:	4833      	ldr	r0, [pc, #204]	@ (80009f8 <MX_TIM3_Init+0x128>)
 800092a:	f003 f945 	bl	8003bb8 <HAL_TIM_Base_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM3_Init+0x68>
        Error_Handler();
 8000934:	f000 f96e 	bl	8000c14 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000938:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800093c:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800093e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000942:	4619      	mov	r1, r3
 8000944:	482c      	ldr	r0, [pc, #176]	@ (80009f8 <MX_TIM3_Init+0x128>)
 8000946:	f003 fccb 	bl	80042e0 <HAL_TIM_ConfigClockSource>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM3_Init+0x84>
        Error_Handler();
 8000950:	f000 f960 	bl	8000c14 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000954:	4828      	ldr	r0, [pc, #160]	@ (80009f8 <MX_TIM3_Init+0x128>)
 8000956:	f003 f9e7 	bl	8003d28 <HAL_TIM_PWM_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM3_Init+0x94>
        Error_Handler();
 8000960:	f000 f958 	bl	8000c14 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
    sMasterConfig.MasterSlaveMode     = TIM_MASTERSLAVEMODE_DISABLE;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4821      	ldr	r0, [pc, #132]	@ (80009f8 <MX_TIM3_Init+0x128>)
 8000974:	f004 f968 	bl	8004c48 <HAL_TIMEx_MasterConfigSynchronization>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM3_Init+0xb2>
        Error_Handler();
 800097e:	f000 f949 	bl	8000c14 <Error_Handler>
    }
    sConfigOC.OCMode     = TIM_OCMODE_PWM1;
 8000982:	2360      	movs	r3, #96	@ 0x60
 8000984:	603b      	str	r3, [r7, #0]
    sConfigOC.Pulse      = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8000992:	463b      	mov	r3, r7
 8000994:	2200      	movs	r2, #0
 8000996:	4619      	mov	r1, r3
 8000998:	4817      	ldr	r0, [pc, #92]	@ (80009f8 <MX_TIM3_Init+0x128>)
 800099a:	f003 fb8d 	bl	80040b8 <HAL_TIM_PWM_ConfigChannel>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM3_Init+0xd8>
        Error_Handler();
 80009a4:	f000 f936 	bl	8000c14 <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 80009a8:	463b      	mov	r3, r7
 80009aa:	2204      	movs	r2, #4
 80009ac:	4619      	mov	r1, r3
 80009ae:	4812      	ldr	r0, [pc, #72]	@ (80009f8 <MX_TIM3_Init+0x128>)
 80009b0:	f003 fb82 	bl	80040b8 <HAL_TIM_PWM_ConfigChannel>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM3_Init+0xee>
        Error_Handler();
 80009ba:	f000 f92b 	bl	8000c14 <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 80009be:	463b      	mov	r3, r7
 80009c0:	2208      	movs	r2, #8
 80009c2:	4619      	mov	r1, r3
 80009c4:	480c      	ldr	r0, [pc, #48]	@ (80009f8 <MX_TIM3_Init+0x128>)
 80009c6:	f003 fb77 	bl	80040b8 <HAL_TIM_PWM_ConfigChannel>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM3_Init+0x104>
        Error_Handler();
 80009d0:	f000 f920 	bl	8000c14 <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 80009d4:	463b      	mov	r3, r7
 80009d6:	220c      	movs	r2, #12
 80009d8:	4619      	mov	r1, r3
 80009da:	4807      	ldr	r0, [pc, #28]	@ (80009f8 <MX_TIM3_Init+0x128>)
 80009dc:	f003 fb6c 	bl	80040b8 <HAL_TIM_PWM_ConfigChannel>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_TIM3_Init+0x11a>
        Error_Handler();
 80009e6:	f000 f915 	bl	8000c14 <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */
    HAL_TIM_MspPostInit(&htim3);
 80009ea:	4803      	ldr	r0, [pc, #12]	@ (80009f8 <MX_TIM3_Init+0x128>)
 80009ec:	f000 f9e2 	bl	8000db4 <HAL_TIM_MspPostInit>
}
 80009f0:	bf00      	nop
 80009f2:	3738      	adds	r7, #56	@ 0x38
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000144 	.word	0x20000144
 80009fc:	40000400 	.word	0x40000400

08000a00 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b092      	sub	sp, #72	@ 0x48
 8000a04:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM16_Init 0 */

    /* USER CODE END TIM16_Init 0 */

    TIM_OC_InitTypeDef             sConfigOC            = {0};
 8000a06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]
 8000a16:	615a      	str	r2, [r3, #20]
 8000a18:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	222c      	movs	r2, #44	@ 0x2c
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4618      	mov	r0, r3
 8000a22:	f005 f8e7 	bl	8005bf4 <memset>

    /* USER CODE BEGIN TIM16_Init 1 */

    /* USER CODE END TIM16_Init 1 */
    htim16.Instance               = TIM16;
 8000a26:	4b31      	ldr	r3, [pc, #196]	@ (8000aec <MX_TIM16_Init+0xec>)
 8000a28:	4a31      	ldr	r2, [pc, #196]	@ (8000af0 <MX_TIM16_Init+0xf0>)
 8000a2a:	601a      	str	r2, [r3, #0]
    htim16.Init.Prescaler         = 64;
 8000a2c:	4b2f      	ldr	r3, [pc, #188]	@ (8000aec <MX_TIM16_Init+0xec>)
 8000a2e:	2240      	movs	r2, #64	@ 0x40
 8000a30:	605a      	str	r2, [r3, #4]
    htim16.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8000a32:	4b2e      	ldr	r3, [pc, #184]	@ (8000aec <MX_TIM16_Init+0xec>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
    htim16.Init.Period            = 1000;
 8000a38:	4b2c      	ldr	r3, [pc, #176]	@ (8000aec <MX_TIM16_Init+0xec>)
 8000a3a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a3e:	60da      	str	r2, [r3, #12]
    htim16.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 8000a40:	4b2a      	ldr	r3, [pc, #168]	@ (8000aec <MX_TIM16_Init+0xec>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
    htim16.Init.RepetitionCounter = 0;
 8000a46:	4b29      	ldr	r3, [pc, #164]	@ (8000aec <MX_TIM16_Init+0xec>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	615a      	str	r2, [r3, #20]
    htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a4c:	4b27      	ldr	r3, [pc, #156]	@ (8000aec <MX_TIM16_Init+0xec>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8000a52:	4826      	ldr	r0, [pc, #152]	@ (8000aec <MX_TIM16_Init+0xec>)
 8000a54:	f003 f8b0 	bl	8003bb8 <HAL_TIM_Base_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM16_Init+0x62>
        Error_Handler();
 8000a5e:	f000 f8d9 	bl	8000c14 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim16) != HAL_OK) {
 8000a62:	4822      	ldr	r0, [pc, #136]	@ (8000aec <MX_TIM16_Init+0xec>)
 8000a64:	f003 f960 	bl	8003d28 <HAL_TIM_PWM_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM16_Init+0x72>
        Error_Handler();
 8000a6e:	f000 f8d1 	bl	8000c14 <Error_Handler>
    }
    sConfigOC.OCMode       = TIM_OCMODE_PWM1;
 8000a72:	2360      	movs	r3, #96	@ 0x60
 8000a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sConfigOC.Pulse        = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	633b      	str	r3, [r7, #48]	@ 0x30
    sConfigOC.OCPolarity   = TIM_OCPOLARITY_HIGH;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	637b      	str	r3, [r7, #52]	@ 0x34
    sConfigOC.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	63bb      	str	r3, [r7, #56]	@ 0x38
    sConfigOC.OCFastMode   = TIM_OCFAST_DISABLE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sConfigOC.OCIdleState  = TIM_OCIDLESTATE_RESET;
 8000a86:	2300      	movs	r3, #0
 8000a88:	643b      	str	r3, [r7, #64]	@ 0x40
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8000a8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a92:	2200      	movs	r2, #0
 8000a94:	4619      	mov	r1, r3
 8000a96:	4815      	ldr	r0, [pc, #84]	@ (8000aec <MX_TIM16_Init+0xec>)
 8000a98:	f003 fb0e 	bl	80040b8 <HAL_TIM_PWM_ConfigChannel>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM16_Init+0xa6>
        Error_Handler();
 8000aa2:	f000 f8b7 	bl	8000c14 <Error_Handler>
    }
    sBreakDeadTimeConfig.OffStateRunMode  = TIM_OSSR_DISABLE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	603b      	str	r3, [r7, #0]
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
    sBreakDeadTimeConfig.LockLevel        = TIM_LOCKLEVEL_OFF;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60bb      	str	r3, [r7, #8]
    sBreakDeadTimeConfig.DeadTime         = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
    sBreakDeadTimeConfig.BreakState       = TIM_BREAK_DISABLE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
    sBreakDeadTimeConfig.BreakPolarity    = TIM_BREAKPOLARITY_HIGH;
 8000aba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000abe:	617b      	str	r3, [r7, #20]
    sBreakDeadTimeConfig.BreakFilter      = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61bb      	str	r3, [r7, #24]
    sBreakDeadTimeConfig.AutomaticOutput  = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK) {
 8000ac8:	463b      	mov	r3, r7
 8000aca:	4619      	mov	r1, r3
 8000acc:	4807      	ldr	r0, [pc, #28]	@ (8000aec <MX_TIM16_Init+0xec>)
 8000ace:	f004 f929 	bl	8004d24 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM16_Init+0xdc>
        Error_Handler();
 8000ad8:	f000 f89c 	bl	8000c14 <Error_Handler>
    }
    /* USER CODE BEGIN TIM16_Init 2 */

    /* USER CODE END TIM16_Init 2 */
    HAL_TIM_MspPostInit(&htim16);
 8000adc:	4803      	ldr	r0, [pc, #12]	@ (8000aec <MX_TIM16_Init+0xec>)
 8000ade:	f000 f969 	bl	8000db4 <HAL_TIM_MspPostInit>
}
 8000ae2:	bf00      	nop
 8000ae4:	3748      	adds	r7, #72	@ 0x48
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000190 	.word	0x20000190
 8000af0:	40014400 	.word	0x40014400

08000af4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance                    = USART2;
 8000af8:	4b14      	ldr	r3, [pc, #80]	@ (8000b4c <MX_USART2_UART_Init+0x58>)
 8000afa:	4a15      	ldr	r2, [pc, #84]	@ (8000b50 <MX_USART2_UART_Init+0x5c>)
 8000afc:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate               = 115200;
 8000afe:	4b13      	ldr	r3, [pc, #76]	@ (8000b4c <MX_USART2_UART_Init+0x58>)
 8000b00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b04:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength             = UART_WORDLENGTH_8B;
 8000b06:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <MX_USART2_UART_Init+0x58>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits               = UART_STOPBITS_1;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b4c <MX_USART2_UART_Init+0x58>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity                 = UART_PARITY_NONE;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <MX_USART2_UART_Init+0x58>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode                   = UART_MODE_TX_RX;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <MX_USART2_UART_Init+0x58>)
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl              = UART_HWCONTROL_NONE;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b4c <MX_USART2_UART_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling           = UART_OVERSAMPLING_16;
 8000b24:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <MX_USART2_UART_Init+0x58>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling         = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	@ (8000b4c <MX_USART2_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b30:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <MX_USART2_UART_Init+0x58>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000b36:	4805      	ldr	r0, [pc, #20]	@ (8000b4c <MX_USART2_UART_Init+0x58>)
 8000b38:	f004 f96c 	bl	8004e14 <HAL_UART_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_USART2_UART_Init+0x52>
        Error_Handler();
 8000b42:	f000 f867 	bl	8000c14 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200001dc 	.word	0x200001dc
 8000b50:	40004400 	.word	0x40004400

08000b54 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b088      	sub	sp, #32
 8000b58:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */

    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b6a:	4b28      	ldr	r3, [pc, #160]	@ (8000c0c <MX_GPIO_Init+0xb8>)
 8000b6c:	695b      	ldr	r3, [r3, #20]
 8000b6e:	4a27      	ldr	r2, [pc, #156]	@ (8000c0c <MX_GPIO_Init+0xb8>)
 8000b70:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b74:	6153      	str	r3, [r2, #20]
 8000b76:	4b25      	ldr	r3, [pc, #148]	@ (8000c0c <MX_GPIO_Init+0xb8>)
 8000b78:	695b      	ldr	r3, [r3, #20]
 8000b7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	4b22      	ldr	r3, [pc, #136]	@ (8000c0c <MX_GPIO_Init+0xb8>)
 8000b84:	695b      	ldr	r3, [r3, #20]
 8000b86:	4a21      	ldr	r2, [pc, #132]	@ (8000c0c <MX_GPIO_Init+0xb8>)
 8000b88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b8c:	6153      	str	r3, [r2, #20]
 8000b8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c0c <MX_GPIO_Init+0xb8>)
 8000b90:	695b      	ldr	r3, [r3, #20]
 8000b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c0c <MX_GPIO_Init+0xb8>)
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	4a1b      	ldr	r2, [pc, #108]	@ (8000c0c <MX_GPIO_Init+0xb8>)
 8000ba0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ba4:	6153      	str	r3, [r2, #20]
 8000ba6:	4b19      	ldr	r3, [pc, #100]	@ (8000c0c <MX_GPIO_Init+0xb8>)
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 | GPIO_PIN_7, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	21a0      	movs	r1, #160	@ 0xa0
 8000bb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bba:	f001 fca1 	bl	8002500 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_5, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	212a      	movs	r1, #42	@ 0x2a
 8000bc2:	4813      	ldr	r0, [pc, #76]	@ (8000c10 <MX_GPIO_Init+0xbc>)
 8000bc4:	f001 fc9c 	bl	8002500 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : PA5 PA7 */
    GPIO_InitStruct.Pin   = GPIO_PIN_5 | GPIO_PIN_7;
 8000bc8:	23a0      	movs	r3, #160	@ 0xa0
 8000bca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd8:	f107 030c 	add.w	r3, r7, #12
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000be2:	f001 fb1b 	bl	800221c <HAL_GPIO_Init>

    /*Configure GPIO pins : PB1 PB3 PB5 */
    GPIO_InitStruct.Pin   = GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_5;
 8000be6:	232a      	movs	r3, #42	@ 0x2a
 8000be8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8000bea:	2301      	movs	r3, #1
 8000bec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf6:	f107 030c 	add.w	r3, r7, #12
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4804      	ldr	r0, [pc, #16]	@ (8000c10 <MX_GPIO_Init+0xbc>)
 8000bfe:	f001 fb0d 	bl	800221c <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */

    /* USER CODE END MX_GPIO_Init_2 */
}
 8000c02:	bf00      	nop
 8000c04:	3720      	adds	r7, #32
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	48000400 	.word	0x48000400

08000c14 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c18:	b672      	cpsid	i
}
 8000c1a:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <Error_Handler+0x8>

08000c20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c26:	4b0f      	ldr	r3, [pc, #60]	@ (8000c64 <HAL_MspInit+0x44>)
 8000c28:	699b      	ldr	r3, [r3, #24]
 8000c2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c64 <HAL_MspInit+0x44>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	6193      	str	r3, [r2, #24]
 8000c32:	4b0c      	ldr	r3, [pc, #48]	@ (8000c64 <HAL_MspInit+0x44>)
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3e:	4b09      	ldr	r3, [pc, #36]	@ (8000c64 <HAL_MspInit+0x44>)
 8000c40:	69db      	ldr	r3, [r3, #28]
 8000c42:	4a08      	ldr	r2, [pc, #32]	@ (8000c64 <HAL_MspInit+0x44>)
 8000c44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c48:	61d3      	str	r3, [r2, #28]
 8000c4a:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <HAL_MspInit+0x44>)
 8000c4c:	69db      	ldr	r3, [r3, #28]
 8000c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	40021000 	.word	0x40021000

08000c68 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08a      	sub	sp, #40	@ 0x28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a1c      	ldr	r2, [pc, #112]	@ (8000cf8 <HAL_CAN_MspInit+0x90>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d131      	bne.n	8000cee <HAL_CAN_MspInit+0x86>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cfc <HAL_CAN_MspInit+0x94>)
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	4a1b      	ldr	r2, [pc, #108]	@ (8000cfc <HAL_CAN_MspInit+0x94>)
 8000c90:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c94:	61d3      	str	r3, [r2, #28]
 8000c96:	4b19      	ldr	r3, [pc, #100]	@ (8000cfc <HAL_CAN_MspInit+0x94>)
 8000c98:	69db      	ldr	r3, [r3, #28]
 8000c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	4b16      	ldr	r3, [pc, #88]	@ (8000cfc <HAL_CAN_MspInit+0x94>)
 8000ca4:	695b      	ldr	r3, [r3, #20]
 8000ca6:	4a15      	ldr	r2, [pc, #84]	@ (8000cfc <HAL_CAN_MspInit+0x94>)
 8000ca8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cac:	6153      	str	r3, [r2, #20]
 8000cae:	4b13      	ldr	r3, [pc, #76]	@ (8000cfc <HAL_CAN_MspInit+0x94>)
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000cba:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000ccc:	2309      	movs	r3, #9
 8000cce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cda:	f001 fa9f 	bl	800221c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	2014      	movs	r0, #20
 8000ce4:	f001 fa63 	bl	80021ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8000ce8:	2014      	movs	r0, #20
 8000cea:	f001 fa7c 	bl	80021e6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 8000cee:	bf00      	nop
 8000cf0:	3728      	adds	r7, #40	@ 0x28
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40006400 	.word	0x40006400
 8000cfc:	40021000 	.word	0x40021000

08000d00 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b087      	sub	sp, #28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a25      	ldr	r2, [pc, #148]	@ (8000da4 <HAL_TIM_Base_MspInit+0xa4>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d10c      	bne.n	8000d2c <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d12:	4b25      	ldr	r3, [pc, #148]	@ (8000da8 <HAL_TIM_Base_MspInit+0xa8>)
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	4a24      	ldr	r2, [pc, #144]	@ (8000da8 <HAL_TIM_Base_MspInit+0xa8>)
 8000d18:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d1c:	6193      	str	r3, [r2, #24]
 8000d1e:	4b22      	ldr	r3, [pc, #136]	@ (8000da8 <HAL_TIM_Base_MspInit+0xa8>)
 8000d20:	699b      	ldr	r3, [r3, #24]
 8000d22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000d2a:	e034      	b.n	8000d96 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d34:	d10c      	bne.n	8000d50 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d36:	4b1c      	ldr	r3, [pc, #112]	@ (8000da8 <HAL_TIM_Base_MspInit+0xa8>)
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	4a1b      	ldr	r2, [pc, #108]	@ (8000da8 <HAL_TIM_Base_MspInit+0xa8>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	61d3      	str	r3, [r2, #28]
 8000d42:	4b19      	ldr	r3, [pc, #100]	@ (8000da8 <HAL_TIM_Base_MspInit+0xa8>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]
}
 8000d4e:	e022      	b.n	8000d96 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a15      	ldr	r2, [pc, #84]	@ (8000dac <HAL_TIM_Base_MspInit+0xac>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d10c      	bne.n	8000d74 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d5a:	4b13      	ldr	r3, [pc, #76]	@ (8000da8 <HAL_TIM_Base_MspInit+0xa8>)
 8000d5c:	69db      	ldr	r3, [r3, #28]
 8000d5e:	4a12      	ldr	r2, [pc, #72]	@ (8000da8 <HAL_TIM_Base_MspInit+0xa8>)
 8000d60:	f043 0302 	orr.w	r3, r3, #2
 8000d64:	61d3      	str	r3, [r2, #28]
 8000d66:	4b10      	ldr	r3, [pc, #64]	@ (8000da8 <HAL_TIM_Base_MspInit+0xa8>)
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
}
 8000d72:	e010      	b.n	8000d96 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM16)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a0d      	ldr	r2, [pc, #52]	@ (8000db0 <HAL_TIM_Base_MspInit+0xb0>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d10b      	bne.n	8000d96 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000da8 <HAL_TIM_Base_MspInit+0xa8>)
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	4a09      	ldr	r2, [pc, #36]	@ (8000da8 <HAL_TIM_Base_MspInit+0xa8>)
 8000d84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d88:	6193      	str	r3, [r2, #24]
 8000d8a:	4b07      	ldr	r3, [pc, #28]	@ (8000da8 <HAL_TIM_Base_MspInit+0xa8>)
 8000d8c:	699b      	ldr	r3, [r3, #24]
 8000d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
}
 8000d96:	bf00      	nop
 8000d98:	371c      	adds	r7, #28
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	40012c00 	.word	0x40012c00
 8000da8:	40021000 	.word	0x40021000
 8000dac:	40000400 	.word	0x40000400
 8000db0:	40014400 	.word	0x40014400

08000db4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08c      	sub	sp, #48	@ 0x30
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 031c 	add.w	r3, r7, #28
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a5c      	ldr	r2, [pc, #368]	@ (8000f44 <HAL_TIM_MspPostInit+0x190>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d11e      	bne.n	8000e14 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd6:	4b5c      	ldr	r3, [pc, #368]	@ (8000f48 <HAL_TIM_MspPostInit+0x194>)
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	4a5b      	ldr	r2, [pc, #364]	@ (8000f48 <HAL_TIM_MspPostInit+0x194>)
 8000ddc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000de0:	6153      	str	r3, [r2, #20]
 8000de2:	4b59      	ldr	r3, [pc, #356]	@ (8000f48 <HAL_TIM_MspPostInit+0x194>)
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dea:	61bb      	str	r3, [r7, #24]
 8000dec:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000dee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df4:	2302      	movs	r3, #2
 8000df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000e00:	2306      	movs	r3, #6
 8000e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e04:	f107 031c 	add.w	r3, r7, #28
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e0e:	f001 fa05 	bl	800221c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM16_MspPostInit 1 */

    /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8000e12:	e092      	b.n	8000f3a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM2)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e1c:	d11d      	bne.n	8000e5a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	4b4a      	ldr	r3, [pc, #296]	@ (8000f48 <HAL_TIM_MspPostInit+0x194>)
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	4a49      	ldr	r2, [pc, #292]	@ (8000f48 <HAL_TIM_MspPostInit+0x194>)
 8000e24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e28:	6153      	str	r3, [r2, #20]
 8000e2a:	4b47      	ldr	r3, [pc, #284]	@ (8000f48 <HAL_TIM_MspPostInit+0x194>)
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e36:	2302      	movs	r3, #2
 8000e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e46:	2301      	movs	r3, #1
 8000e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	f107 031c 	add.w	r3, r7, #28
 8000e4e:	4619      	mov	r1, r3
 8000e50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e54:	f001 f9e2 	bl	800221c <HAL_GPIO_Init>
}
 8000e58:	e06f      	b.n	8000f3a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a3b      	ldr	r2, [pc, #236]	@ (8000f4c <HAL_TIM_MspPostInit+0x198>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d149      	bne.n	8000ef8 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e64:	4b38      	ldr	r3, [pc, #224]	@ (8000f48 <HAL_TIM_MspPostInit+0x194>)
 8000e66:	695b      	ldr	r3, [r3, #20]
 8000e68:	4a37      	ldr	r2, [pc, #220]	@ (8000f48 <HAL_TIM_MspPostInit+0x194>)
 8000e6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e6e:	6153      	str	r3, [r2, #20]
 8000e70:	4b35      	ldr	r3, [pc, #212]	@ (8000f48 <HAL_TIM_MspPostInit+0x194>)
 8000e72:	695b      	ldr	r3, [r3, #20]
 8000e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7c:	4b32      	ldr	r3, [pc, #200]	@ (8000f48 <HAL_TIM_MspPostInit+0x194>)
 8000e7e:	695b      	ldr	r3, [r3, #20]
 8000e80:	4a31      	ldr	r2, [pc, #196]	@ (8000f48 <HAL_TIM_MspPostInit+0x194>)
 8000e82:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e86:	6153      	str	r3, [r2, #20]
 8000e88:	4b2f      	ldr	r3, [pc, #188]	@ (8000f48 <HAL_TIM_MspPostInit+0x194>)
 8000e8a:	695b      	ldr	r3, [r3, #20]
 8000e8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e94:	2310      	movs	r3, #16
 8000e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea8:	f107 031c 	add.w	r3, r7, #28
 8000eac:	4619      	mov	r1, r3
 8000eae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eb2:	f001 f9b3 	bl	800221c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8000eb6:	2311      	movs	r3, #17
 8000eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	4619      	mov	r1, r3
 8000ed0:	481f      	ldr	r0, [pc, #124]	@ (8000f50 <HAL_TIM_MspPostInit+0x19c>)
 8000ed2:	f001 f9a3 	bl	800221c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ed6:	2380      	movs	r3, #128	@ 0x80
 8000ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM3;
 8000ee6:	230a      	movs	r3, #10
 8000ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4817      	ldr	r0, [pc, #92]	@ (8000f50 <HAL_TIM_MspPostInit+0x19c>)
 8000ef2:	f001 f993 	bl	800221c <HAL_GPIO_Init>
}
 8000ef6:	e020      	b.n	8000f3a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM16)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a15      	ldr	r2, [pc, #84]	@ (8000f54 <HAL_TIM_MspPostInit+0x1a0>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d11b      	bne.n	8000f3a <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f02:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <HAL_TIM_MspPostInit+0x194>)
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	4a10      	ldr	r2, [pc, #64]	@ (8000f48 <HAL_TIM_MspPostInit+0x194>)
 8000f08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f0c:	6153      	str	r3, [r2, #20]
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <HAL_TIM_MspPostInit+0x194>)
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f1a:	2340      	movs	r3, #64	@ 0x40
 8000f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	4619      	mov	r1, r3
 8000f34:	4806      	ldr	r0, [pc, #24]	@ (8000f50 <HAL_TIM_MspPostInit+0x19c>)
 8000f36:	f001 f971 	bl	800221c <HAL_GPIO_Init>
}
 8000f3a:	bf00      	nop
 8000f3c:	3730      	adds	r7, #48	@ 0x30
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40012c00 	.word	0x40012c00
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	40000400 	.word	0x40000400
 8000f50:	48000400 	.word	0x48000400
 8000f54:	40014400 	.word	0x40014400

08000f58 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	@ 0x28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a17      	ldr	r2, [pc, #92]	@ (8000fd4 <HAL_UART_MspInit+0x7c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d128      	bne.n	8000fcc <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f7a:	4b17      	ldr	r3, [pc, #92]	@ (8000fd8 <HAL_UART_MspInit+0x80>)
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	4a16      	ldr	r2, [pc, #88]	@ (8000fd8 <HAL_UART_MspInit+0x80>)
 8000f80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f84:	61d3      	str	r3, [r2, #28]
 8000f86:	4b14      	ldr	r3, [pc, #80]	@ (8000fd8 <HAL_UART_MspInit+0x80>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	4b11      	ldr	r3, [pc, #68]	@ (8000fd8 <HAL_UART_MspInit+0x80>)
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	4a10      	ldr	r2, [pc, #64]	@ (8000fd8 <HAL_UART_MspInit+0x80>)
 8000f98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f9c:	6153      	str	r3, [r2, #20]
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd8 <HAL_UART_MspInit+0x80>)
 8000fa0:	695b      	ldr	r3, [r3, #20]
 8000fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000faa:	230c      	movs	r3, #12
 8000fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fba:	2307      	movs	r3, #7
 8000fbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fc8:	f001 f928 	bl	800221c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000fcc:	bf00      	nop
 8000fce:	3728      	adds	r7, #40	@ 0x28
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40004400 	.word	0x40004400
 8000fd8:	40021000 	.word	0x40021000

08000fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <NMI_Handler+0x4>

08000fe4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <HardFault_Handler+0x4>

08000fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <MemManage_Handler+0x4>

08000ff4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <BusFault_Handler+0x4>

08000ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <UsageFault_Handler+0x4>

08001004 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001032:	f000 f917 	bl	8001264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001040:	4802      	ldr	r0, [pc, #8]	@ (800104c <CAN_RX0_IRQHandler+0x10>)
 8001042:	f000 fda9 	bl	8001b98 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000084 	.word	0x20000084

08001050 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	e00a      	b.n	8001078 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001062:	f3af 8000 	nop.w
 8001066:	4601      	mov	r1, r0
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	1c5a      	adds	r2, r3, #1
 800106c:	60ba      	str	r2, [r7, #8]
 800106e:	b2ca      	uxtb	r2, r1
 8001070:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	3301      	adds	r3, #1
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	429a      	cmp	r2, r3
 800107e:	dbf0      	blt.n	8001062 <_read+0x12>
  }

  return len;
 8001080:	687b      	ldr	r3, [r7, #4]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <_close>:
  }
  return len;
}

int _close(int file)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001096:	4618      	mov	r0, r3
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010b2:	605a      	str	r2, [r3, #4]
  return 0;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <_isatty>:

int _isatty(int file)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010ca:	2301      	movs	r3, #1
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010fc:	4a14      	ldr	r2, [pc, #80]	@ (8001150 <_sbrk+0x5c>)
 80010fe:	4b15      	ldr	r3, [pc, #84]	@ (8001154 <_sbrk+0x60>)
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001108:	4b13      	ldr	r3, [pc, #76]	@ (8001158 <_sbrk+0x64>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d102      	bne.n	8001116 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001110:	4b11      	ldr	r3, [pc, #68]	@ (8001158 <_sbrk+0x64>)
 8001112:	4a12      	ldr	r2, [pc, #72]	@ (800115c <_sbrk+0x68>)
 8001114:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001116:	4b10      	ldr	r3, [pc, #64]	@ (8001158 <_sbrk+0x64>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	429a      	cmp	r2, r3
 8001122:	d207      	bcs.n	8001134 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001124:	f004 fdb4 	bl	8005c90 <__errno>
 8001128:	4603      	mov	r3, r0
 800112a:	220c      	movs	r2, #12
 800112c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800112e:	f04f 33ff 	mov.w	r3, #4294967295
 8001132:	e009      	b.n	8001148 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001134:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <_sbrk+0x64>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800113a:	4b07      	ldr	r3, [pc, #28]	@ (8001158 <_sbrk+0x64>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	4a05      	ldr	r2, [pc, #20]	@ (8001158 <_sbrk+0x64>)
 8001144:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001146:	68fb      	ldr	r3, [r7, #12]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20003000 	.word	0x20003000
 8001154:	00000400 	.word	0x00000400
 8001158:	20000274 	.word	0x20000274
 800115c:	200003c8 	.word	0x200003c8

08001160 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001164:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <SystemInit+0x20>)
 8001166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800116a:	4a05      	ldr	r2, [pc, #20]	@ (8001180 <SystemInit+0x20>)
 800116c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001170:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001184:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011bc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001188:	f7ff ffea 	bl	8001160 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800118c:	480c      	ldr	r0, [pc, #48]	@ (80011c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800118e:	490d      	ldr	r1, [pc, #52]	@ (80011c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001190:	4a0d      	ldr	r2, [pc, #52]	@ (80011c8 <LoopForever+0xe>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001194:	e002      	b.n	800119c <LoopCopyDataInit>

08001196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119a:	3304      	adds	r3, #4

0800119c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800119c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a0:	d3f9      	bcc.n	8001196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a2:	4a0a      	ldr	r2, [pc, #40]	@ (80011cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80011a4:	4c0a      	ldr	r4, [pc, #40]	@ (80011d0 <LoopForever+0x16>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a8:	e001      	b.n	80011ae <LoopFillZerobss>

080011aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ac:	3204      	adds	r2, #4

080011ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b0:	d3fb      	bcc.n	80011aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011b2:	f004 fd73 	bl	8005c9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011b6:	f7ff f8eb 	bl	8000390 <main>

080011ba <LoopForever>:

LoopForever:
    b LoopForever
 80011ba:	e7fe      	b.n	80011ba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011bc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80011c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80011c8:	080067b0 	.word	0x080067b0
  ldr r2, =_sbss
 80011cc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80011d0:	200003c8 	.word	0x200003c8

080011d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011d4:	e7fe      	b.n	80011d4 <ADC1_2_IRQHandler>
	...

080011d8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011dc:	4b08      	ldr	r3, [pc, #32]	@ (8001200 <HAL_Init+0x28>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a07      	ldr	r2, [pc, #28]	@ (8001200 <HAL_Init+0x28>)
 80011e2:	f043 0310 	orr.w	r3, r3, #16
 80011e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e8:	2003      	movs	r0, #3
 80011ea:	f000 ffd5 	bl	8002198 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ee:	2000      	movs	r0, #0
 80011f0:	f000 f808 	bl	8001204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f4:	f7ff fd14 	bl	8000c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40022000 	.word	0x40022000

08001204 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800120c:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <HAL_InitTick+0x54>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b12      	ldr	r3, [pc, #72]	@ (800125c <HAL_InitTick+0x58>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4619      	mov	r1, r3
 8001216:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800121a:	fbb3 f3f1 	udiv	r3, r3, r1
 800121e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001222:	4618      	mov	r0, r3
 8001224:	f000 ffed 	bl	8002202 <HAL_SYSTICK_Config>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e00e      	b.n	8001250 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b0f      	cmp	r3, #15
 8001236:	d80a      	bhi.n	800124e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001238:	2200      	movs	r2, #0
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f000 ffb5 	bl	80021ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001244:	4a06      	ldr	r2, [pc, #24]	@ (8001260 <HAL_InitTick+0x5c>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	e000      	b.n	8001250 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000000 	.word	0x20000000
 800125c:	20000008 	.word	0x20000008
 8001260:	20000004 	.word	0x20000004

08001264 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001268:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <HAL_IncTick+0x20>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <HAL_IncTick+0x24>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4413      	add	r3, r2
 8001274:	4a04      	ldr	r2, [pc, #16]	@ (8001288 <HAL_IncTick+0x24>)
 8001276:	6013      	str	r3, [r2, #0]
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20000008 	.word	0x20000008
 8001288:	20000278 	.word	0x20000278

0800128c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001290:	4b03      	ldr	r3, [pc, #12]	@ (80012a0 <HAL_GetTick+0x14>)
 8001292:	681b      	ldr	r3, [r3, #0]
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	20000278 	.word	0x20000278

080012a4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012ac:	f7ff ffee 	bl	800128c <HAL_GetTick>
 80012b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012bc:	d005      	beq.n	80012ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012be:	4b0a      	ldr	r3, [pc, #40]	@ (80012e8 <HAL_Delay+0x44>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4413      	add	r3, r2
 80012c8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80012ca:	bf00      	nop
 80012cc:	f7ff ffde 	bl	800128c <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d8f7      	bhi.n	80012cc <HAL_Delay+0x28>
  {
  }
}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000008 	.word	0x20000008

080012ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e0ed      	b.n	80014da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d102      	bne.n	8001310 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff fcac 	bl	8000c68 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f042 0201 	orr.w	r2, r2, #1
 800131e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001320:	f7ff ffb4 	bl	800128c <HAL_GetTick>
 8001324:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001326:	e012      	b.n	800134e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001328:	f7ff ffb0 	bl	800128c <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b0a      	cmp	r3, #10
 8001334:	d90b      	bls.n	800134e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800133a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2205      	movs	r2, #5
 8001346:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e0c5      	b.n	80014da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 0301 	and.w	r3, r3, #1
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0e5      	beq.n	8001328 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 0202 	bic.w	r2, r2, #2
 800136a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800136c:	f7ff ff8e 	bl	800128c <HAL_GetTick>
 8001370:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001372:	e012      	b.n	800139a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001374:	f7ff ff8a 	bl	800128c <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b0a      	cmp	r3, #10
 8001380:	d90b      	bls.n	800139a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001386:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2205      	movs	r2, #5
 8001392:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e09f      	b.n	80014da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d1e5      	bne.n	8001374 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	7e1b      	ldrb	r3, [r3, #24]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d108      	bne.n	80013c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	e007      	b.n	80013d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80013d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	7e5b      	ldrb	r3, [r3, #25]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d108      	bne.n	80013ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	e007      	b.n	80013fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80013fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	7e9b      	ldrb	r3, [r3, #26]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d108      	bne.n	8001416 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f042 0220 	orr.w	r2, r2, #32
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	e007      	b.n	8001426 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 0220 	bic.w	r2, r2, #32
 8001424:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	7edb      	ldrb	r3, [r3, #27]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d108      	bne.n	8001440 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 0210 	bic.w	r2, r2, #16
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	e007      	b.n	8001450 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f042 0210 	orr.w	r2, r2, #16
 800144e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	7f1b      	ldrb	r3, [r3, #28]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d108      	bne.n	800146a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 0208 	orr.w	r2, r2, #8
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	e007      	b.n	800147a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0208 	bic.w	r2, r2, #8
 8001478:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	7f5b      	ldrb	r3, [r3, #29]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d108      	bne.n	8001494 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f042 0204 	orr.w	r2, r2, #4
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	e007      	b.n	80014a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 0204 	bic.w	r2, r2, #4
 80014a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	431a      	orrs	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	695b      	ldr	r3, [r3, #20]
 80014b8:	ea42 0103 	orr.w	r1, r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	1e5a      	subs	r2, r3, #1
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	430a      	orrs	r2, r1
 80014c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2201      	movs	r2, #1
 80014d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b087      	sub	sp, #28
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
 80014ea:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014f8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80014fa:	7cfb      	ldrb	r3, [r7, #19]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d003      	beq.n	8001508 <HAL_CAN_ConfigFilter+0x26>
 8001500:	7cfb      	ldrb	r3, [r7, #19]
 8001502:	2b02      	cmp	r3, #2
 8001504:	f040 80aa 	bne.w	800165c <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800150e:	f043 0201 	orr.w	r2, r3, #1
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	f003 031f 	and.w	r3, r3, #31
 8001520:	2201      	movs	r2, #1
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	43db      	mvns	r3, r3
 8001532:	401a      	ands	r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d123      	bne.n	800158a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	43db      	mvns	r3, r3
 800154c:	401a      	ands	r2, r3
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001564:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	3248      	adds	r2, #72	@ 0x48
 800156a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800157e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001580:	6979      	ldr	r1, [r7, #20]
 8001582:	3348      	adds	r3, #72	@ 0x48
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	440b      	add	r3, r1
 8001588:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d122      	bne.n	80015d8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	431a      	orrs	r2, r3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015b2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	3248      	adds	r2, #72	@ 0x48
 80015b8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015cc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015ce:	6979      	ldr	r1, [r7, #20]
 80015d0:	3348      	adds	r3, #72	@ 0x48
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	440b      	add	r3, r1
 80015d6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d109      	bne.n	80015f4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	401a      	ands	r2, r3
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80015f2:	e007      	b.n	8001604 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	431a      	orrs	r2, r3
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d109      	bne.n	8001620 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	43db      	mvns	r3, r3
 8001616:	401a      	ands	r2, r3
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800161e:	e007      	b.n	8001630 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	431a      	orrs	r2, r3
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d107      	bne.n	8001648 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	431a      	orrs	r2, r3
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800164e:	f023 0201 	bic.w	r2, r3, #1
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001658:	2300      	movs	r3, #0
 800165a:	e006      	b.n	800166a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001660:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
  }
}
 800166a:	4618      	mov	r0, r3
 800166c:	371c      	adds	r7, #28
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b084      	sub	sp, #16
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b01      	cmp	r3, #1
 8001688:	d12e      	bne.n	80016e8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2202      	movs	r2, #2
 800168e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f022 0201 	bic.w	r2, r2, #1
 80016a0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80016a2:	f7ff fdf3 	bl	800128c <HAL_GetTick>
 80016a6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016a8:	e012      	b.n	80016d0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016aa:	f7ff fdef 	bl	800128c <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b0a      	cmp	r3, #10
 80016b6:	d90b      	bls.n	80016d0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016bc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2205      	movs	r2, #5
 80016c8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e012      	b.n	80016f6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1e5      	bne.n	80016aa <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80016e4:	2300      	movs	r3, #0
 80016e6:	e006      	b.n	80016f6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ec:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
  }
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80016fe:	b480      	push	{r7}
 8001700:	b089      	sub	sp, #36	@ 0x24
 8001702:	af00      	add	r7, sp, #0
 8001704:	60f8      	str	r0, [r7, #12]
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607a      	str	r2, [r7, #4]
 800170a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001712:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800171c:	7ffb      	ldrb	r3, [r7, #31]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d003      	beq.n	800172a <HAL_CAN_AddTxMessage+0x2c>
 8001722:	7ffb      	ldrb	r3, [r7, #31]
 8001724:	2b02      	cmp	r3, #2
 8001726:	f040 80ad 	bne.w	8001884 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d10a      	bne.n	800174a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800173a:	2b00      	cmp	r3, #0
 800173c:	d105      	bne.n	800174a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 8095 	beq.w	8001874 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	0e1b      	lsrs	r3, r3, #24
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001754:	2201      	movs	r2, #1
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	409a      	lsls	r2, r3
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d10d      	bne.n	8001782 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001770:	68f9      	ldr	r1, [r7, #12]
 8001772:	6809      	ldr	r1, [r1, #0]
 8001774:	431a      	orrs	r2, r3
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	3318      	adds	r3, #24
 800177a:	011b      	lsls	r3, r3, #4
 800177c:	440b      	add	r3, r1
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	e00f      	b.n	80017a2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800178c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001792:	68f9      	ldr	r1, [r7, #12]
 8001794:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001796:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	3318      	adds	r3, #24
 800179c:	011b      	lsls	r3, r3, #4
 800179e:	440b      	add	r3, r1
 80017a0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6819      	ldr	r1, [r3, #0]
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	691a      	ldr	r2, [r3, #16]
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	3318      	adds	r3, #24
 80017ae:	011b      	lsls	r3, r3, #4
 80017b0:	440b      	add	r3, r1
 80017b2:	3304      	adds	r3, #4
 80017b4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	7d1b      	ldrb	r3, [r3, #20]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d111      	bne.n	80017e2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	3318      	adds	r3, #24
 80017c6:	011b      	lsls	r3, r3, #4
 80017c8:	4413      	add	r3, r2
 80017ca:	3304      	adds	r3, #4
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	6811      	ldr	r1, [r2, #0]
 80017d2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	3318      	adds	r3, #24
 80017da:	011b      	lsls	r3, r3, #4
 80017dc:	440b      	add	r3, r1
 80017de:	3304      	adds	r3, #4
 80017e0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	3307      	adds	r3, #7
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	061a      	lsls	r2, r3, #24
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3306      	adds	r3, #6
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	041b      	lsls	r3, r3, #16
 80017f2:	431a      	orrs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3305      	adds	r3, #5
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	021b      	lsls	r3, r3, #8
 80017fc:	4313      	orrs	r3, r2
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	3204      	adds	r2, #4
 8001802:	7812      	ldrb	r2, [r2, #0]
 8001804:	4610      	mov	r0, r2
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	6811      	ldr	r1, [r2, #0]
 800180a:	ea43 0200 	orr.w	r2, r3, r0
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	011b      	lsls	r3, r3, #4
 8001812:	440b      	add	r3, r1
 8001814:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001818:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3303      	adds	r3, #3
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	061a      	lsls	r2, r3, #24
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3302      	adds	r3, #2
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	041b      	lsls	r3, r3, #16
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3301      	adds	r3, #1
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	021b      	lsls	r3, r3, #8
 8001834:	4313      	orrs	r3, r2
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	7812      	ldrb	r2, [r2, #0]
 800183a:	4610      	mov	r0, r2
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	6811      	ldr	r1, [r2, #0]
 8001840:	ea43 0200 	orr.w	r2, r3, r0
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	011b      	lsls	r3, r3, #4
 8001848:	440b      	add	r3, r1
 800184a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800184e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	3318      	adds	r3, #24
 8001858:	011b      	lsls	r3, r3, #4
 800185a:	4413      	add	r3, r2
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	6811      	ldr	r1, [r2, #0]
 8001862:	f043 0201 	orr.w	r2, r3, #1
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	3318      	adds	r3, #24
 800186a:	011b      	lsls	r3, r3, #4
 800186c:	440b      	add	r3, r1
 800186e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001870:	2300      	movs	r3, #0
 8001872:	e00e      	b.n	8001892 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001878:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e006      	b.n	8001892 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001888:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
  }
}
 8001892:	4618      	mov	r0, r3
 8001894:	3724      	adds	r7, #36	@ 0x24
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800189e:	b480      	push	{r7}
 80018a0:	b085      	sub	sp, #20
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018b0:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80018b2:	7afb      	ldrb	r3, [r7, #11]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d002      	beq.n	80018be <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80018b8:	7afb      	ldrb	r3, [r7, #11]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d11d      	bne.n	80018fa <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d002      	beq.n	80018d2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	3301      	adds	r3, #1
 80018d0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d002      	beq.n	80018e6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	3301      	adds	r3, #1
 80018e4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d002      	beq.n	80018fa <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	3301      	adds	r3, #1
 80018f8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80018fa:	68fb      	ldr	r3, [r7, #12]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001908:	b480      	push	{r7}
 800190a:	b087      	sub	sp, #28
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
 8001914:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f893 3020 	ldrb.w	r3, [r3, #32]
 800191c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800191e:	7dfb      	ldrb	r3, [r7, #23]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d003      	beq.n	800192c <HAL_CAN_GetRxMessage+0x24>
 8001924:	7dfb      	ldrb	r3, [r7, #23]
 8001926:	2b02      	cmp	r3, #2
 8001928:	f040 8103 	bne.w	8001b32 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10e      	bne.n	8001950 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	2b00      	cmp	r3, #0
 800193e:	d116      	bne.n	800196e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001944:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e0f7      	b.n	8001b40 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d107      	bne.n	800196e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001962:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e0e8      	b.n	8001b40 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	331b      	adds	r3, #27
 8001976:	011b      	lsls	r3, r3, #4
 8001978:	4413      	add	r3, r2
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0204 	and.w	r2, r3, #4
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d10c      	bne.n	80019a6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	331b      	adds	r3, #27
 8001994:	011b      	lsls	r3, r3, #4
 8001996:	4413      	add	r3, r2
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	0d5b      	lsrs	r3, r3, #21
 800199c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	e00b      	b.n	80019be <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	331b      	adds	r3, #27
 80019ae:	011b      	lsls	r3, r3, #4
 80019b0:	4413      	add	r3, r2
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	08db      	lsrs	r3, r3, #3
 80019b6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	331b      	adds	r3, #27
 80019c6:	011b      	lsls	r3, r3, #4
 80019c8:	4413      	add	r3, r2
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0202 	and.w	r2, r3, #2
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	331b      	adds	r3, #27
 80019dc:	011b      	lsls	r3, r3, #4
 80019de:	4413      	add	r3, r2
 80019e0:	3304      	adds	r3, #4
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0308 	and.w	r3, r3, #8
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2208      	movs	r2, #8
 80019f0:	611a      	str	r2, [r3, #16]
 80019f2:	e00b      	b.n	8001a0c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	331b      	adds	r3, #27
 80019fc:	011b      	lsls	r3, r3, #4
 80019fe:	4413      	add	r3, r2
 8001a00:	3304      	adds	r3, #4
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 020f 	and.w	r2, r3, #15
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	331b      	adds	r3, #27
 8001a14:	011b      	lsls	r3, r3, #4
 8001a16:	4413      	add	r3, r2
 8001a18:	3304      	adds	r3, #4
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	0a1b      	lsrs	r3, r3, #8
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	331b      	adds	r3, #27
 8001a2c:	011b      	lsls	r3, r3, #4
 8001a2e:	4413      	add	r3, r2
 8001a30:	3304      	adds	r3, #4
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	0c1b      	lsrs	r3, r3, #16
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	011b      	lsls	r3, r3, #4
 8001a44:	4413      	add	r3, r2
 8001a46:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	011b      	lsls	r3, r3, #4
 8001a5a:	4413      	add	r3, r2
 8001a5c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	0a1a      	lsrs	r2, r3, #8
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	3301      	adds	r3, #1
 8001a68:	b2d2      	uxtb	r2, r2
 8001a6a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	011b      	lsls	r3, r3, #4
 8001a74:	4413      	add	r3, r2
 8001a76:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	0c1a      	lsrs	r2, r3, #16
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	3302      	adds	r3, #2
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	011b      	lsls	r3, r3, #4
 8001a8e:	4413      	add	r3, r2
 8001a90:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	0e1a      	lsrs	r2, r3, #24
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	3303      	adds	r3, #3
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	011b      	lsls	r3, r3, #4
 8001aa8:	4413      	add	r3, r2
 8001aaa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	3304      	adds	r3, #4
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	011b      	lsls	r3, r3, #4
 8001ac0:	4413      	add	r3, r2
 8001ac2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	0a1a      	lsrs	r2, r3, #8
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	3305      	adds	r3, #5
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	011b      	lsls	r3, r3, #4
 8001ada:	4413      	add	r3, r2
 8001adc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	0c1a      	lsrs	r2, r3, #16
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	3306      	adds	r3, #6
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	011b      	lsls	r3, r3, #4
 8001af4:	4413      	add	r3, r2
 8001af6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	0e1a      	lsrs	r2, r3, #24
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	3307      	adds	r3, #7
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d108      	bne.n	8001b1e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68da      	ldr	r2, [r3, #12]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 0220 	orr.w	r2, r2, #32
 8001b1a:	60da      	str	r2, [r3, #12]
 8001b1c:	e007      	b.n	8001b2e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	691a      	ldr	r2, [r3, #16]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f042 0220 	orr.w	r2, r2, #32
 8001b2c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	e006      	b.n	8001b40 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b36:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
  }
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	371c      	adds	r7, #28
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b5c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d002      	beq.n	8001b6a <HAL_CAN_ActivateNotification+0x1e>
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d109      	bne.n	8001b7e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6959      	ldr	r1, [r3, #20]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	e006      	b.n	8001b8c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b82:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
  }
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	@ 0x28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001bd4:	6a3b      	ldr	r3, [r7, #32]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d07c      	beq.n	8001cd8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d023      	beq.n	8001c30 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2201      	movs	r2, #1
 8001bee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f983 	bl	8001f06 <HAL_CAN_TxMailbox0CompleteCallback>
 8001c00:	e016      	b.n	8001c30 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d004      	beq.n	8001c16 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c12:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c14:	e00c      	b.n	8001c30 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	f003 0308 	and.w	r3, r3, #8
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d004      	beq.n	8001c2a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c22:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c26:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c28:	e002      	b.n	8001c30 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f989 	bl	8001f42 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d024      	beq.n	8001c84 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c42:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f963 	bl	8001f1a <HAL_CAN_TxMailbox1CompleteCallback>
 8001c54:	e016      	b.n	8001c84 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d004      	beq.n	8001c6a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c62:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c66:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c68:	e00c      	b.n	8001c84 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d004      	beq.n	8001c7e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c7c:	e002      	b.n	8001c84 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f969 	bl	8001f56 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d024      	beq.n	8001cd8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001c96:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 f943 	bl	8001f2e <HAL_CAN_TxMailbox2CompleteCallback>
 8001ca8:	e016      	b.n	8001cd8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d004      	beq.n	8001cbe <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cba:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cbc:	e00c      	b.n	8001cd8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d004      	beq.n	8001cd2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cce:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cd0:	e002      	b.n	8001cd8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f949 	bl	8001f6a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001cd8:	6a3b      	ldr	r3, [r7, #32]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00c      	beq.n	8001cfc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f003 0310 	and.w	r3, r3, #16
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d007      	beq.n	8001cfc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cf2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2210      	movs	r2, #16
 8001cfa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001cfc:	6a3b      	ldr	r3, [r7, #32]
 8001cfe:	f003 0304 	and.w	r3, r3, #4
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00b      	beq.n	8001d1e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	f003 0308 	and.w	r3, r3, #8
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d006      	beq.n	8001d1e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2208      	movs	r2, #8
 8001d16:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 f930 	bl	8001f7e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001d1e:	6a3b      	ldr	r3, [r7, #32]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d009      	beq.n	8001d3c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d002      	beq.n	8001d3c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7fe fae4 	bl	8000304 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001d3c:	6a3b      	ldr	r3, [r7, #32]
 8001d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00c      	beq.n	8001d60 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	f003 0310 	and.w	r3, r3, #16
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d007      	beq.n	8001d60 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d56:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2210      	movs	r2, #16
 8001d5e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001d60:	6a3b      	ldr	r3, [r7, #32]
 8001d62:	f003 0320 	and.w	r3, r3, #32
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00b      	beq.n	8001d82 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d006      	beq.n	8001d82 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2208      	movs	r2, #8
 8001d7a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f912 	bl	8001fa6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001d82:	6a3b      	ldr	r3, [r7, #32]
 8001d84:	f003 0310 	and.w	r3, r3, #16
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d009      	beq.n	8001da0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d002      	beq.n	8001da0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f8f9 	bl	8001f92 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001da0:	6a3b      	ldr	r3, [r7, #32]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00b      	beq.n	8001dc2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	f003 0310 	and.w	r3, r3, #16
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d006      	beq.n	8001dc2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2210      	movs	r2, #16
 8001dba:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f8fc 	bl	8001fba <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001dc2:	6a3b      	ldr	r3, [r7, #32]
 8001dc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00b      	beq.n	8001de4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f003 0308 	and.w	r3, r3, #8
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d006      	beq.n	8001de4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2208      	movs	r2, #8
 8001ddc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f8f5 	bl	8001fce <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001de4:	6a3b      	ldr	r3, [r7, #32]
 8001de6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d07b      	beq.n	8001ee6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d072      	beq.n	8001ede <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001df8:	6a3b      	ldr	r3, [r7, #32]
 8001dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d008      	beq.n	8001e14 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e14:	6a3b      	ldr	r3, [r7, #32]
 8001e16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d008      	beq.n	8001e30 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2a:	f043 0302 	orr.w	r3, r3, #2
 8001e2e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e30:	6a3b      	ldr	r3, [r7, #32]
 8001e32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d008      	beq.n	8001e4c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e46:	f043 0304 	orr.w	r3, r3, #4
 8001e4a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e4c:	6a3b      	ldr	r3, [r7, #32]
 8001e4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d043      	beq.n	8001ede <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d03e      	beq.n	8001ede <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e66:	2b60      	cmp	r3, #96	@ 0x60
 8001e68:	d02b      	beq.n	8001ec2 <HAL_CAN_IRQHandler+0x32a>
 8001e6a:	2b60      	cmp	r3, #96	@ 0x60
 8001e6c:	d82e      	bhi.n	8001ecc <HAL_CAN_IRQHandler+0x334>
 8001e6e:	2b50      	cmp	r3, #80	@ 0x50
 8001e70:	d022      	beq.n	8001eb8 <HAL_CAN_IRQHandler+0x320>
 8001e72:	2b50      	cmp	r3, #80	@ 0x50
 8001e74:	d82a      	bhi.n	8001ecc <HAL_CAN_IRQHandler+0x334>
 8001e76:	2b40      	cmp	r3, #64	@ 0x40
 8001e78:	d019      	beq.n	8001eae <HAL_CAN_IRQHandler+0x316>
 8001e7a:	2b40      	cmp	r3, #64	@ 0x40
 8001e7c:	d826      	bhi.n	8001ecc <HAL_CAN_IRQHandler+0x334>
 8001e7e:	2b30      	cmp	r3, #48	@ 0x30
 8001e80:	d010      	beq.n	8001ea4 <HAL_CAN_IRQHandler+0x30c>
 8001e82:	2b30      	cmp	r3, #48	@ 0x30
 8001e84:	d822      	bhi.n	8001ecc <HAL_CAN_IRQHandler+0x334>
 8001e86:	2b10      	cmp	r3, #16
 8001e88:	d002      	beq.n	8001e90 <HAL_CAN_IRQHandler+0x2f8>
 8001e8a:	2b20      	cmp	r3, #32
 8001e8c:	d005      	beq.n	8001e9a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001e8e:	e01d      	b.n	8001ecc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e92:	f043 0308 	orr.w	r3, r3, #8
 8001e96:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e98:	e019      	b.n	8001ece <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9c:	f043 0310 	orr.w	r3, r3, #16
 8001ea0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ea2:	e014      	b.n	8001ece <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea6:	f043 0320 	orr.w	r3, r3, #32
 8001eaa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001eac:	e00f      	b.n	8001ece <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001eb4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001eb6:	e00a      	b.n	8001ece <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ebe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ec0:	e005      	b.n	8001ece <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ec8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001eca:	e000      	b.n	8001ece <HAL_CAN_IRQHandler+0x336>
            break;
 8001ecc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	699a      	ldr	r2, [r3, #24]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001edc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2204      	movs	r2, #4
 8001ee4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d008      	beq.n	8001efe <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 f872 	bl	8001fe2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001efe:	bf00      	nop
 8001f00:	3728      	adds	r7, #40	@ 0x28
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
	...

08001ff8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002008:	4b0c      	ldr	r3, [pc, #48]	@ (800203c <__NVIC_SetPriorityGrouping+0x44>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800200e:	68ba      	ldr	r2, [r7, #8]
 8002010:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002014:	4013      	ands	r3, r2
 8002016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002020:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002024:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800202a:	4a04      	ldr	r2, [pc, #16]	@ (800203c <__NVIC_SetPriorityGrouping+0x44>)
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	60d3      	str	r3, [r2, #12]
}
 8002030:	bf00      	nop
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002044:	4b04      	ldr	r3, [pc, #16]	@ (8002058 <__NVIC_GetPriorityGrouping+0x18>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	0a1b      	lsrs	r3, r3, #8
 800204a:	f003 0307 	and.w	r3, r3, #7
}
 800204e:	4618      	mov	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206a:	2b00      	cmp	r3, #0
 800206c:	db0b      	blt.n	8002086 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	f003 021f 	and.w	r2, r3, #31
 8002074:	4907      	ldr	r1, [pc, #28]	@ (8002094 <__NVIC_EnableIRQ+0x38>)
 8002076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207a:	095b      	lsrs	r3, r3, #5
 800207c:	2001      	movs	r0, #1
 800207e:	fa00 f202 	lsl.w	r2, r0, r2
 8002082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	e000e100 	.word	0xe000e100

08002098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	6039      	str	r1, [r7, #0]
 80020a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	db0a      	blt.n	80020c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	490c      	ldr	r1, [pc, #48]	@ (80020e4 <__NVIC_SetPriority+0x4c>)
 80020b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b6:	0112      	lsls	r2, r2, #4
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	440b      	add	r3, r1
 80020bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020c0:	e00a      	b.n	80020d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	4908      	ldr	r1, [pc, #32]	@ (80020e8 <__NVIC_SetPriority+0x50>)
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	3b04      	subs	r3, #4
 80020d0:	0112      	lsls	r2, r2, #4
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	440b      	add	r3, r1
 80020d6:	761a      	strb	r2, [r3, #24]
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	e000e100 	.word	0xe000e100
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b089      	sub	sp, #36	@ 0x24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f1c3 0307 	rsb	r3, r3, #7
 8002106:	2b04      	cmp	r3, #4
 8002108:	bf28      	it	cs
 800210a:	2304      	movcs	r3, #4
 800210c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3304      	adds	r3, #4
 8002112:	2b06      	cmp	r3, #6
 8002114:	d902      	bls.n	800211c <NVIC_EncodePriority+0x30>
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3b03      	subs	r3, #3
 800211a:	e000      	b.n	800211e <NVIC_EncodePriority+0x32>
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002120:	f04f 32ff 	mov.w	r2, #4294967295
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43da      	mvns	r2, r3
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	401a      	ands	r2, r3
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002134:	f04f 31ff 	mov.w	r1, #4294967295
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	fa01 f303 	lsl.w	r3, r1, r3
 800213e:	43d9      	mvns	r1, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002144:	4313      	orrs	r3, r2
         );
}
 8002146:	4618      	mov	r0, r3
 8002148:	3724      	adds	r7, #36	@ 0x24
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
	...

08002154 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3b01      	subs	r3, #1
 8002160:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002164:	d301      	bcc.n	800216a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002166:	2301      	movs	r3, #1
 8002168:	e00f      	b.n	800218a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800216a:	4a0a      	ldr	r2, [pc, #40]	@ (8002194 <SysTick_Config+0x40>)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3b01      	subs	r3, #1
 8002170:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002172:	210f      	movs	r1, #15
 8002174:	f04f 30ff 	mov.w	r0, #4294967295
 8002178:	f7ff ff8e 	bl	8002098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800217c:	4b05      	ldr	r3, [pc, #20]	@ (8002194 <SysTick_Config+0x40>)
 800217e:	2200      	movs	r2, #0
 8002180:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002182:	4b04      	ldr	r3, [pc, #16]	@ (8002194 <SysTick_Config+0x40>)
 8002184:	2207      	movs	r2, #7
 8002186:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	e000e010 	.word	0xe000e010

08002198 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f7ff ff29 	bl	8001ff8 <__NVIC_SetPriorityGrouping>
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b086      	sub	sp, #24
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	4603      	mov	r3, r0
 80021b6:	60b9      	str	r1, [r7, #8]
 80021b8:	607a      	str	r2, [r7, #4]
 80021ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021c0:	f7ff ff3e 	bl	8002040 <__NVIC_GetPriorityGrouping>
 80021c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	68b9      	ldr	r1, [r7, #8]
 80021ca:	6978      	ldr	r0, [r7, #20]
 80021cc:	f7ff ff8e 	bl	80020ec <NVIC_EncodePriority>
 80021d0:	4602      	mov	r2, r0
 80021d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021d6:	4611      	mov	r1, r2
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff ff5d 	bl	8002098 <__NVIC_SetPriority>
}
 80021de:	bf00      	nop
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	4603      	mov	r3, r0
 80021ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ff31 	bl	800205c <__NVIC_EnableIRQ>
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7ff ffa2 	bl	8002154 <SysTick_Config>
 8002210:	4603      	mov	r3, r0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800221c:	b480      	push	{r7}
 800221e:	b087      	sub	sp, #28
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800222a:	e14e      	b.n	80024ca <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	2101      	movs	r1, #1
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	fa01 f303 	lsl.w	r3, r1, r3
 8002238:	4013      	ands	r3, r2
 800223a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 8140 	beq.w	80024c4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 0303 	and.w	r3, r3, #3
 800224c:	2b01      	cmp	r3, #1
 800224e:	d005      	beq.n	800225c <HAL_GPIO_Init+0x40>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 0303 	and.w	r3, r3, #3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d130      	bne.n	80022be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	2203      	movs	r2, #3
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	4013      	ands	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4313      	orrs	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002292:	2201      	movs	r2, #1
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43db      	mvns	r3, r3
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4013      	ands	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	091b      	lsrs	r3, r3, #4
 80022a8:	f003 0201 	and.w	r2, r3, #1
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	2b03      	cmp	r3, #3
 80022c8:	d017      	beq.n	80022fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	2203      	movs	r2, #3
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43db      	mvns	r3, r3
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	4013      	ands	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d123      	bne.n	800234e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	08da      	lsrs	r2, r3, #3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3208      	adds	r2, #8
 800230e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002312:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	220f      	movs	r2, #15
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	4013      	ands	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	691a      	ldr	r2, [r3, #16]
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	08da      	lsrs	r2, r3, #3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3208      	adds	r2, #8
 8002348:	6939      	ldr	r1, [r7, #16]
 800234a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	2203      	movs	r2, #3
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43db      	mvns	r3, r3
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	4013      	ands	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f003 0203 	and.w	r2, r3, #3
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800238a:	2b00      	cmp	r3, #0
 800238c:	f000 809a 	beq.w	80024c4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002390:	4b55      	ldr	r3, [pc, #340]	@ (80024e8 <HAL_GPIO_Init+0x2cc>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	4a54      	ldr	r2, [pc, #336]	@ (80024e8 <HAL_GPIO_Init+0x2cc>)
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	6193      	str	r3, [r2, #24]
 800239c:	4b52      	ldr	r3, [pc, #328]	@ (80024e8 <HAL_GPIO_Init+0x2cc>)
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023a8:	4a50      	ldr	r2, [pc, #320]	@ (80024ec <HAL_GPIO_Init+0x2d0>)
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	089b      	lsrs	r3, r3, #2
 80023ae:	3302      	adds	r3, #2
 80023b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	f003 0303 	and.w	r3, r3, #3
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	220f      	movs	r2, #15
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	43db      	mvns	r3, r3
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4013      	ands	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023d2:	d013      	beq.n	80023fc <HAL_GPIO_Init+0x1e0>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a46      	ldr	r2, [pc, #280]	@ (80024f0 <HAL_GPIO_Init+0x2d4>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d00d      	beq.n	80023f8 <HAL_GPIO_Init+0x1dc>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a45      	ldr	r2, [pc, #276]	@ (80024f4 <HAL_GPIO_Init+0x2d8>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d007      	beq.n	80023f4 <HAL_GPIO_Init+0x1d8>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a44      	ldr	r2, [pc, #272]	@ (80024f8 <HAL_GPIO_Init+0x2dc>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d101      	bne.n	80023f0 <HAL_GPIO_Init+0x1d4>
 80023ec:	2303      	movs	r3, #3
 80023ee:	e006      	b.n	80023fe <HAL_GPIO_Init+0x1e2>
 80023f0:	2305      	movs	r3, #5
 80023f2:	e004      	b.n	80023fe <HAL_GPIO_Init+0x1e2>
 80023f4:	2302      	movs	r3, #2
 80023f6:	e002      	b.n	80023fe <HAL_GPIO_Init+0x1e2>
 80023f8:	2301      	movs	r3, #1
 80023fa:	e000      	b.n	80023fe <HAL_GPIO_Init+0x1e2>
 80023fc:	2300      	movs	r3, #0
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	f002 0203 	and.w	r2, r2, #3
 8002404:	0092      	lsls	r2, r2, #2
 8002406:	4093      	lsls	r3, r2
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	4313      	orrs	r3, r2
 800240c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800240e:	4937      	ldr	r1, [pc, #220]	@ (80024ec <HAL_GPIO_Init+0x2d0>)
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	089b      	lsrs	r3, r3, #2
 8002414:	3302      	adds	r3, #2
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800241c:	4b37      	ldr	r3, [pc, #220]	@ (80024fc <HAL_GPIO_Init+0x2e0>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	43db      	mvns	r3, r3
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	4013      	ands	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	4313      	orrs	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002440:	4a2e      	ldr	r2, [pc, #184]	@ (80024fc <HAL_GPIO_Init+0x2e0>)
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002446:	4b2d      	ldr	r3, [pc, #180]	@ (80024fc <HAL_GPIO_Init+0x2e0>)
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	43db      	mvns	r3, r3
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4013      	ands	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4313      	orrs	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800246a:	4a24      	ldr	r2, [pc, #144]	@ (80024fc <HAL_GPIO_Init+0x2e0>)
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002470:	4b22      	ldr	r3, [pc, #136]	@ (80024fc <HAL_GPIO_Init+0x2e0>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	43db      	mvns	r3, r3
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	4013      	ands	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	4313      	orrs	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002494:	4a19      	ldr	r2, [pc, #100]	@ (80024fc <HAL_GPIO_Init+0x2e0>)
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800249a:	4b18      	ldr	r3, [pc, #96]	@ (80024fc <HAL_GPIO_Init+0x2e0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	43db      	mvns	r3, r3
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	4013      	ands	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024be:	4a0f      	ldr	r2, [pc, #60]	@ (80024fc <HAL_GPIO_Init+0x2e0>)
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	3301      	adds	r3, #1
 80024c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	fa22 f303 	lsr.w	r3, r2, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f47f aea9 	bne.w	800222c <HAL_GPIO_Init+0x10>
  }
}
 80024da:	bf00      	nop
 80024dc:	bf00      	nop
 80024de:	371c      	adds	r7, #28
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	40021000 	.word	0x40021000
 80024ec:	40010000 	.word	0x40010000
 80024f0:	48000400 	.word	0x48000400
 80024f4:	48000800 	.word	0x48000800
 80024f8:	48000c00 	.word	0x48000c00
 80024fc:	40010400 	.word	0x40010400

08002500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	460b      	mov	r3, r1
 800250a:	807b      	strh	r3, [r7, #2]
 800250c:	4613      	mov	r3, r2
 800250e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002510:	787b      	ldrb	r3, [r7, #1]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002516:	887a      	ldrh	r2, [r7, #2]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800251c:	e002      	b.n	8002524 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800251e:	887a      	ldrh	r2, [r7, #2]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002536:	af00      	add	r7, sp, #0
 8002538:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800253c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002540:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002542:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002546:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d102      	bne.n	8002556 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	f000 bff4 	b.w	800353e <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002556:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800255a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 816d 	beq.w	8002846 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800256c:	4bb4      	ldr	r3, [pc, #720]	@ (8002840 <HAL_RCC_OscConfig+0x310>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 030c 	and.w	r3, r3, #12
 8002574:	2b04      	cmp	r3, #4
 8002576:	d00c      	beq.n	8002592 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002578:	4bb1      	ldr	r3, [pc, #708]	@ (8002840 <HAL_RCC_OscConfig+0x310>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 030c 	and.w	r3, r3, #12
 8002580:	2b08      	cmp	r3, #8
 8002582:	d157      	bne.n	8002634 <HAL_RCC_OscConfig+0x104>
 8002584:	4bae      	ldr	r3, [pc, #696]	@ (8002840 <HAL_RCC_OscConfig+0x310>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800258c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002590:	d150      	bne.n	8002634 <HAL_RCC_OscConfig+0x104>
 8002592:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002596:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800259e:	fa93 f3a3 	rbit	r3, r3
 80025a2:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025a6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025aa:	fab3 f383 	clz	r3, r3
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80025b2:	d802      	bhi.n	80025ba <HAL_RCC_OscConfig+0x8a>
 80025b4:	4ba2      	ldr	r3, [pc, #648]	@ (8002840 <HAL_RCC_OscConfig+0x310>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	e015      	b.n	80025e6 <HAL_RCC_OscConfig+0xb6>
 80025ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025be:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80025c6:	fa93 f3a3 	rbit	r3, r3
 80025ca:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80025ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025d2:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80025d6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80025da:	fa93 f3a3 	rbit	r3, r3
 80025de:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80025e2:	4b97      	ldr	r3, [pc, #604]	@ (8002840 <HAL_RCC_OscConfig+0x310>)
 80025e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80025ea:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80025ee:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80025f2:	fa92 f2a2 	rbit	r2, r2
 80025f6:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80025fa:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80025fe:	fab2 f282 	clz	r2, r2
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	f042 0220 	orr.w	r2, r2, #32
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	f002 021f 	and.w	r2, r2, #31
 800260e:	2101      	movs	r1, #1
 8002610:	fa01 f202 	lsl.w	r2, r1, r2
 8002614:	4013      	ands	r3, r2
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 8114 	beq.w	8002844 <HAL_RCC_OscConfig+0x314>
 800261c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002620:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	f040 810b 	bne.w	8002844 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	f000 bf85 	b.w	800353e <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002634:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002638:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002644:	d106      	bne.n	8002654 <HAL_RCC_OscConfig+0x124>
 8002646:	4b7e      	ldr	r3, [pc, #504]	@ (8002840 <HAL_RCC_OscConfig+0x310>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a7d      	ldr	r2, [pc, #500]	@ (8002840 <HAL_RCC_OscConfig+0x310>)
 800264c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002650:	6013      	str	r3, [r2, #0]
 8002652:	e036      	b.n	80026c2 <HAL_RCC_OscConfig+0x192>
 8002654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002658:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10c      	bne.n	800267e <HAL_RCC_OscConfig+0x14e>
 8002664:	4b76      	ldr	r3, [pc, #472]	@ (8002840 <HAL_RCC_OscConfig+0x310>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a75      	ldr	r2, [pc, #468]	@ (8002840 <HAL_RCC_OscConfig+0x310>)
 800266a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	4b73      	ldr	r3, [pc, #460]	@ (8002840 <HAL_RCC_OscConfig+0x310>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a72      	ldr	r2, [pc, #456]	@ (8002840 <HAL_RCC_OscConfig+0x310>)
 8002676:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800267a:	6013      	str	r3, [r2, #0]
 800267c:	e021      	b.n	80026c2 <HAL_RCC_OscConfig+0x192>
 800267e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002682:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800268e:	d10c      	bne.n	80026aa <HAL_RCC_OscConfig+0x17a>
 8002690:	4b6b      	ldr	r3, [pc, #428]	@ (8002840 <HAL_RCC_OscConfig+0x310>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a6a      	ldr	r2, [pc, #424]	@ (8002840 <HAL_RCC_OscConfig+0x310>)
 8002696:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	4b68      	ldr	r3, [pc, #416]	@ (8002840 <HAL_RCC_OscConfig+0x310>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a67      	ldr	r2, [pc, #412]	@ (8002840 <HAL_RCC_OscConfig+0x310>)
 80026a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026a6:	6013      	str	r3, [r2, #0]
 80026a8:	e00b      	b.n	80026c2 <HAL_RCC_OscConfig+0x192>
 80026aa:	4b65      	ldr	r3, [pc, #404]	@ (8002840 <HAL_RCC_OscConfig+0x310>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a64      	ldr	r2, [pc, #400]	@ (8002840 <HAL_RCC_OscConfig+0x310>)
 80026b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	4b62      	ldr	r3, [pc, #392]	@ (8002840 <HAL_RCC_OscConfig+0x310>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a61      	ldr	r2, [pc, #388]	@ (8002840 <HAL_RCC_OscConfig+0x310>)
 80026bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026c0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026c2:	4b5f      	ldr	r3, [pc, #380]	@ (8002840 <HAL_RCC_OscConfig+0x310>)
 80026c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c6:	f023 020f 	bic.w	r2, r3, #15
 80026ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	495a      	ldr	r1, [pc, #360]	@ (8002840 <HAL_RCC_OscConfig+0x310>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d054      	beq.n	8002796 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ec:	f7fe fdce 	bl	800128c <HAL_GetTick>
 80026f0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f4:	e00a      	b.n	800270c <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026f6:	f7fe fdc9 	bl	800128c <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b64      	cmp	r3, #100	@ 0x64
 8002704:	d902      	bls.n	800270c <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	f000 bf19 	b.w	800353e <HAL_RCC_OscConfig+0x100e>
 800270c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002710:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002714:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002718:	fa93 f3a3 	rbit	r3, r3
 800271c:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002720:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002724:	fab3 f383 	clz	r3, r3
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b3f      	cmp	r3, #63	@ 0x3f
 800272c:	d802      	bhi.n	8002734 <HAL_RCC_OscConfig+0x204>
 800272e:	4b44      	ldr	r3, [pc, #272]	@ (8002840 <HAL_RCC_OscConfig+0x310>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	e015      	b.n	8002760 <HAL_RCC_OscConfig+0x230>
 8002734:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002738:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002740:	fa93 f3a3 	rbit	r3, r3
 8002744:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002748:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800274c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002750:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002754:	fa93 f3a3 	rbit	r3, r3
 8002758:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800275c:	4b38      	ldr	r3, [pc, #224]	@ (8002840 <HAL_RCC_OscConfig+0x310>)
 800275e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002760:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002764:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002768:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800276c:	fa92 f2a2 	rbit	r2, r2
 8002770:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002774:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002778:	fab2 f282 	clz	r2, r2
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	f042 0220 	orr.w	r2, r2, #32
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	f002 021f 	and.w	r2, r2, #31
 8002788:	2101      	movs	r1, #1
 800278a:	fa01 f202 	lsl.w	r2, r1, r2
 800278e:	4013      	ands	r3, r2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0b0      	beq.n	80026f6 <HAL_RCC_OscConfig+0x1c6>
 8002794:	e057      	b.n	8002846 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002796:	f7fe fd79 	bl	800128c <HAL_GetTick>
 800279a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800279e:	e00a      	b.n	80027b6 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027a0:	f7fe fd74 	bl	800128c <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b64      	cmp	r3, #100	@ 0x64
 80027ae:	d902      	bls.n	80027b6 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	f000 bec4 	b.w	800353e <HAL_RCC_OscConfig+0x100e>
 80027b6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027ba:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027be:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80027c2:	fa93 f3a3 	rbit	r3, r3
 80027c6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80027ca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ce:	fab3 f383 	clz	r3, r3
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b3f      	cmp	r3, #63	@ 0x3f
 80027d6:	d802      	bhi.n	80027de <HAL_RCC_OscConfig+0x2ae>
 80027d8:	4b19      	ldr	r3, [pc, #100]	@ (8002840 <HAL_RCC_OscConfig+0x310>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	e015      	b.n	800280a <HAL_RCC_OscConfig+0x2da>
 80027de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027e2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80027ea:	fa93 f3a3 	rbit	r3, r3
 80027ee:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80027f2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027f6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80027fa:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80027fe:	fa93 f3a3 	rbit	r3, r3
 8002802:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002806:	4b0e      	ldr	r3, [pc, #56]	@ (8002840 <HAL_RCC_OscConfig+0x310>)
 8002808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800280e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002812:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002816:	fa92 f2a2 	rbit	r2, r2
 800281a:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800281e:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002822:	fab2 f282 	clz	r2, r2
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	f042 0220 	orr.w	r2, r2, #32
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	f002 021f 	and.w	r2, r2, #31
 8002832:	2101      	movs	r1, #1
 8002834:	fa01 f202 	lsl.w	r2, r1, r2
 8002838:	4013      	ands	r3, r2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1b0      	bne.n	80027a0 <HAL_RCC_OscConfig+0x270>
 800283e:	e002      	b.n	8002846 <HAL_RCC_OscConfig+0x316>
 8002840:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002846:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800284a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 816c 	beq.w	8002b34 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800285c:	4bcc      	ldr	r3, [pc, #816]	@ (8002b90 <HAL_RCC_OscConfig+0x660>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 030c 	and.w	r3, r3, #12
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00b      	beq.n	8002880 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002868:	4bc9      	ldr	r3, [pc, #804]	@ (8002b90 <HAL_RCC_OscConfig+0x660>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f003 030c 	and.w	r3, r3, #12
 8002870:	2b08      	cmp	r3, #8
 8002872:	d16d      	bne.n	8002950 <HAL_RCC_OscConfig+0x420>
 8002874:	4bc6      	ldr	r3, [pc, #792]	@ (8002b90 <HAL_RCC_OscConfig+0x660>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d167      	bne.n	8002950 <HAL_RCC_OscConfig+0x420>
 8002880:	2302      	movs	r3, #2
 8002882:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002886:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800288a:	fa93 f3a3 	rbit	r3, r3
 800288e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002892:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002896:	fab3 f383 	clz	r3, r3
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b3f      	cmp	r3, #63	@ 0x3f
 800289e:	d802      	bhi.n	80028a6 <HAL_RCC_OscConfig+0x376>
 80028a0:	4bbb      	ldr	r3, [pc, #748]	@ (8002b90 <HAL_RCC_OscConfig+0x660>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	e013      	b.n	80028ce <HAL_RCC_OscConfig+0x39e>
 80028a6:	2302      	movs	r3, #2
 80028a8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ac:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80028b0:	fa93 f3a3 	rbit	r3, r3
 80028b4:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80028b8:	2302      	movs	r3, #2
 80028ba:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80028be:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80028c2:	fa93 f3a3 	rbit	r3, r3
 80028c6:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80028ca:	4bb1      	ldr	r3, [pc, #708]	@ (8002b90 <HAL_RCC_OscConfig+0x660>)
 80028cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ce:	2202      	movs	r2, #2
 80028d0:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80028d4:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80028d8:	fa92 f2a2 	rbit	r2, r2
 80028dc:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80028e0:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80028e4:	fab2 f282 	clz	r2, r2
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	f042 0220 	orr.w	r2, r2, #32
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	f002 021f 	and.w	r2, r2, #31
 80028f4:	2101      	movs	r1, #1
 80028f6:	fa01 f202 	lsl.w	r2, r1, r2
 80028fa:	4013      	ands	r3, r2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00a      	beq.n	8002916 <HAL_RCC_OscConfig+0x3e6>
 8002900:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002904:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d002      	beq.n	8002916 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	f000 be14 	b.w	800353e <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002916:	4b9e      	ldr	r3, [pc, #632]	@ (8002b90 <HAL_RCC_OscConfig+0x660>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800291e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002922:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	21f8      	movs	r1, #248	@ 0xf8
 800292c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002930:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002934:	fa91 f1a1 	rbit	r1, r1
 8002938:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800293c:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002940:	fab1 f181 	clz	r1, r1
 8002944:	b2c9      	uxtb	r1, r1
 8002946:	408b      	lsls	r3, r1
 8002948:	4991      	ldr	r1, [pc, #580]	@ (8002b90 <HAL_RCC_OscConfig+0x660>)
 800294a:	4313      	orrs	r3, r2
 800294c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800294e:	e0f1      	b.n	8002b34 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002950:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002954:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 8083 	beq.w	8002a68 <HAL_RCC_OscConfig+0x538>
 8002962:	2301      	movs	r3, #1
 8002964:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002968:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800296c:	fa93 f3a3 	rbit	r3, r3
 8002970:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002974:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002978:	fab3 f383 	clz	r3, r3
 800297c:	b2db      	uxtb	r3, r3
 800297e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002982:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	461a      	mov	r2, r3
 800298a:	2301      	movs	r3, #1
 800298c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298e:	f7fe fc7d 	bl	800128c <HAL_GetTick>
 8002992:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002996:	e00a      	b.n	80029ae <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002998:	f7fe fc78 	bl	800128c <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d902      	bls.n	80029ae <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	f000 bdc8 	b.w	800353e <HAL_RCC_OscConfig+0x100e>
 80029ae:	2302      	movs	r3, #2
 80029b0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80029b8:	fa93 f3a3 	rbit	r3, r3
 80029bc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80029c0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c4:	fab3 f383 	clz	r3, r3
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b3f      	cmp	r3, #63	@ 0x3f
 80029cc:	d802      	bhi.n	80029d4 <HAL_RCC_OscConfig+0x4a4>
 80029ce:	4b70      	ldr	r3, [pc, #448]	@ (8002b90 <HAL_RCC_OscConfig+0x660>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	e013      	b.n	80029fc <HAL_RCC_OscConfig+0x4cc>
 80029d4:	2302      	movs	r3, #2
 80029d6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029da:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80029de:	fa93 f3a3 	rbit	r3, r3
 80029e2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80029e6:	2302      	movs	r3, #2
 80029e8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80029ec:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80029f0:	fa93 f3a3 	rbit	r3, r3
 80029f4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80029f8:	4b65      	ldr	r3, [pc, #404]	@ (8002b90 <HAL_RCC_OscConfig+0x660>)
 80029fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fc:	2202      	movs	r2, #2
 80029fe:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002a02:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002a06:	fa92 f2a2 	rbit	r2, r2
 8002a0a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002a0e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002a12:	fab2 f282 	clz	r2, r2
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	f042 0220 	orr.w	r2, r2, #32
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	f002 021f 	and.w	r2, r2, #31
 8002a22:	2101      	movs	r1, #1
 8002a24:	fa01 f202 	lsl.w	r2, r1, r2
 8002a28:	4013      	ands	r3, r2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0b4      	beq.n	8002998 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a2e:	4b58      	ldr	r3, [pc, #352]	@ (8002b90 <HAL_RCC_OscConfig+0x660>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a3a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	21f8      	movs	r1, #248	@ 0xf8
 8002a44:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002a4c:	fa91 f1a1 	rbit	r1, r1
 8002a50:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002a54:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002a58:	fab1 f181 	clz	r1, r1
 8002a5c:	b2c9      	uxtb	r1, r1
 8002a5e:	408b      	lsls	r3, r1
 8002a60:	494b      	ldr	r1, [pc, #300]	@ (8002b90 <HAL_RCC_OscConfig+0x660>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	600b      	str	r3, [r1, #0]
 8002a66:	e065      	b.n	8002b34 <HAL_RCC_OscConfig+0x604>
 8002a68:	2301      	movs	r3, #1
 8002a6a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002a72:	fa93 f3a3 	rbit	r3, r3
 8002a76:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002a7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a7e:	fab3 f383 	clz	r3, r3
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a88:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	461a      	mov	r2, r3
 8002a90:	2300      	movs	r3, #0
 8002a92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a94:	f7fe fbfa 	bl	800128c <HAL_GetTick>
 8002a98:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a9c:	e00a      	b.n	8002ab4 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a9e:	f7fe fbf5 	bl	800128c <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d902      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	f000 bd45 	b.w	800353e <HAL_RCC_OscConfig+0x100e>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aba:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002abe:	fa93 f3a3 	rbit	r3, r3
 8002ac2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002ac6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aca:	fab3 f383 	clz	r3, r3
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ad2:	d802      	bhi.n	8002ada <HAL_RCC_OscConfig+0x5aa>
 8002ad4:	4b2e      	ldr	r3, [pc, #184]	@ (8002b90 <HAL_RCC_OscConfig+0x660>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	e013      	b.n	8002b02 <HAL_RCC_OscConfig+0x5d2>
 8002ada:	2302      	movs	r3, #2
 8002adc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002ae4:	fa93 f3a3 	rbit	r3, r3
 8002ae8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002aec:	2302      	movs	r3, #2
 8002aee:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002af2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002af6:	fa93 f3a3 	rbit	r3, r3
 8002afa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002afe:	4b24      	ldr	r3, [pc, #144]	@ (8002b90 <HAL_RCC_OscConfig+0x660>)
 8002b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b02:	2202      	movs	r2, #2
 8002b04:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002b08:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002b0c:	fa92 f2a2 	rbit	r2, r2
 8002b10:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002b14:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002b18:	fab2 f282 	clz	r2, r2
 8002b1c:	b2d2      	uxtb	r2, r2
 8002b1e:	f042 0220 	orr.w	r2, r2, #32
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	f002 021f 	and.w	r2, r2, #31
 8002b28:	2101      	movs	r1, #1
 8002b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b2e:	4013      	ands	r3, r2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1b4      	bne.n	8002a9e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0308 	and.w	r3, r3, #8
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 8115 	beq.w	8002d74 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d07e      	beq.n	8002c58 <HAL_RCC_OscConfig+0x728>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b60:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b64:	fa93 f3a3 	rbit	r3, r3
 8002b68:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002b6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b70:	fab3 f383 	clz	r3, r3
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	461a      	mov	r2, r3
 8002b78:	4b06      	ldr	r3, [pc, #24]	@ (8002b94 <HAL_RCC_OscConfig+0x664>)
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	461a      	mov	r2, r3
 8002b80:	2301      	movs	r3, #1
 8002b82:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b84:	f7fe fb82 	bl	800128c <HAL_GetTick>
 8002b88:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b8c:	e00f      	b.n	8002bae <HAL_RCC_OscConfig+0x67e>
 8002b8e:	bf00      	nop
 8002b90:	40021000 	.word	0x40021000
 8002b94:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b98:	f7fe fb78 	bl	800128c <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d902      	bls.n	8002bae <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	f000 bcc8 	b.w	800353e <HAL_RCC_OscConfig+0x100e>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002bb8:	fa93 f3a3 	rbit	r3, r3
 8002bbc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002bc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bc4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002bc8:	2202      	movs	r2, #2
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	fa93 f2a3 	rbit	r2, r3
 8002bda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002bec:	2202      	movs	r2, #2
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	fa93 f2a3 	rbit	r2, r3
 8002bfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c02:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002c06:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c08:	4bb0      	ldr	r3, [pc, #704]	@ (8002ecc <HAL_RCC_OscConfig+0x99c>)
 8002c0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c10:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002c14:	2102      	movs	r1, #2
 8002c16:	6019      	str	r1, [r3, #0]
 8002c18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c1c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	fa93 f1a3 	rbit	r1, r3
 8002c26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c2a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002c2e:	6019      	str	r1, [r3, #0]
  return result;
 8002c30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c34:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	fab3 f383 	clz	r3, r3
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	f003 031f 	and.w	r3, r3, #31
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c50:	4013      	ands	r3, r2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0a0      	beq.n	8002b98 <HAL_RCC_OscConfig+0x668>
 8002c56:	e08d      	b.n	8002d74 <HAL_RCC_OscConfig+0x844>
 8002c58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c5c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002c60:	2201      	movs	r2, #1
 8002c62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c68:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	fa93 f2a3 	rbit	r2, r3
 8002c72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c76:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002c7a:	601a      	str	r2, [r3, #0]
  return result;
 8002c7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c80:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002c84:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c86:	fab3 f383 	clz	r3, r3
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	4b90      	ldr	r3, [pc, #576]	@ (8002ed0 <HAL_RCC_OscConfig+0x9a0>)
 8002c90:	4413      	add	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	461a      	mov	r2, r3
 8002c96:	2300      	movs	r3, #0
 8002c98:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c9a:	f7fe faf7 	bl	800128c <HAL_GetTick>
 8002c9e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca2:	e00a      	b.n	8002cba <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ca4:	f7fe faf2 	bl	800128c <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d902      	bls.n	8002cba <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	f000 bc42 	b.w	800353e <HAL_RCC_OscConfig+0x100e>
 8002cba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cbe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cca:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	fa93 f2a3 	rbit	r2, r3
 8002cd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	fa93 f2a3 	rbit	r2, r3
 8002cf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cfc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d06:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d12:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	fa93 f2a3 	rbit	r2, r3
 8002d1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d20:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002d24:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d26:	4b69      	ldr	r3, [pc, #420]	@ (8002ecc <HAL_RCC_OscConfig+0x99c>)
 8002d28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d2e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002d32:	2102      	movs	r1, #2
 8002d34:	6019      	str	r1, [r3, #0]
 8002d36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d3a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	fa93 f1a3 	rbit	r1, r3
 8002d44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d48:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d4c:	6019      	str	r1, [r3, #0]
  return result;
 8002d4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d52:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	fab3 f383 	clz	r3, r3
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	f003 031f 	and.w	r3, r3, #31
 8002d68:	2101      	movs	r1, #1
 8002d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6e:	4013      	ands	r3, r2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d197      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d78:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 819e 	beq.w	80030c6 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d90:	4b4e      	ldr	r3, [pc, #312]	@ (8002ecc <HAL_RCC_OscConfig+0x99c>)
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d116      	bne.n	8002dca <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d9c:	4b4b      	ldr	r3, [pc, #300]	@ (8002ecc <HAL_RCC_OscConfig+0x99c>)
 8002d9e:	69db      	ldr	r3, [r3, #28]
 8002da0:	4a4a      	ldr	r2, [pc, #296]	@ (8002ecc <HAL_RCC_OscConfig+0x99c>)
 8002da2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002da6:	61d3      	str	r3, [r2, #28]
 8002da8:	4b48      	ldr	r3, [pc, #288]	@ (8002ecc <HAL_RCC_OscConfig+0x99c>)
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002db0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dbe:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002dc2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dca:	4b42      	ldr	r3, [pc, #264]	@ (8002ed4 <HAL_RCC_OscConfig+0x9a4>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d11a      	bne.n	8002e0c <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dd6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ed4 <HAL_RCC_OscConfig+0x9a4>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a3e      	ldr	r2, [pc, #248]	@ (8002ed4 <HAL_RCC_OscConfig+0x9a4>)
 8002ddc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002de0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002de2:	f7fe fa53 	bl	800128c <HAL_GetTick>
 8002de6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dea:	e009      	b.n	8002e00 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dec:	f7fe fa4e 	bl	800128c <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b64      	cmp	r3, #100	@ 0x64
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e39e      	b.n	800353e <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e00:	4b34      	ldr	r3, [pc, #208]	@ (8002ed4 <HAL_RCC_OscConfig+0x9a4>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0ef      	beq.n	8002dec <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e10:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d106      	bne.n	8002e2a <HAL_RCC_OscConfig+0x8fa>
 8002e1c:	4b2b      	ldr	r3, [pc, #172]	@ (8002ecc <HAL_RCC_OscConfig+0x99c>)
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	4a2a      	ldr	r2, [pc, #168]	@ (8002ecc <HAL_RCC_OscConfig+0x99c>)
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	6213      	str	r3, [r2, #32]
 8002e28:	e035      	b.n	8002e96 <HAL_RCC_OscConfig+0x966>
 8002e2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10c      	bne.n	8002e54 <HAL_RCC_OscConfig+0x924>
 8002e3a:	4b24      	ldr	r3, [pc, #144]	@ (8002ecc <HAL_RCC_OscConfig+0x99c>)
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	4a23      	ldr	r2, [pc, #140]	@ (8002ecc <HAL_RCC_OscConfig+0x99c>)
 8002e40:	f023 0301 	bic.w	r3, r3, #1
 8002e44:	6213      	str	r3, [r2, #32]
 8002e46:	4b21      	ldr	r3, [pc, #132]	@ (8002ecc <HAL_RCC_OscConfig+0x99c>)
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	4a20      	ldr	r2, [pc, #128]	@ (8002ecc <HAL_RCC_OscConfig+0x99c>)
 8002e4c:	f023 0304 	bic.w	r3, r3, #4
 8002e50:	6213      	str	r3, [r2, #32]
 8002e52:	e020      	b.n	8002e96 <HAL_RCC_OscConfig+0x966>
 8002e54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e58:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	2b05      	cmp	r3, #5
 8002e62:	d10c      	bne.n	8002e7e <HAL_RCC_OscConfig+0x94e>
 8002e64:	4b19      	ldr	r3, [pc, #100]	@ (8002ecc <HAL_RCC_OscConfig+0x99c>)
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	4a18      	ldr	r2, [pc, #96]	@ (8002ecc <HAL_RCC_OscConfig+0x99c>)
 8002e6a:	f043 0304 	orr.w	r3, r3, #4
 8002e6e:	6213      	str	r3, [r2, #32]
 8002e70:	4b16      	ldr	r3, [pc, #88]	@ (8002ecc <HAL_RCC_OscConfig+0x99c>)
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	4a15      	ldr	r2, [pc, #84]	@ (8002ecc <HAL_RCC_OscConfig+0x99c>)
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	6213      	str	r3, [r2, #32]
 8002e7c:	e00b      	b.n	8002e96 <HAL_RCC_OscConfig+0x966>
 8002e7e:	4b13      	ldr	r3, [pc, #76]	@ (8002ecc <HAL_RCC_OscConfig+0x99c>)
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	4a12      	ldr	r2, [pc, #72]	@ (8002ecc <HAL_RCC_OscConfig+0x99c>)
 8002e84:	f023 0301 	bic.w	r3, r3, #1
 8002e88:	6213      	str	r3, [r2, #32]
 8002e8a:	4b10      	ldr	r3, [pc, #64]	@ (8002ecc <HAL_RCC_OscConfig+0x99c>)
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	4a0f      	ldr	r2, [pc, #60]	@ (8002ecc <HAL_RCC_OscConfig+0x99c>)
 8002e90:	f023 0304 	bic.w	r3, r3, #4
 8002e94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e9a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 8087 	beq.w	8002fb6 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea8:	f7fe f9f0 	bl	800128c <HAL_GetTick>
 8002eac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb0:	e012      	b.n	8002ed8 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eb2:	f7fe f9eb 	bl	800128c <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d908      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e339      	b.n	800353e <HAL_RCC_OscConfig+0x100e>
 8002eca:	bf00      	nop
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	10908120 	.word	0x10908120
 8002ed4:	40007000 	.word	0x40007000
 8002ed8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002edc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	fa93 f2a3 	rbit	r2, r3
 8002ef2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f00:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002f04:	2202      	movs	r2, #2
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f0c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	fa93 f2a3 	rbit	r2, r3
 8002f16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f1a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002f1e:	601a      	str	r2, [r3, #0]
  return result;
 8002f20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f24:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002f28:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2a:	fab3 f383 	clz	r3, r3
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d102      	bne.n	8002f40 <HAL_RCC_OscConfig+0xa10>
 8002f3a:	4b98      	ldr	r3, [pc, #608]	@ (800319c <HAL_RCC_OscConfig+0xc6c>)
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	e013      	b.n	8002f68 <HAL_RCC_OscConfig+0xa38>
 8002f40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f44:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002f48:	2202      	movs	r2, #2
 8002f4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f50:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	fa93 f2a3 	rbit	r2, r3
 8002f5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f5e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	4b8d      	ldr	r3, [pc, #564]	@ (800319c <HAL_RCC_OscConfig+0xc6c>)
 8002f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f68:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f6c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002f70:	2102      	movs	r1, #2
 8002f72:	6011      	str	r1, [r2, #0]
 8002f74:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f78:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002f7c:	6812      	ldr	r2, [r2, #0]
 8002f7e:	fa92 f1a2 	rbit	r1, r2
 8002f82:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f86:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002f8a:	6011      	str	r1, [r2, #0]
  return result;
 8002f8c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f90:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002f94:	6812      	ldr	r2, [r2, #0]
 8002f96:	fab2 f282 	clz	r2, r2
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	f002 021f 	and.w	r2, r2, #31
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fac:	4013      	ands	r3, r2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f43f af7f 	beq.w	8002eb2 <HAL_RCC_OscConfig+0x982>
 8002fb4:	e07d      	b.n	80030b2 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb6:	f7fe f969 	bl	800128c <HAL_GetTick>
 8002fba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fbe:	e00b      	b.n	8002fd8 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fc0:	f7fe f964 	bl	800128c <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e2b2      	b.n	800353e <HAL_RCC_OscConfig+0x100e>
 8002fd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fdc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	fa93 f2a3 	rbit	r2, r3
 8002ff2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff6:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003000:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003004:	2202      	movs	r2, #2
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800300c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	fa93 f2a3 	rbit	r2, r3
 8003016:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800301a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800301e:	601a      	str	r2, [r3, #0]
  return result;
 8003020:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003024:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003028:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800302a:	fab3 f383 	clz	r3, r3
 800302e:	b2db      	uxtb	r3, r3
 8003030:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d102      	bne.n	8003040 <HAL_RCC_OscConfig+0xb10>
 800303a:	4b58      	ldr	r3, [pc, #352]	@ (800319c <HAL_RCC_OscConfig+0xc6c>)
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	e013      	b.n	8003068 <HAL_RCC_OscConfig+0xb38>
 8003040:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003044:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003048:	2202      	movs	r2, #2
 800304a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003050:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	fa93 f2a3 	rbit	r2, r3
 800305a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800305e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	4b4d      	ldr	r3, [pc, #308]	@ (800319c <HAL_RCC_OscConfig+0xc6c>)
 8003066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003068:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800306c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003070:	2102      	movs	r1, #2
 8003072:	6011      	str	r1, [r2, #0]
 8003074:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003078:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800307c:	6812      	ldr	r2, [r2, #0]
 800307e:	fa92 f1a2 	rbit	r1, r2
 8003082:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003086:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800308a:	6011      	str	r1, [r2, #0]
  return result;
 800308c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003090:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003094:	6812      	ldr	r2, [r2, #0]
 8003096:	fab2 f282 	clz	r2, r2
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	f002 021f 	and.w	r2, r2, #31
 80030a6:	2101      	movs	r1, #1
 80030a8:	fa01 f202 	lsl.w	r2, r1, r2
 80030ac:	4013      	ands	r3, r2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d186      	bne.n	8002fc0 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030b2:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d105      	bne.n	80030c6 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ba:	4b38      	ldr	r3, [pc, #224]	@ (800319c <HAL_RCC_OscConfig+0xc6c>)
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	4a37      	ldr	r2, [pc, #220]	@ (800319c <HAL_RCC_OscConfig+0xc6c>)
 80030c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030c4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 8232 	beq.w	800353c <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030d8:	4b30      	ldr	r3, [pc, #192]	@ (800319c <HAL_RCC_OscConfig+0xc6c>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f003 030c 	and.w	r3, r3, #12
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	f000 8201 	beq.w	80034e8 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	f040 8157 	bne.w	80033a6 <HAL_RCC_OscConfig+0xe76>
 80030f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030fc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003100:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003104:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003106:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800310a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	fa93 f2a3 	rbit	r2, r3
 8003114:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003118:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800311c:	601a      	str	r2, [r3, #0]
  return result;
 800311e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003122:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003126:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003128:	fab3 f383 	clz	r3, r3
 800312c:	b2db      	uxtb	r3, r3
 800312e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003132:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	461a      	mov	r2, r3
 800313a:	2300      	movs	r3, #0
 800313c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313e:	f7fe f8a5 	bl	800128c <HAL_GetTick>
 8003142:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003146:	e009      	b.n	800315c <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003148:	f7fe f8a0 	bl	800128c <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e1f0      	b.n	800353e <HAL_RCC_OscConfig+0x100e>
 800315c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003160:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003164:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003168:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800316e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	fa93 f2a3 	rbit	r2, r3
 8003178:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800317c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003180:	601a      	str	r2, [r3, #0]
  return result;
 8003182:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003186:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800318a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800318c:	fab3 f383 	clz	r3, r3
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b3f      	cmp	r3, #63	@ 0x3f
 8003194:	d804      	bhi.n	80031a0 <HAL_RCC_OscConfig+0xc70>
 8003196:	4b01      	ldr	r3, [pc, #4]	@ (800319c <HAL_RCC_OscConfig+0xc6c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	e029      	b.n	80031f0 <HAL_RCC_OscConfig+0xcc0>
 800319c:	40021000 	.word	0x40021000
 80031a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031a4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80031a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031b2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	fa93 f2a3 	rbit	r2, r3
 80031bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031c0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ca:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80031ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	fa93 f2a3 	rbit	r2, r3
 80031e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031e6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	4bc3      	ldr	r3, [pc, #780]	@ (80034fc <HAL_RCC_OscConfig+0xfcc>)
 80031ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031f4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80031f8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80031fc:	6011      	str	r1, [r2, #0]
 80031fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003202:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003206:	6812      	ldr	r2, [r2, #0]
 8003208:	fa92 f1a2 	rbit	r1, r2
 800320c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003210:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003214:	6011      	str	r1, [r2, #0]
  return result;
 8003216:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800321a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800321e:	6812      	ldr	r2, [r2, #0]
 8003220:	fab2 f282 	clz	r2, r2
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	f042 0220 	orr.w	r2, r2, #32
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	f002 021f 	and.w	r2, r2, #31
 8003230:	2101      	movs	r1, #1
 8003232:	fa01 f202 	lsl.w	r2, r1, r2
 8003236:	4013      	ands	r3, r2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d185      	bne.n	8003148 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800323c:	4baf      	ldr	r3, [pc, #700]	@ (80034fc <HAL_RCC_OscConfig+0xfcc>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003244:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003248:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003250:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003254:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	430b      	orrs	r3, r1
 800325e:	49a7      	ldr	r1, [pc, #668]	@ (80034fc <HAL_RCC_OscConfig+0xfcc>)
 8003260:	4313      	orrs	r3, r2
 8003262:	604b      	str	r3, [r1, #4]
 8003264:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003268:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800326c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003270:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003272:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003276:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	fa93 f2a3 	rbit	r2, r3
 8003280:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003284:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003288:	601a      	str	r2, [r3, #0]
  return result;
 800328a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800328e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003292:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003294:	fab3 f383 	clz	r3, r3
 8003298:	b2db      	uxtb	r3, r3
 800329a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800329e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	461a      	mov	r2, r3
 80032a6:	2301      	movs	r3, #1
 80032a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032aa:	f7fd ffef 	bl	800128c <HAL_GetTick>
 80032ae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032b2:	e009      	b.n	80032c8 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032b4:	f7fd ffea 	bl	800128c <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e13a      	b.n	800353e <HAL_RCC_OscConfig+0x100e>
 80032c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032cc:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80032d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032da:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	fa93 f2a3 	rbit	r2, r3
 80032e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80032ec:	601a      	str	r2, [r3, #0]
  return result;
 80032ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032f2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80032f6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032f8:	fab3 f383 	clz	r3, r3
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8003300:	d802      	bhi.n	8003308 <HAL_RCC_OscConfig+0xdd8>
 8003302:	4b7e      	ldr	r3, [pc, #504]	@ (80034fc <HAL_RCC_OscConfig+0xfcc>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	e027      	b.n	8003358 <HAL_RCC_OscConfig+0xe28>
 8003308:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800330c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003310:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003314:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003316:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800331a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	fa93 f2a3 	rbit	r2, r3
 8003324:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003328:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003332:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003336:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003340:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	fa93 f2a3 	rbit	r2, r3
 800334a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800334e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	4b69      	ldr	r3, [pc, #420]	@ (80034fc <HAL_RCC_OscConfig+0xfcc>)
 8003356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003358:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800335c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003360:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003364:	6011      	str	r1, [r2, #0]
 8003366:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800336a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800336e:	6812      	ldr	r2, [r2, #0]
 8003370:	fa92 f1a2 	rbit	r1, r2
 8003374:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003378:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800337c:	6011      	str	r1, [r2, #0]
  return result;
 800337e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003382:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003386:	6812      	ldr	r2, [r2, #0]
 8003388:	fab2 f282 	clz	r2, r2
 800338c:	b2d2      	uxtb	r2, r2
 800338e:	f042 0220 	orr.w	r2, r2, #32
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	f002 021f 	and.w	r2, r2, #31
 8003398:	2101      	movs	r1, #1
 800339a:	fa01 f202 	lsl.w	r2, r1, r2
 800339e:	4013      	ands	r3, r2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d087      	beq.n	80032b4 <HAL_RCC_OscConfig+0xd84>
 80033a4:	e0ca      	b.n	800353c <HAL_RCC_OscConfig+0x100c>
 80033a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033aa:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80033ae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80033b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033b8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	fa93 f2a3 	rbit	r2, r3
 80033c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033c6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80033ca:	601a      	str	r2, [r3, #0]
  return result;
 80033cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033d0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80033d4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033d6:	fab3 f383 	clz	r3, r3
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80033e0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	461a      	mov	r2, r3
 80033e8:	2300      	movs	r3, #0
 80033ea:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ec:	f7fd ff4e 	bl	800128c <HAL_GetTick>
 80033f0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033f4:	e009      	b.n	800340a <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f6:	f7fd ff49 	bl	800128c <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e099      	b.n	800353e <HAL_RCC_OscConfig+0x100e>
 800340a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800340e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003412:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003416:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003418:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800341c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	fa93 f2a3 	rbit	r2, r3
 8003426:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800342a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800342e:	601a      	str	r2, [r3, #0]
  return result;
 8003430:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003434:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003438:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800343a:	fab3 f383 	clz	r3, r3
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b3f      	cmp	r3, #63	@ 0x3f
 8003442:	d802      	bhi.n	800344a <HAL_RCC_OscConfig+0xf1a>
 8003444:	4b2d      	ldr	r3, [pc, #180]	@ (80034fc <HAL_RCC_OscConfig+0xfcc>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	e027      	b.n	800349a <HAL_RCC_OscConfig+0xf6a>
 800344a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800344e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003452:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003456:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003458:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800345c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	fa93 f2a3 	rbit	r2, r3
 8003466:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800346a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003474:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003478:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003482:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	fa93 f2a3 	rbit	r2, r3
 800348c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003490:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	4b19      	ldr	r3, [pc, #100]	@ (80034fc <HAL_RCC_OscConfig+0xfcc>)
 8003498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800349e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80034a2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80034a6:	6011      	str	r1, [r2, #0]
 80034a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034ac:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80034b0:	6812      	ldr	r2, [r2, #0]
 80034b2:	fa92 f1a2 	rbit	r1, r2
 80034b6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034ba:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80034be:	6011      	str	r1, [r2, #0]
  return result;
 80034c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034c4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80034c8:	6812      	ldr	r2, [r2, #0]
 80034ca:	fab2 f282 	clz	r2, r2
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	f042 0220 	orr.w	r2, r2, #32
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	f002 021f 	and.w	r2, r2, #31
 80034da:	2101      	movs	r1, #1
 80034dc:	fa01 f202 	lsl.w	r2, r1, r2
 80034e0:	4013      	ands	r3, r2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d187      	bne.n	80033f6 <HAL_RCC_OscConfig+0xec6>
 80034e6:	e029      	b.n	800353c <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d103      	bne.n	8003500 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e020      	b.n	800353e <HAL_RCC_OscConfig+0x100e>
 80034fc:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003500:	4b11      	ldr	r3, [pc, #68]	@ (8003548 <HAL_RCC_OscConfig+0x1018>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003508:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800350c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003510:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003514:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	429a      	cmp	r2, r3
 800351e:	d10b      	bne.n	8003538 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003520:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003524:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003528:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800352c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003534:	429a      	cmp	r2, r3
 8003536:	d001      	beq.n	800353c <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40021000 	.word	0x40021000

0800354c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b09e      	sub	sp, #120	@ 0x78
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003556:	2300      	movs	r3, #0
 8003558:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e154      	b.n	800380e <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003564:	4b89      	ldr	r3, [pc, #548]	@ (800378c <HAL_RCC_ClockConfig+0x240>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	429a      	cmp	r2, r3
 8003570:	d910      	bls.n	8003594 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003572:	4b86      	ldr	r3, [pc, #536]	@ (800378c <HAL_RCC_ClockConfig+0x240>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f023 0207 	bic.w	r2, r3, #7
 800357a:	4984      	ldr	r1, [pc, #528]	@ (800378c <HAL_RCC_ClockConfig+0x240>)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	4313      	orrs	r3, r2
 8003580:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003582:	4b82      	ldr	r3, [pc, #520]	@ (800378c <HAL_RCC_ClockConfig+0x240>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	d001      	beq.n	8003594 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e13c      	b.n	800380e <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d008      	beq.n	80035b2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035a0:	4b7b      	ldr	r3, [pc, #492]	@ (8003790 <HAL_RCC_ClockConfig+0x244>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	4978      	ldr	r1, [pc, #480]	@ (8003790 <HAL_RCC_ClockConfig+0x244>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 80cd 	beq.w	800375a <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d137      	bne.n	8003638 <HAL_RCC_ClockConfig+0xec>
 80035c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035d0:	fa93 f3a3 	rbit	r3, r3
 80035d4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80035d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d8:	fab3 f383 	clz	r3, r3
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b3f      	cmp	r3, #63	@ 0x3f
 80035e0:	d802      	bhi.n	80035e8 <HAL_RCC_ClockConfig+0x9c>
 80035e2:	4b6b      	ldr	r3, [pc, #428]	@ (8003790 <HAL_RCC_ClockConfig+0x244>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	e00f      	b.n	8003608 <HAL_RCC_ClockConfig+0xbc>
 80035e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035f0:	fa93 f3a3 	rbit	r3, r3
 80035f4:	667b      	str	r3, [r7, #100]	@ 0x64
 80035f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80035fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035fe:	fa93 f3a3 	rbit	r3, r3
 8003602:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003604:	4b62      	ldr	r3, [pc, #392]	@ (8003790 <HAL_RCC_ClockConfig+0x244>)
 8003606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003608:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800360c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800360e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003610:	fa92 f2a2 	rbit	r2, r2
 8003614:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003616:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003618:	fab2 f282 	clz	r2, r2
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	f042 0220 	orr.w	r2, r2, #32
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	f002 021f 	and.w	r2, r2, #31
 8003628:	2101      	movs	r1, #1
 800362a:	fa01 f202 	lsl.w	r2, r1, r2
 800362e:	4013      	ands	r3, r2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d171      	bne.n	8003718 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e0ea      	b.n	800380e <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b02      	cmp	r3, #2
 800363e:	d137      	bne.n	80036b0 <HAL_RCC_ClockConfig+0x164>
 8003640:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003644:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003646:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003648:	fa93 f3a3 	rbit	r3, r3
 800364c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800364e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003650:	fab3 f383 	clz	r3, r3
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b3f      	cmp	r3, #63	@ 0x3f
 8003658:	d802      	bhi.n	8003660 <HAL_RCC_ClockConfig+0x114>
 800365a:	4b4d      	ldr	r3, [pc, #308]	@ (8003790 <HAL_RCC_ClockConfig+0x244>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	e00f      	b.n	8003680 <HAL_RCC_ClockConfig+0x134>
 8003660:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003664:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003666:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003668:	fa93 f3a3 	rbit	r3, r3
 800366c:	647b      	str	r3, [r7, #68]	@ 0x44
 800366e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003672:	643b      	str	r3, [r7, #64]	@ 0x40
 8003674:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003676:	fa93 f3a3 	rbit	r3, r3
 800367a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800367c:	4b44      	ldr	r3, [pc, #272]	@ (8003790 <HAL_RCC_ClockConfig+0x244>)
 800367e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003680:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003684:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003686:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003688:	fa92 f2a2 	rbit	r2, r2
 800368c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800368e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003690:	fab2 f282 	clz	r2, r2
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	f042 0220 	orr.w	r2, r2, #32
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	f002 021f 	and.w	r2, r2, #31
 80036a0:	2101      	movs	r1, #1
 80036a2:	fa01 f202 	lsl.w	r2, r1, r2
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d135      	bne.n	8003718 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e0ae      	b.n	800380e <HAL_RCC_ClockConfig+0x2c2>
 80036b0:	2302      	movs	r3, #2
 80036b2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b6:	fa93 f3a3 	rbit	r3, r3
 80036ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80036bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036be:	fab3 f383 	clz	r3, r3
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b3f      	cmp	r3, #63	@ 0x3f
 80036c6:	d802      	bhi.n	80036ce <HAL_RCC_ClockConfig+0x182>
 80036c8:	4b31      	ldr	r3, [pc, #196]	@ (8003790 <HAL_RCC_ClockConfig+0x244>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	e00d      	b.n	80036ea <HAL_RCC_ClockConfig+0x19e>
 80036ce:	2302      	movs	r3, #2
 80036d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d4:	fa93 f3a3 	rbit	r3, r3
 80036d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80036da:	2302      	movs	r3, #2
 80036dc:	623b      	str	r3, [r7, #32]
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	fa93 f3a3 	rbit	r3, r3
 80036e4:	61fb      	str	r3, [r7, #28]
 80036e6:	4b2a      	ldr	r3, [pc, #168]	@ (8003790 <HAL_RCC_ClockConfig+0x244>)
 80036e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ea:	2202      	movs	r2, #2
 80036ec:	61ba      	str	r2, [r7, #24]
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	fa92 f2a2 	rbit	r2, r2
 80036f4:	617a      	str	r2, [r7, #20]
  return result;
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	fab2 f282 	clz	r2, r2
 80036fc:	b2d2      	uxtb	r2, r2
 80036fe:	f042 0220 	orr.w	r2, r2, #32
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	f002 021f 	and.w	r2, r2, #31
 8003708:	2101      	movs	r1, #1
 800370a:	fa01 f202 	lsl.w	r2, r1, r2
 800370e:	4013      	ands	r3, r2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e07a      	b.n	800380e <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003718:	4b1d      	ldr	r3, [pc, #116]	@ (8003790 <HAL_RCC_ClockConfig+0x244>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f023 0203 	bic.w	r2, r3, #3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	491a      	ldr	r1, [pc, #104]	@ (8003790 <HAL_RCC_ClockConfig+0x244>)
 8003726:	4313      	orrs	r3, r2
 8003728:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800372a:	f7fd fdaf 	bl	800128c <HAL_GetTick>
 800372e:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003730:	e00a      	b.n	8003748 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003732:	f7fd fdab 	bl	800128c <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003740:	4293      	cmp	r3, r2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e062      	b.n	800380e <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003748:	4b11      	ldr	r3, [pc, #68]	@ (8003790 <HAL_RCC_ClockConfig+0x244>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f003 020c 	and.w	r2, r3, #12
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	429a      	cmp	r2, r3
 8003758:	d1eb      	bne.n	8003732 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800375a:	4b0c      	ldr	r3, [pc, #48]	@ (800378c <HAL_RCC_ClockConfig+0x240>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	429a      	cmp	r2, r3
 8003766:	d215      	bcs.n	8003794 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003768:	4b08      	ldr	r3, [pc, #32]	@ (800378c <HAL_RCC_ClockConfig+0x240>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f023 0207 	bic.w	r2, r3, #7
 8003770:	4906      	ldr	r1, [pc, #24]	@ (800378c <HAL_RCC_ClockConfig+0x240>)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	4313      	orrs	r3, r2
 8003776:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003778:	4b04      	ldr	r3, [pc, #16]	@ (800378c <HAL_RCC_ClockConfig+0x240>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d006      	beq.n	8003794 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e041      	b.n	800380e <HAL_RCC_ClockConfig+0x2c2>
 800378a:	bf00      	nop
 800378c:	40022000 	.word	0x40022000
 8003790:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b00      	cmp	r3, #0
 800379e:	d008      	beq.n	80037b2 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003818 <HAL_RCC_ClockConfig+0x2cc>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	491a      	ldr	r1, [pc, #104]	@ (8003818 <HAL_RCC_ClockConfig+0x2cc>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d009      	beq.n	80037d2 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037be:	4b16      	ldr	r3, [pc, #88]	@ (8003818 <HAL_RCC_ClockConfig+0x2cc>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	4912      	ldr	r1, [pc, #72]	@ (8003818 <HAL_RCC_ClockConfig+0x2cc>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80037d2:	f000 f829 	bl	8003828 <HAL_RCC_GetSysClockFreq>
 80037d6:	4601      	mov	r1, r0
 80037d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003818 <HAL_RCC_ClockConfig+0x2cc>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037e0:	22f0      	movs	r2, #240	@ 0xf0
 80037e2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	fa92 f2a2 	rbit	r2, r2
 80037ea:	60fa      	str	r2, [r7, #12]
  return result;
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	fab2 f282 	clz	r2, r2
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	40d3      	lsrs	r3, r2
 80037f6:	4a09      	ldr	r2, [pc, #36]	@ (800381c <HAL_RCC_ClockConfig+0x2d0>)
 80037f8:	5cd3      	ldrb	r3, [r2, r3]
 80037fa:	fa21 f303 	lsr.w	r3, r1, r3
 80037fe:	4a08      	ldr	r2, [pc, #32]	@ (8003820 <HAL_RCC_ClockConfig+0x2d4>)
 8003800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003802:	4b08      	ldr	r3, [pc, #32]	@ (8003824 <HAL_RCC_ClockConfig+0x2d8>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f7fd fcfc 	bl	8001204 <HAL_InitTick>
  
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3778      	adds	r7, #120	@ 0x78
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40021000 	.word	0x40021000
 800381c:	08006734 	.word	0x08006734
 8003820:	20000000 	.word	0x20000000
 8003824:	20000004 	.word	0x20000004

08003828 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800382e:	2300      	movs	r3, #0
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	2300      	movs	r3, #0
 8003834:	60bb      	str	r3, [r7, #8]
 8003836:	2300      	movs	r3, #0
 8003838:	617b      	str	r3, [r7, #20]
 800383a:	2300      	movs	r3, #0
 800383c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800383e:	2300      	movs	r3, #0
 8003840:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003842:	4b1e      	ldr	r3, [pc, #120]	@ (80038bc <HAL_RCC_GetSysClockFreq+0x94>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f003 030c 	and.w	r3, r3, #12
 800384e:	2b04      	cmp	r3, #4
 8003850:	d002      	beq.n	8003858 <HAL_RCC_GetSysClockFreq+0x30>
 8003852:	2b08      	cmp	r3, #8
 8003854:	d003      	beq.n	800385e <HAL_RCC_GetSysClockFreq+0x36>
 8003856:	e026      	b.n	80038a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003858:	4b19      	ldr	r3, [pc, #100]	@ (80038c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800385a:	613b      	str	r3, [r7, #16]
      break;
 800385c:	e026      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	0c9b      	lsrs	r3, r3, #18
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	4a17      	ldr	r2, [pc, #92]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003868:	5cd3      	ldrb	r3, [r2, r3]
 800386a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800386c:	4b13      	ldr	r3, [pc, #76]	@ (80038bc <HAL_RCC_GetSysClockFreq+0x94>)
 800386e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003870:	f003 030f 	and.w	r3, r3, #15
 8003874:	4a14      	ldr	r2, [pc, #80]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003876:	5cd3      	ldrb	r3, [r2, r3]
 8003878:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d008      	beq.n	8003896 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003884:	4a0e      	ldr	r2, [pc, #56]	@ (80038c0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	fbb2 f2f3 	udiv	r2, r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	fb02 f303 	mul.w	r3, r2, r3
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	e004      	b.n	80038a0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a0c      	ldr	r2, [pc, #48]	@ (80038cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800389a:	fb02 f303 	mul.w	r3, r2, r3
 800389e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	613b      	str	r3, [r7, #16]
      break;
 80038a4:	e002      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038a6:	4b06      	ldr	r3, [pc, #24]	@ (80038c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80038a8:	613b      	str	r3, [r7, #16]
      break;
 80038aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ac:	693b      	ldr	r3, [r7, #16]
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	371c      	adds	r7, #28
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	40021000 	.word	0x40021000
 80038c0:	007a1200 	.word	0x007a1200
 80038c4:	0800674c 	.word	0x0800674c
 80038c8:	0800675c 	.word	0x0800675c
 80038cc:	003d0900 	.word	0x003d0900

080038d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038d4:	4b03      	ldr	r3, [pc, #12]	@ (80038e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80038d6:	681b      	ldr	r3, [r3, #0]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	20000000 	.word	0x20000000

080038e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80038ee:	f7ff ffef 	bl	80038d0 <HAL_RCC_GetHCLKFreq>
 80038f2:	4601      	mov	r1, r0
 80038f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003924 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80038fc:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003900:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	fa92 f2a2 	rbit	r2, r2
 8003908:	603a      	str	r2, [r7, #0]
  return result;
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	fab2 f282 	clz	r2, r2
 8003910:	b2d2      	uxtb	r2, r2
 8003912:	40d3      	lsrs	r3, r2
 8003914:	4a04      	ldr	r2, [pc, #16]	@ (8003928 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003916:	5cd3      	ldrb	r3, [r2, r3]
 8003918:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800391c:	4618      	mov	r0, r3
 800391e:	3708      	adds	r7, #8
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40021000 	.word	0x40021000
 8003928:	08006744 	.word	0x08006744

0800392c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003932:	f7ff ffcd 	bl	80038d0 <HAL_RCC_GetHCLKFreq>
 8003936:	4601      	mov	r1, r0
 8003938:	4b0b      	ldr	r3, [pc, #44]	@ (8003968 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003940:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003944:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	fa92 f2a2 	rbit	r2, r2
 800394c:	603a      	str	r2, [r7, #0]
  return result;
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	fab2 f282 	clz	r2, r2
 8003954:	b2d2      	uxtb	r2, r2
 8003956:	40d3      	lsrs	r3, r2
 8003958:	4a04      	ldr	r2, [pc, #16]	@ (800396c <HAL_RCC_GetPCLK2Freq+0x40>)
 800395a:	5cd3      	ldrb	r3, [r2, r3]
 800395c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003960:	4618      	mov	r0, r3
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40021000 	.word	0x40021000
 800396c:	08006744 	.word	0x08006744

08003970 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b092      	sub	sp, #72	@ 0x48
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003980:	2300      	movs	r3, #0
 8003982:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 80cb 	beq.w	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x1ba>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003994:	4b85      	ldr	r3, [pc, #532]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10e      	bne.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039a0:	4b82      	ldr	r3, [pc, #520]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	4a81      	ldr	r2, [pc, #516]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80039a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039aa:	61d3      	str	r3, [r2, #28]
 80039ac:	4b7f      	ldr	r3, [pc, #508]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80039ae:	69db      	ldr	r3, [r3, #28]
 80039b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039b4:	60bb      	str	r3, [r7, #8]
 80039b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039b8:	2301      	movs	r3, #1
 80039ba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039be:	4b7c      	ldr	r3, [pc, #496]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d118      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ca:	4b79      	ldr	r3, [pc, #484]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a78      	ldr	r2, [pc, #480]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039d4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039d6:	f7fd fc59 	bl	800128c <HAL_GetTick>
 80039da:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039dc:	e008      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039de:	f7fd fc55 	bl	800128c <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b64      	cmp	r3, #100	@ 0x64
 80039ea:	d901      	bls.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e0d9      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x234>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f0:	4b6f      	ldr	r3, [pc, #444]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d0f0      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039fc:	4b6b      	ldr	r3, [pc, #428]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d07b      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a14:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d074      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a1a:	4b64      	ldr	r3, [pc, #400]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a28:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a2c:	fa93 f3a3 	rbit	r3, r3
 8003a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a34:	fab3 f383 	clz	r3, r3
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	4b5d      	ldr	r3, [pc, #372]	@ (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003a3e:	4413      	add	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	461a      	mov	r2, r3
 8003a44:	2301      	movs	r3, #1
 8003a46:	6013      	str	r3, [r2, #0]
 8003a48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a50:	fa93 f3a3 	rbit	r3, r3
 8003a54:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a58:	fab3 f383 	clz	r3, r3
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	461a      	mov	r2, r3
 8003a60:	4b54      	ldr	r3, [pc, #336]	@ (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003a62:	4413      	add	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	461a      	mov	r2, r3
 8003a68:	2300      	movs	r3, #0
 8003a6a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a6c:	4a4f      	ldr	r2, [pc, #316]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a70:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d043      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7c:	f7fd fc06 	bl	800128c <HAL_GetTick>
 8003a80:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a82:	e00a      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a84:	f7fd fc02 	bl	800128c <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e084      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa0:	fa93 f3a3 	rbit	r3, r3
 8003aa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	623b      	str	r3, [r7, #32]
 8003aaa:	6a3b      	ldr	r3, [r7, #32]
 8003aac:	fa93 f3a3 	rbit	r3, r3
 8003ab0:	61fb      	str	r3, [r7, #28]
  return result;
 8003ab2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab4:	fab3 f383 	clz	r3, r3
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d102      	bne.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003ac4:	4b39      	ldr	r3, [pc, #228]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	e007      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8003aca:	2302      	movs	r3, #2
 8003acc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	fa93 f3a3 	rbit	r3, r3
 8003ad4:	617b      	str	r3, [r7, #20]
 8003ad6:	4b35      	ldr	r3, [pc, #212]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ada:	2202      	movs	r2, #2
 8003adc:	613a      	str	r2, [r7, #16]
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	fa92 f2a2 	rbit	r2, r2
 8003ae4:	60fa      	str	r2, [r7, #12]
  return result;
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	fab2 f282 	clz	r2, r2
 8003aec:	b2d2      	uxtb	r2, r2
 8003aee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	f002 021f 	and.w	r2, r2, #31
 8003af8:	2101      	movs	r1, #1
 8003afa:	fa01 f202 	lsl.w	r2, r1, r2
 8003afe:	4013      	ands	r3, r2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0bf      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003b04:	4b29      	ldr	r3, [pc, #164]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	4926      	ldr	r1, [pc, #152]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b16:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d105      	bne.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b1e:	4b23      	ldr	r3, [pc, #140]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	4a22      	ldr	r2, [pc, #136]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b28:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d008      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b36:	4b1d      	ldr	r3, [pc, #116]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b3a:	f023 0203 	bic.w	r2, r3, #3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	491a      	ldr	r1, [pc, #104]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0320 	and.w	r3, r3, #32
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d008      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b54:	4b15      	ldr	r3, [pc, #84]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b58:	f023 0210 	bic.w	r2, r3, #16
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	4912      	ldr	r1, [pc, #72]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d008      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b72:	4b0e      	ldr	r3, [pc, #56]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b76:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	490b      	ldr	r1, [pc, #44]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003b90:	4b06      	ldr	r3, [pc, #24]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	4903      	ldr	r1, [pc, #12]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3748      	adds	r7, #72	@ 0x48
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	40007000 	.word	0x40007000
 8003bb4:	10908100 	.word	0x10908100

08003bb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e049      	b.n	8003c5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d106      	bne.n	8003be4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7fd f88e 	bl	8000d00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2202      	movs	r2, #2
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3304      	adds	r3, #4
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4610      	mov	r0, r2
 8003bf8:	f000 fc3c 	bl	8004474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b082      	sub	sp, #8
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e049      	b.n	8003d0c <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d106      	bne.n	8003c92 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 f841 	bl	8003d14 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2202      	movs	r2, #2
 8003c96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	4610      	mov	r0, r2
 8003ca6:	f000 fbe5 	bl	8004474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e049      	b.n	8003dce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d106      	bne.n	8003d54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f841 	bl	8003dd6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3304      	adds	r3, #4
 8003d64:	4619      	mov	r1, r3
 8003d66:	4610      	mov	r0, r2
 8003d68:	f000 fb84 	bl	8004474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
	...

08003dec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d109      	bne.n	8003e10 <HAL_TIM_PWM_Start+0x24>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	bf14      	ite	ne
 8003e08:	2301      	movne	r3, #1
 8003e0a:	2300      	moveq	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	e03c      	b.n	8003e8a <HAL_TIM_PWM_Start+0x9e>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	d109      	bne.n	8003e2a <HAL_TIM_PWM_Start+0x3e>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	bf14      	ite	ne
 8003e22:	2301      	movne	r3, #1
 8003e24:	2300      	moveq	r3, #0
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	e02f      	b.n	8003e8a <HAL_TIM_PWM_Start+0x9e>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d109      	bne.n	8003e44 <HAL_TIM_PWM_Start+0x58>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	bf14      	ite	ne
 8003e3c:	2301      	movne	r3, #1
 8003e3e:	2300      	moveq	r3, #0
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	e022      	b.n	8003e8a <HAL_TIM_PWM_Start+0x9e>
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	2b0c      	cmp	r3, #12
 8003e48:	d109      	bne.n	8003e5e <HAL_TIM_PWM_Start+0x72>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	bf14      	ite	ne
 8003e56:	2301      	movne	r3, #1
 8003e58:	2300      	moveq	r3, #0
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	e015      	b.n	8003e8a <HAL_TIM_PWM_Start+0x9e>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b10      	cmp	r3, #16
 8003e62:	d109      	bne.n	8003e78 <HAL_TIM_PWM_Start+0x8c>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	bf14      	ite	ne
 8003e70:	2301      	movne	r3, #1
 8003e72:	2300      	moveq	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	e008      	b.n	8003e8a <HAL_TIM_PWM_Start+0x9e>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	bf14      	ite	ne
 8003e84:	2301      	movne	r3, #1
 8003e86:	2300      	moveq	r3, #0
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e088      	b.n	8003fa4 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d104      	bne.n	8003ea2 <HAL_TIM_PWM_Start+0xb6>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ea0:	e023      	b.n	8003eea <HAL_TIM_PWM_Start+0xfe>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2b04      	cmp	r3, #4
 8003ea6:	d104      	bne.n	8003eb2 <HAL_TIM_PWM_Start+0xc6>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003eb0:	e01b      	b.n	8003eea <HAL_TIM_PWM_Start+0xfe>
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	d104      	bne.n	8003ec2 <HAL_TIM_PWM_Start+0xd6>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ec0:	e013      	b.n	8003eea <HAL_TIM_PWM_Start+0xfe>
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	2b0c      	cmp	r3, #12
 8003ec6:	d104      	bne.n	8003ed2 <HAL_TIM_PWM_Start+0xe6>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ed0:	e00b      	b.n	8003eea <HAL_TIM_PWM_Start+0xfe>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2b10      	cmp	r3, #16
 8003ed6:	d104      	bne.n	8003ee2 <HAL_TIM_PWM_Start+0xf6>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ee0:	e003      	b.n	8003eea <HAL_TIM_PWM_Start+0xfe>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2202      	movs	r2, #2
 8003ee6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	6839      	ldr	r1, [r7, #0]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 fe82 	bl	8004bfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a2b      	ldr	r2, [pc, #172]	@ (8003fac <HAL_TIM_PWM_Start+0x1c0>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d00e      	beq.n	8003f20 <HAL_TIM_PWM_Start+0x134>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a2a      	ldr	r2, [pc, #168]	@ (8003fb0 <HAL_TIM_PWM_Start+0x1c4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d009      	beq.n	8003f20 <HAL_TIM_PWM_Start+0x134>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a28      	ldr	r2, [pc, #160]	@ (8003fb4 <HAL_TIM_PWM_Start+0x1c8>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d004      	beq.n	8003f20 <HAL_TIM_PWM_Start+0x134>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a27      	ldr	r2, [pc, #156]	@ (8003fb8 <HAL_TIM_PWM_Start+0x1cc>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d101      	bne.n	8003f24 <HAL_TIM_PWM_Start+0x138>
 8003f20:	2301      	movs	r3, #1
 8003f22:	e000      	b.n	8003f26 <HAL_TIM_PWM_Start+0x13a>
 8003f24:	2300      	movs	r3, #0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d007      	beq.n	8003f3a <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f38:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a1b      	ldr	r2, [pc, #108]	@ (8003fac <HAL_TIM_PWM_Start+0x1c0>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d00e      	beq.n	8003f62 <HAL_TIM_PWM_Start+0x176>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f4c:	d009      	beq.n	8003f62 <HAL_TIM_PWM_Start+0x176>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a1a      	ldr	r2, [pc, #104]	@ (8003fbc <HAL_TIM_PWM_Start+0x1d0>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d004      	beq.n	8003f62 <HAL_TIM_PWM_Start+0x176>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a14      	ldr	r2, [pc, #80]	@ (8003fb0 <HAL_TIM_PWM_Start+0x1c4>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d115      	bne.n	8003f8e <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	4b15      	ldr	r3, [pc, #84]	@ (8003fc0 <HAL_TIM_PWM_Start+0x1d4>)
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2b06      	cmp	r3, #6
 8003f72:	d015      	beq.n	8003fa0 <HAL_TIM_PWM_Start+0x1b4>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f7a:	d011      	beq.n	8003fa0 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0201 	orr.w	r2, r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f8c:	e008      	b.n	8003fa0 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f042 0201 	orr.w	r2, r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	e000      	b.n	8003fa2 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	40012c00 	.word	0x40012c00
 8003fb0:	40014000 	.word	0x40014000
 8003fb4:	40014400 	.word	0x40014400
 8003fb8:	40014800 	.word	0x40014800
 8003fbc:	40000400 	.word	0x40000400
 8003fc0:	00010007 	.word	0x00010007

08003fc4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d101      	bne.n	8003fe2 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003fde:	2302      	movs	r3, #2
 8003fe0:	e066      	b.n	80040b0 <HAL_TIM_OC_ConfigChannel+0xec>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b14      	cmp	r3, #20
 8003fee:	d857      	bhi.n	80040a0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8003ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ff8 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff6:	bf00      	nop
 8003ff8:	0800404d 	.word	0x0800404d
 8003ffc:	080040a1 	.word	0x080040a1
 8004000:	080040a1 	.word	0x080040a1
 8004004:	080040a1 	.word	0x080040a1
 8004008:	0800405b 	.word	0x0800405b
 800400c:	080040a1 	.word	0x080040a1
 8004010:	080040a1 	.word	0x080040a1
 8004014:	080040a1 	.word	0x080040a1
 8004018:	08004069 	.word	0x08004069
 800401c:	080040a1 	.word	0x080040a1
 8004020:	080040a1 	.word	0x080040a1
 8004024:	080040a1 	.word	0x080040a1
 8004028:	08004077 	.word	0x08004077
 800402c:	080040a1 	.word	0x080040a1
 8004030:	080040a1 	.word	0x080040a1
 8004034:	080040a1 	.word	0x080040a1
 8004038:	08004085 	.word	0x08004085
 800403c:	080040a1 	.word	0x080040a1
 8004040:	080040a1 	.word	0x080040a1
 8004044:	080040a1 	.word	0x080040a1
 8004048:	08004093 	.word	0x08004093
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68b9      	ldr	r1, [r7, #8]
 8004052:	4618      	mov	r0, r3
 8004054:	f000 fa92 	bl	800457c <TIM_OC1_SetConfig>
      break;
 8004058:	e025      	b.n	80040a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68b9      	ldr	r1, [r7, #8]
 8004060:	4618      	mov	r0, r3
 8004062:	f000 fb11 	bl	8004688 <TIM_OC2_SetConfig>
      break;
 8004066:	e01e      	b.n	80040a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68b9      	ldr	r1, [r7, #8]
 800406e:	4618      	mov	r0, r3
 8004070:	f000 fb8a 	bl	8004788 <TIM_OC3_SetConfig>
      break;
 8004074:	e017      	b.n	80040a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68b9      	ldr	r1, [r7, #8]
 800407c:	4618      	mov	r0, r3
 800407e:	f000 fc01 	bl	8004884 <TIM_OC4_SetConfig>
      break;
 8004082:	e010      	b.n	80040a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68b9      	ldr	r1, [r7, #8]
 800408a:	4618      	mov	r0, r3
 800408c:	f000 fc5e 	bl	800494c <TIM_OC5_SetConfig>
      break;
 8004090:	e009      	b.n	80040a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68b9      	ldr	r1, [r7, #8]
 8004098:	4618      	mov	r0, r3
 800409a:	f000 fcb5 	bl	8004a08 <TIM_OC6_SetConfig>
      break;
 800409e:	e002      	b.n	80040a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	75fb      	strb	r3, [r7, #23]
      break;
 80040a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80040ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3718      	adds	r7, #24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040c4:	2300      	movs	r3, #0
 80040c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d101      	bne.n	80040d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040d2:	2302      	movs	r3, #2
 80040d4:	e0ff      	b.n	80042d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b14      	cmp	r3, #20
 80040e2:	f200 80f0 	bhi.w	80042c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80040e6:	a201      	add	r2, pc, #4	@ (adr r2, 80040ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80040e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ec:	08004141 	.word	0x08004141
 80040f0:	080042c7 	.word	0x080042c7
 80040f4:	080042c7 	.word	0x080042c7
 80040f8:	080042c7 	.word	0x080042c7
 80040fc:	08004181 	.word	0x08004181
 8004100:	080042c7 	.word	0x080042c7
 8004104:	080042c7 	.word	0x080042c7
 8004108:	080042c7 	.word	0x080042c7
 800410c:	080041c3 	.word	0x080041c3
 8004110:	080042c7 	.word	0x080042c7
 8004114:	080042c7 	.word	0x080042c7
 8004118:	080042c7 	.word	0x080042c7
 800411c:	08004203 	.word	0x08004203
 8004120:	080042c7 	.word	0x080042c7
 8004124:	080042c7 	.word	0x080042c7
 8004128:	080042c7 	.word	0x080042c7
 800412c:	08004245 	.word	0x08004245
 8004130:	080042c7 	.word	0x080042c7
 8004134:	080042c7 	.word	0x080042c7
 8004138:	080042c7 	.word	0x080042c7
 800413c:	08004285 	.word	0x08004285
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68b9      	ldr	r1, [r7, #8]
 8004146:	4618      	mov	r0, r3
 8004148:	f000 fa18 	bl	800457c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699a      	ldr	r2, [r3, #24]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0208 	orr.w	r2, r2, #8
 800415a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699a      	ldr	r2, [r3, #24]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 0204 	bic.w	r2, r2, #4
 800416a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6999      	ldr	r1, [r3, #24]
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	691a      	ldr	r2, [r3, #16]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	619a      	str	r2, [r3, #24]
      break;
 800417e:	e0a5      	b.n	80042cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68b9      	ldr	r1, [r7, #8]
 8004186:	4618      	mov	r0, r3
 8004188:	f000 fa7e 	bl	8004688 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	699a      	ldr	r2, [r3, #24]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800419a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	699a      	ldr	r2, [r3, #24]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6999      	ldr	r1, [r3, #24]
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	021a      	lsls	r2, r3, #8
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	430a      	orrs	r2, r1
 80041be:	619a      	str	r2, [r3, #24]
      break;
 80041c0:	e084      	b.n	80042cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68b9      	ldr	r1, [r7, #8]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 fadd 	bl	8004788 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	69da      	ldr	r2, [r3, #28]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f042 0208 	orr.w	r2, r2, #8
 80041dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	69da      	ldr	r2, [r3, #28]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 0204 	bic.w	r2, r2, #4
 80041ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	69d9      	ldr	r1, [r3, #28]
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	691a      	ldr	r2, [r3, #16]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	61da      	str	r2, [r3, #28]
      break;
 8004200:	e064      	b.n	80042cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68b9      	ldr	r1, [r7, #8]
 8004208:	4618      	mov	r0, r3
 800420a:	f000 fb3b 	bl	8004884 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	69da      	ldr	r2, [r3, #28]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800421c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	69da      	ldr	r2, [r3, #28]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800422c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	69d9      	ldr	r1, [r3, #28]
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	021a      	lsls	r2, r3, #8
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	61da      	str	r2, [r3, #28]
      break;
 8004242:	e043      	b.n	80042cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68b9      	ldr	r1, [r7, #8]
 800424a:	4618      	mov	r0, r3
 800424c:	f000 fb7e 	bl	800494c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0208 	orr.w	r2, r2, #8
 800425e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0204 	bic.w	r2, r2, #4
 800426e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	691a      	ldr	r2, [r3, #16]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004282:	e023      	b.n	80042cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68b9      	ldr	r1, [r7, #8]
 800428a:	4618      	mov	r0, r3
 800428c:	f000 fbbc 	bl	8004a08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800429e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042ae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	021a      	lsls	r2, r3, #8
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80042c4:	e002      	b.n	80042cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	75fb      	strb	r3, [r7, #23]
      break;
 80042ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3718      	adds	r7, #24
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop

080042e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042ea:	2300      	movs	r3, #0
 80042ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <HAL_TIM_ConfigClockSource+0x1c>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e0b6      	b.n	800446a <HAL_TIM_ConfigClockSource+0x18a>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2202      	movs	r2, #2
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800431a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800431e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004326:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004338:	d03e      	beq.n	80043b8 <HAL_TIM_ConfigClockSource+0xd8>
 800433a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800433e:	f200 8087 	bhi.w	8004450 <HAL_TIM_ConfigClockSource+0x170>
 8004342:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004346:	f000 8086 	beq.w	8004456 <HAL_TIM_ConfigClockSource+0x176>
 800434a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800434e:	d87f      	bhi.n	8004450 <HAL_TIM_ConfigClockSource+0x170>
 8004350:	2b70      	cmp	r3, #112	@ 0x70
 8004352:	d01a      	beq.n	800438a <HAL_TIM_ConfigClockSource+0xaa>
 8004354:	2b70      	cmp	r3, #112	@ 0x70
 8004356:	d87b      	bhi.n	8004450 <HAL_TIM_ConfigClockSource+0x170>
 8004358:	2b60      	cmp	r3, #96	@ 0x60
 800435a:	d050      	beq.n	80043fe <HAL_TIM_ConfigClockSource+0x11e>
 800435c:	2b60      	cmp	r3, #96	@ 0x60
 800435e:	d877      	bhi.n	8004450 <HAL_TIM_ConfigClockSource+0x170>
 8004360:	2b50      	cmp	r3, #80	@ 0x50
 8004362:	d03c      	beq.n	80043de <HAL_TIM_ConfigClockSource+0xfe>
 8004364:	2b50      	cmp	r3, #80	@ 0x50
 8004366:	d873      	bhi.n	8004450 <HAL_TIM_ConfigClockSource+0x170>
 8004368:	2b40      	cmp	r3, #64	@ 0x40
 800436a:	d058      	beq.n	800441e <HAL_TIM_ConfigClockSource+0x13e>
 800436c:	2b40      	cmp	r3, #64	@ 0x40
 800436e:	d86f      	bhi.n	8004450 <HAL_TIM_ConfigClockSource+0x170>
 8004370:	2b30      	cmp	r3, #48	@ 0x30
 8004372:	d064      	beq.n	800443e <HAL_TIM_ConfigClockSource+0x15e>
 8004374:	2b30      	cmp	r3, #48	@ 0x30
 8004376:	d86b      	bhi.n	8004450 <HAL_TIM_ConfigClockSource+0x170>
 8004378:	2b20      	cmp	r3, #32
 800437a:	d060      	beq.n	800443e <HAL_TIM_ConfigClockSource+0x15e>
 800437c:	2b20      	cmp	r3, #32
 800437e:	d867      	bhi.n	8004450 <HAL_TIM_ConfigClockSource+0x170>
 8004380:	2b00      	cmp	r3, #0
 8004382:	d05c      	beq.n	800443e <HAL_TIM_ConfigClockSource+0x15e>
 8004384:	2b10      	cmp	r3, #16
 8004386:	d05a      	beq.n	800443e <HAL_TIM_ConfigClockSource+0x15e>
 8004388:	e062      	b.n	8004450 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800439a:	f000 fc0f 	bl	8004bbc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80043ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	609a      	str	r2, [r3, #8]
      break;
 80043b6:	e04f      	b.n	8004458 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043c8:	f000 fbf8 	bl	8004bbc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689a      	ldr	r2, [r3, #8]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043da:	609a      	str	r2, [r3, #8]
      break;
 80043dc:	e03c      	b.n	8004458 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ea:	461a      	mov	r2, r3
 80043ec:	f000 fb6c 	bl	8004ac8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2150      	movs	r1, #80	@ 0x50
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 fbc5 	bl	8004b86 <TIM_ITRx_SetConfig>
      break;
 80043fc:	e02c      	b.n	8004458 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800440a:	461a      	mov	r2, r3
 800440c:	f000 fb8b 	bl	8004b26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2160      	movs	r1, #96	@ 0x60
 8004416:	4618      	mov	r0, r3
 8004418:	f000 fbb5 	bl	8004b86 <TIM_ITRx_SetConfig>
      break;
 800441c:	e01c      	b.n	8004458 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800442a:	461a      	mov	r2, r3
 800442c:	f000 fb4c 	bl	8004ac8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2140      	movs	r1, #64	@ 0x40
 8004436:	4618      	mov	r0, r3
 8004438:	f000 fba5 	bl	8004b86 <TIM_ITRx_SetConfig>
      break;
 800443c:	e00c      	b.n	8004458 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4619      	mov	r1, r3
 8004448:	4610      	mov	r0, r2
 800444a:	f000 fb9c 	bl	8004b86 <TIM_ITRx_SetConfig>
      break;
 800444e:	e003      	b.n	8004458 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	73fb      	strb	r3, [r7, #15]
      break;
 8004454:	e000      	b.n	8004458 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004456:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004468:	7bfb      	ldrb	r3, [r7, #15]
}
 800446a:	4618      	mov	r0, r3
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
	...

08004474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a38      	ldr	r2, [pc, #224]	@ (8004568 <TIM_Base_SetConfig+0xf4>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d007      	beq.n	800449c <TIM_Base_SetConfig+0x28>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004492:	d003      	beq.n	800449c <TIM_Base_SetConfig+0x28>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a35      	ldr	r2, [pc, #212]	@ (800456c <TIM_Base_SetConfig+0xf8>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d108      	bne.n	80044ae <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a2d      	ldr	r2, [pc, #180]	@ (8004568 <TIM_Base_SetConfig+0xf4>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d013      	beq.n	80044de <TIM_Base_SetConfig+0x6a>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044bc:	d00f      	beq.n	80044de <TIM_Base_SetConfig+0x6a>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a2a      	ldr	r2, [pc, #168]	@ (800456c <TIM_Base_SetConfig+0xf8>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d00b      	beq.n	80044de <TIM_Base_SetConfig+0x6a>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a29      	ldr	r2, [pc, #164]	@ (8004570 <TIM_Base_SetConfig+0xfc>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d007      	beq.n	80044de <TIM_Base_SetConfig+0x6a>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a28      	ldr	r2, [pc, #160]	@ (8004574 <TIM_Base_SetConfig+0x100>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d003      	beq.n	80044de <TIM_Base_SetConfig+0x6a>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a27      	ldr	r2, [pc, #156]	@ (8004578 <TIM_Base_SetConfig+0x104>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d108      	bne.n	80044f0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a14      	ldr	r2, [pc, #80]	@ (8004568 <TIM_Base_SetConfig+0xf4>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d00b      	beq.n	8004534 <TIM_Base_SetConfig+0xc0>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a14      	ldr	r2, [pc, #80]	@ (8004570 <TIM_Base_SetConfig+0xfc>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d007      	beq.n	8004534 <TIM_Base_SetConfig+0xc0>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a13      	ldr	r2, [pc, #76]	@ (8004574 <TIM_Base_SetConfig+0x100>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d003      	beq.n	8004534 <TIM_Base_SetConfig+0xc0>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a12      	ldr	r2, [pc, #72]	@ (8004578 <TIM_Base_SetConfig+0x104>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d103      	bne.n	800453c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	691a      	ldr	r2, [r3, #16]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b01      	cmp	r3, #1
 800454c:	d105      	bne.n	800455a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	f023 0201 	bic.w	r2, r3, #1
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	611a      	str	r2, [r3, #16]
  }
}
 800455a:	bf00      	nop
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	40012c00 	.word	0x40012c00
 800456c:	40000400 	.word	0x40000400
 8004570:	40014000 	.word	0x40014000
 8004574:	40014400 	.word	0x40014400
 8004578:	40014800 	.word	0x40014800

0800457c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800457c:	b480      	push	{r7}
 800457e:	b087      	sub	sp, #28
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	f023 0201 	bic.w	r2, r3, #1
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f023 0303 	bic.w	r3, r3, #3
 80045b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	4313      	orrs	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f023 0302 	bic.w	r3, r3, #2
 80045c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a28      	ldr	r2, [pc, #160]	@ (8004678 <TIM_OC1_SetConfig+0xfc>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d00b      	beq.n	80045f4 <TIM_OC1_SetConfig+0x78>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a27      	ldr	r2, [pc, #156]	@ (800467c <TIM_OC1_SetConfig+0x100>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d007      	beq.n	80045f4 <TIM_OC1_SetConfig+0x78>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a26      	ldr	r2, [pc, #152]	@ (8004680 <TIM_OC1_SetConfig+0x104>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d003      	beq.n	80045f4 <TIM_OC1_SetConfig+0x78>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a25      	ldr	r2, [pc, #148]	@ (8004684 <TIM_OC1_SetConfig+0x108>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d10c      	bne.n	800460e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f023 0308 	bic.w	r3, r3, #8
 80045fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	4313      	orrs	r3, r2
 8004604:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f023 0304 	bic.w	r3, r3, #4
 800460c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a19      	ldr	r2, [pc, #100]	@ (8004678 <TIM_OC1_SetConfig+0xfc>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d00b      	beq.n	800462e <TIM_OC1_SetConfig+0xb2>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a18      	ldr	r2, [pc, #96]	@ (800467c <TIM_OC1_SetConfig+0x100>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d007      	beq.n	800462e <TIM_OC1_SetConfig+0xb2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a17      	ldr	r2, [pc, #92]	@ (8004680 <TIM_OC1_SetConfig+0x104>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d003      	beq.n	800462e <TIM_OC1_SetConfig+0xb2>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a16      	ldr	r2, [pc, #88]	@ (8004684 <TIM_OC1_SetConfig+0x108>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d111      	bne.n	8004652 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004634:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800463c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	4313      	orrs	r3, r2
 8004646:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	4313      	orrs	r3, r2
 8004650:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	621a      	str	r2, [r3, #32]
}
 800466c:	bf00      	nop
 800466e:	371c      	adds	r7, #28
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	40012c00 	.word	0x40012c00
 800467c:	40014000 	.word	0x40014000
 8004680:	40014400 	.word	0x40014400
 8004684:	40014800 	.word	0x40014800

08004688 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	f023 0210 	bic.w	r2, r3, #16
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	021b      	lsls	r3, r3, #8
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f023 0320 	bic.w	r3, r3, #32
 80046d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	011b      	lsls	r3, r3, #4
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a24      	ldr	r2, [pc, #144]	@ (8004778 <TIM_OC2_SetConfig+0xf0>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d10d      	bne.n	8004708 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	011b      	lsls	r3, r3, #4
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004706:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a1b      	ldr	r2, [pc, #108]	@ (8004778 <TIM_OC2_SetConfig+0xf0>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d00b      	beq.n	8004728 <TIM_OC2_SetConfig+0xa0>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a1a      	ldr	r2, [pc, #104]	@ (800477c <TIM_OC2_SetConfig+0xf4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d007      	beq.n	8004728 <TIM_OC2_SetConfig+0xa0>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a19      	ldr	r2, [pc, #100]	@ (8004780 <TIM_OC2_SetConfig+0xf8>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d003      	beq.n	8004728 <TIM_OC2_SetConfig+0xa0>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a18      	ldr	r2, [pc, #96]	@ (8004784 <TIM_OC2_SetConfig+0xfc>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d113      	bne.n	8004750 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800472e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004736:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	4313      	orrs	r3, r2
 8004742:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	4313      	orrs	r3, r2
 800474e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	621a      	str	r2, [r3, #32]
}
 800476a:	bf00      	nop
 800476c:	371c      	adds	r7, #28
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	40012c00 	.word	0x40012c00
 800477c:	40014000 	.word	0x40014000
 8004780:	40014400 	.word	0x40014400
 8004784:	40014800 	.word	0x40014800

08004788 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004788:	b480      	push	{r7}
 800478a:	b087      	sub	sp, #28
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f023 0303 	bic.w	r3, r3, #3
 80047c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80047d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	021b      	lsls	r3, r3, #8
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	4313      	orrs	r3, r2
 80047e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a23      	ldr	r2, [pc, #140]	@ (8004874 <TIM_OC3_SetConfig+0xec>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d10d      	bne.n	8004806 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80047f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	021b      	lsls	r3, r3, #8
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004804:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a1a      	ldr	r2, [pc, #104]	@ (8004874 <TIM_OC3_SetConfig+0xec>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d00b      	beq.n	8004826 <TIM_OC3_SetConfig+0x9e>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a19      	ldr	r2, [pc, #100]	@ (8004878 <TIM_OC3_SetConfig+0xf0>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d007      	beq.n	8004826 <TIM_OC3_SetConfig+0x9e>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a18      	ldr	r2, [pc, #96]	@ (800487c <TIM_OC3_SetConfig+0xf4>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d003      	beq.n	8004826 <TIM_OC3_SetConfig+0x9e>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a17      	ldr	r2, [pc, #92]	@ (8004880 <TIM_OC3_SetConfig+0xf8>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d113      	bne.n	800484e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800482c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004834:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	011b      	lsls	r3, r3, #4
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	4313      	orrs	r3, r2
 8004840:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	011b      	lsls	r3, r3, #4
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	4313      	orrs	r3, r2
 800484c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	621a      	str	r2, [r3, #32]
}
 8004868:	bf00      	nop
 800486a:	371c      	adds	r7, #28
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr
 8004874:	40012c00 	.word	0x40012c00
 8004878:	40014000 	.word	0x40014000
 800487c:	40014400 	.word	0x40014400
 8004880:	40014800 	.word	0x40014800

08004884 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004884:	b480      	push	{r7}
 8004886:	b087      	sub	sp, #28
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	021b      	lsls	r3, r3, #8
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80048d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	031b      	lsls	r3, r3, #12
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	4313      	orrs	r3, r2
 80048de:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a16      	ldr	r2, [pc, #88]	@ (800493c <TIM_OC4_SetConfig+0xb8>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d00b      	beq.n	8004900 <TIM_OC4_SetConfig+0x7c>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a15      	ldr	r2, [pc, #84]	@ (8004940 <TIM_OC4_SetConfig+0xbc>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d007      	beq.n	8004900 <TIM_OC4_SetConfig+0x7c>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a14      	ldr	r2, [pc, #80]	@ (8004944 <TIM_OC4_SetConfig+0xc0>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d003      	beq.n	8004900 <TIM_OC4_SetConfig+0x7c>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a13      	ldr	r2, [pc, #76]	@ (8004948 <TIM_OC4_SetConfig+0xc4>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d109      	bne.n	8004914 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004906:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	019b      	lsls	r3, r3, #6
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	4313      	orrs	r3, r2
 8004912:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	621a      	str	r2, [r3, #32]
}
 800492e:	bf00      	nop
 8004930:	371c      	adds	r7, #28
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	40012c00 	.word	0x40012c00
 8004940:	40014000 	.word	0x40014000
 8004944:	40014400 	.word	0x40014400
 8004948:	40014800 	.word	0x40014800

0800494c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800494c:	b480      	push	{r7}
 800494e:	b087      	sub	sp, #28
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800497a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800497e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	4313      	orrs	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004990:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	041b      	lsls	r3, r3, #16
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	4313      	orrs	r3, r2
 800499c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a15      	ldr	r2, [pc, #84]	@ (80049f8 <TIM_OC5_SetConfig+0xac>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d00b      	beq.n	80049be <TIM_OC5_SetConfig+0x72>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a14      	ldr	r2, [pc, #80]	@ (80049fc <TIM_OC5_SetConfig+0xb0>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d007      	beq.n	80049be <TIM_OC5_SetConfig+0x72>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a13      	ldr	r2, [pc, #76]	@ (8004a00 <TIM_OC5_SetConfig+0xb4>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d003      	beq.n	80049be <TIM_OC5_SetConfig+0x72>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a12      	ldr	r2, [pc, #72]	@ (8004a04 <TIM_OC5_SetConfig+0xb8>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d109      	bne.n	80049d2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	021b      	lsls	r3, r3, #8
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	621a      	str	r2, [r3, #32]
}
 80049ec:	bf00      	nop
 80049ee:	371c      	adds	r7, #28
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr
 80049f8:	40012c00 	.word	0x40012c00
 80049fc:	40014000 	.word	0x40014000
 8004a00:	40014400 	.word	0x40014400
 8004a04:	40014800 	.word	0x40014800

08004a08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b087      	sub	sp, #28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	021b      	lsls	r3, r3, #8
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004a4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	051b      	lsls	r3, r3, #20
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a16      	ldr	r2, [pc, #88]	@ (8004ab8 <TIM_OC6_SetConfig+0xb0>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d00b      	beq.n	8004a7c <TIM_OC6_SetConfig+0x74>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a15      	ldr	r2, [pc, #84]	@ (8004abc <TIM_OC6_SetConfig+0xb4>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d007      	beq.n	8004a7c <TIM_OC6_SetConfig+0x74>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a14      	ldr	r2, [pc, #80]	@ (8004ac0 <TIM_OC6_SetConfig+0xb8>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d003      	beq.n	8004a7c <TIM_OC6_SetConfig+0x74>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a13      	ldr	r2, [pc, #76]	@ (8004ac4 <TIM_OC6_SetConfig+0xbc>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d109      	bne.n	8004a90 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	029b      	lsls	r3, r3, #10
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	621a      	str	r2, [r3, #32]
}
 8004aaa:	bf00      	nop
 8004aac:	371c      	adds	r7, #28
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	40012c00 	.word	0x40012c00
 8004abc:	40014000 	.word	0x40014000
 8004ac0:	40014400 	.word	0x40014400
 8004ac4:	40014800 	.word	0x40014800

08004ac8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	f023 0201 	bic.w	r2, r3, #1
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004af2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	011b      	lsls	r3, r3, #4
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f023 030a 	bic.w	r3, r3, #10
 8004b04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	621a      	str	r2, [r3, #32]
}
 8004b1a:	bf00      	nop
 8004b1c:	371c      	adds	r7, #28
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b26:	b480      	push	{r7}
 8004b28:	b087      	sub	sp, #28
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	60f8      	str	r0, [r7, #12]
 8004b2e:	60b9      	str	r1, [r7, #8]
 8004b30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
 8004b3c:	f023 0210 	bic.w	r2, r3, #16
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	031b      	lsls	r3, r3, #12
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b62:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	011b      	lsls	r3, r3, #4
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	621a      	str	r2, [r3, #32]
}
 8004b7a:	bf00      	nop
 8004b7c:	371c      	adds	r7, #28
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b085      	sub	sp, #20
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
 8004b8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	f043 0307 	orr.w	r3, r3, #7
 8004ba8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	609a      	str	r2, [r3, #8]
}
 8004bb0:	bf00      	nop
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b087      	sub	sp, #28
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
 8004bc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	021a      	lsls	r2, r3, #8
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	431a      	orrs	r2, r3
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	609a      	str	r2, [r3, #8]
}
 8004bf0:	bf00      	nop
 8004bf2:	371c      	adds	r7, #28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f003 031f 	and.w	r3, r3, #31
 8004c0e:	2201      	movs	r2, #1
 8004c10:	fa02 f303 	lsl.w	r3, r2, r3
 8004c14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6a1a      	ldr	r2, [r3, #32]
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	43db      	mvns	r3, r3
 8004c1e:	401a      	ands	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6a1a      	ldr	r2, [r3, #32]
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	f003 031f 	and.w	r3, r3, #31
 8004c2e:	6879      	ldr	r1, [r7, #4]
 8004c30:	fa01 f303 	lsl.w	r3, r1, r3
 8004c34:	431a      	orrs	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	621a      	str	r2, [r3, #32]
}
 8004c3a:	bf00      	nop
 8004c3c:	371c      	adds	r7, #28
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
	...

08004c48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d101      	bne.n	8004c60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	e054      	b.n	8004d0a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a24      	ldr	r2, [pc, #144]	@ (8004d18 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d108      	bne.n	8004c9c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004c90:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ca2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a17      	ldr	r2, [pc, #92]	@ (8004d18 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d00e      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cc8:	d009      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a13      	ldr	r2, [pc, #76]	@ (8004d1c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d004      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a11      	ldr	r2, [pc, #68]	@ (8004d20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d10c      	bne.n	8004cf8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ce4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	40012c00 	.word	0x40012c00
 8004d1c:	40000400 	.word	0x40000400
 8004d20:	40014000 	.word	0x40014000

08004d24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	e060      	b.n	8004e02 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da6:	4313      	orrs	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	041b      	lsls	r3, r3, #16
 8004db6:	4313      	orrs	r3, r2
 8004db8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a14      	ldr	r2, [pc, #80]	@ (8004e10 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d115      	bne.n	8004df0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dce:	051b      	lsls	r3, r3, #20
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	40012c00 	.word	0x40012c00

08004e14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e040      	b.n	8004ea8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d106      	bne.n	8004e3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7fc f88e 	bl	8000f58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2224      	movs	r2, #36	@ 0x24
 8004e40:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 0201 	bic.w	r2, r2, #1
 8004e50:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d002      	beq.n	8004e60 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f9e8 	bl	8005230 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 f8af 	bl	8004fc4 <UART_SetConfig>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d101      	bne.n	8004e70 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e01b      	b.n	8004ea8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f042 0201 	orr.w	r2, r2, #1
 8004e9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 fa67 	bl	8005374 <UART_CheckIdleState>
 8004ea6:	4603      	mov	r3, r0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3708      	adds	r7, #8
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b08a      	sub	sp, #40	@ 0x28
 8004eb4:	af02      	add	r7, sp, #8
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	603b      	str	r3, [r7, #0]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ec4:	2b20      	cmp	r3, #32
 8004ec6:	d177      	bne.n	8004fb8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d002      	beq.n	8004ed4 <HAL_UART_Transmit+0x24>
 8004ece:	88fb      	ldrh	r3, [r7, #6]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d101      	bne.n	8004ed8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e070      	b.n	8004fba <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2221      	movs	r2, #33	@ 0x21
 8004ee4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ee6:	f7fc f9d1 	bl	800128c <HAL_GetTick>
 8004eea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	88fa      	ldrh	r2, [r7, #6]
 8004ef0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	88fa      	ldrh	r2, [r7, #6]
 8004ef8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f04:	d108      	bne.n	8004f18 <HAL_UART_Transmit+0x68>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d104      	bne.n	8004f18 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	61bb      	str	r3, [r7, #24]
 8004f16:	e003      	b.n	8004f20 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f20:	e02f      	b.n	8004f82 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	2180      	movs	r1, #128	@ 0x80
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f000 fac9 	bl	80054c4 <UART_WaitOnFlagUntilTimeout>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d004      	beq.n	8004f42 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2220      	movs	r2, #32
 8004f3c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e03b      	b.n	8004fba <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10b      	bne.n	8004f60 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	881a      	ldrh	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f54:	b292      	uxth	r2, r2
 8004f56:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	3302      	adds	r3, #2
 8004f5c:	61bb      	str	r3, [r7, #24]
 8004f5e:	e007      	b.n	8004f70 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	781a      	ldrb	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1c9      	bne.n	8004f22 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	2200      	movs	r2, #0
 8004f96:	2140      	movs	r1, #64	@ 0x40
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f000 fa93 	bl	80054c4 <UART_WaitOnFlagUntilTimeout>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d004      	beq.n	8004fae <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e005      	b.n	8004fba <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	e000      	b.n	8004fba <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004fb8:	2302      	movs	r3, #2
  }
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3720      	adds	r7, #32
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
	...

08004fc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b088      	sub	sp, #32
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689a      	ldr	r2, [r3, #8]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	4b8a      	ldr	r3, [pc, #552]	@ (8005218 <UART_SetConfig+0x254>)
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	6812      	ldr	r2, [r2, #0]
 8004ff6:	6979      	ldr	r1, [r7, #20]
 8004ff8:	430b      	orrs	r3, r1
 8004ffa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68da      	ldr	r2, [r3, #12]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	430a      	orrs	r2, r1
 8005010:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	430a      	orrs	r2, r1
 8005034:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a78      	ldr	r2, [pc, #480]	@ (800521c <UART_SetConfig+0x258>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d120      	bne.n	8005082 <UART_SetConfig+0xbe>
 8005040:	4b77      	ldr	r3, [pc, #476]	@ (8005220 <UART_SetConfig+0x25c>)
 8005042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005044:	f003 0303 	and.w	r3, r3, #3
 8005048:	2b03      	cmp	r3, #3
 800504a:	d817      	bhi.n	800507c <UART_SetConfig+0xb8>
 800504c:	a201      	add	r2, pc, #4	@ (adr r2, 8005054 <UART_SetConfig+0x90>)
 800504e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005052:	bf00      	nop
 8005054:	08005065 	.word	0x08005065
 8005058:	08005071 	.word	0x08005071
 800505c:	08005077 	.word	0x08005077
 8005060:	0800506b 	.word	0x0800506b
 8005064:	2300      	movs	r3, #0
 8005066:	77fb      	strb	r3, [r7, #31]
 8005068:	e01d      	b.n	80050a6 <UART_SetConfig+0xe2>
 800506a:	2302      	movs	r3, #2
 800506c:	77fb      	strb	r3, [r7, #31]
 800506e:	e01a      	b.n	80050a6 <UART_SetConfig+0xe2>
 8005070:	2304      	movs	r3, #4
 8005072:	77fb      	strb	r3, [r7, #31]
 8005074:	e017      	b.n	80050a6 <UART_SetConfig+0xe2>
 8005076:	2308      	movs	r3, #8
 8005078:	77fb      	strb	r3, [r7, #31]
 800507a:	e014      	b.n	80050a6 <UART_SetConfig+0xe2>
 800507c:	2310      	movs	r3, #16
 800507e:	77fb      	strb	r3, [r7, #31]
 8005080:	e011      	b.n	80050a6 <UART_SetConfig+0xe2>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a67      	ldr	r2, [pc, #412]	@ (8005224 <UART_SetConfig+0x260>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d102      	bne.n	8005092 <UART_SetConfig+0xce>
 800508c:	2300      	movs	r3, #0
 800508e:	77fb      	strb	r3, [r7, #31]
 8005090:	e009      	b.n	80050a6 <UART_SetConfig+0xe2>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a64      	ldr	r2, [pc, #400]	@ (8005228 <UART_SetConfig+0x264>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d102      	bne.n	80050a2 <UART_SetConfig+0xde>
 800509c:	2300      	movs	r3, #0
 800509e:	77fb      	strb	r3, [r7, #31]
 80050a0:	e001      	b.n	80050a6 <UART_SetConfig+0xe2>
 80050a2:	2310      	movs	r3, #16
 80050a4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050ae:	d15a      	bne.n	8005166 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80050b0:	7ffb      	ldrb	r3, [r7, #31]
 80050b2:	2b08      	cmp	r3, #8
 80050b4:	d827      	bhi.n	8005106 <UART_SetConfig+0x142>
 80050b6:	a201      	add	r2, pc, #4	@ (adr r2, 80050bc <UART_SetConfig+0xf8>)
 80050b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050bc:	080050e1 	.word	0x080050e1
 80050c0:	080050e9 	.word	0x080050e9
 80050c4:	080050f1 	.word	0x080050f1
 80050c8:	08005107 	.word	0x08005107
 80050cc:	080050f7 	.word	0x080050f7
 80050d0:	08005107 	.word	0x08005107
 80050d4:	08005107 	.word	0x08005107
 80050d8:	08005107 	.word	0x08005107
 80050dc:	080050ff 	.word	0x080050ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050e0:	f7fe fc02 	bl	80038e8 <HAL_RCC_GetPCLK1Freq>
 80050e4:	61b8      	str	r0, [r7, #24]
        break;
 80050e6:	e013      	b.n	8005110 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050e8:	f7fe fc20 	bl	800392c <HAL_RCC_GetPCLK2Freq>
 80050ec:	61b8      	str	r0, [r7, #24]
        break;
 80050ee:	e00f      	b.n	8005110 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050f0:	4b4e      	ldr	r3, [pc, #312]	@ (800522c <UART_SetConfig+0x268>)
 80050f2:	61bb      	str	r3, [r7, #24]
        break;
 80050f4:	e00c      	b.n	8005110 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050f6:	f7fe fb97 	bl	8003828 <HAL_RCC_GetSysClockFreq>
 80050fa:	61b8      	str	r0, [r7, #24]
        break;
 80050fc:	e008      	b.n	8005110 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005102:	61bb      	str	r3, [r7, #24]
        break;
 8005104:	e004      	b.n	8005110 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005106:	2300      	movs	r3, #0
 8005108:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	77bb      	strb	r3, [r7, #30]
        break;
 800510e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d074      	beq.n	8005200 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	005a      	lsls	r2, r3, #1
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	085b      	lsrs	r3, r3, #1
 8005120:	441a      	add	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	fbb2 f3f3 	udiv	r3, r2, r3
 800512a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	2b0f      	cmp	r3, #15
 8005130:	d916      	bls.n	8005160 <UART_SetConfig+0x19c>
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005138:	d212      	bcs.n	8005160 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	b29b      	uxth	r3, r3
 800513e:	f023 030f 	bic.w	r3, r3, #15
 8005142:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	085b      	lsrs	r3, r3, #1
 8005148:	b29b      	uxth	r3, r3
 800514a:	f003 0307 	and.w	r3, r3, #7
 800514e:	b29a      	uxth	r2, r3
 8005150:	89fb      	ldrh	r3, [r7, #14]
 8005152:	4313      	orrs	r3, r2
 8005154:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	89fa      	ldrh	r2, [r7, #14]
 800515c:	60da      	str	r2, [r3, #12]
 800515e:	e04f      	b.n	8005200 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	77bb      	strb	r3, [r7, #30]
 8005164:	e04c      	b.n	8005200 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005166:	7ffb      	ldrb	r3, [r7, #31]
 8005168:	2b08      	cmp	r3, #8
 800516a:	d828      	bhi.n	80051be <UART_SetConfig+0x1fa>
 800516c:	a201      	add	r2, pc, #4	@ (adr r2, 8005174 <UART_SetConfig+0x1b0>)
 800516e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005172:	bf00      	nop
 8005174:	08005199 	.word	0x08005199
 8005178:	080051a1 	.word	0x080051a1
 800517c:	080051a9 	.word	0x080051a9
 8005180:	080051bf 	.word	0x080051bf
 8005184:	080051af 	.word	0x080051af
 8005188:	080051bf 	.word	0x080051bf
 800518c:	080051bf 	.word	0x080051bf
 8005190:	080051bf 	.word	0x080051bf
 8005194:	080051b7 	.word	0x080051b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005198:	f7fe fba6 	bl	80038e8 <HAL_RCC_GetPCLK1Freq>
 800519c:	61b8      	str	r0, [r7, #24]
        break;
 800519e:	e013      	b.n	80051c8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051a0:	f7fe fbc4 	bl	800392c <HAL_RCC_GetPCLK2Freq>
 80051a4:	61b8      	str	r0, [r7, #24]
        break;
 80051a6:	e00f      	b.n	80051c8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051a8:	4b20      	ldr	r3, [pc, #128]	@ (800522c <UART_SetConfig+0x268>)
 80051aa:	61bb      	str	r3, [r7, #24]
        break;
 80051ac:	e00c      	b.n	80051c8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ae:	f7fe fb3b 	bl	8003828 <HAL_RCC_GetSysClockFreq>
 80051b2:	61b8      	str	r0, [r7, #24]
        break;
 80051b4:	e008      	b.n	80051c8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051ba:	61bb      	str	r3, [r7, #24]
        break;
 80051bc:	e004      	b.n	80051c8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80051be:	2300      	movs	r3, #0
 80051c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	77bb      	strb	r3, [r7, #30]
        break;
 80051c6:	bf00      	nop
    }

    if (pclk != 0U)
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d018      	beq.n	8005200 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	085a      	lsrs	r2, r3, #1
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	441a      	add	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	2b0f      	cmp	r3, #15
 80051e6:	d909      	bls.n	80051fc <UART_SetConfig+0x238>
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051ee:	d205      	bcs.n	80051fc <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	60da      	str	r2, [r3, #12]
 80051fa:	e001      	b.n	8005200 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800520c:	7fbb      	ldrb	r3, [r7, #30]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3720      	adds	r7, #32
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	efff69f3 	.word	0xefff69f3
 800521c:	40013800 	.word	0x40013800
 8005220:	40021000 	.word	0x40021000
 8005224:	40004400 	.word	0x40004400
 8005228:	40004800 	.word	0x40004800
 800522c:	007a1200 	.word	0x007a1200

08005230 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523c:	f003 0308 	and.w	r3, r3, #8
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00a      	beq.n	800525a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	430a      	orrs	r2, r1
 8005258:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00a      	beq.n	800527c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	430a      	orrs	r2, r1
 800527a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00a      	beq.n	800529e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a2:	f003 0304 	and.w	r3, r3, #4
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c4:	f003 0310 	and.w	r3, r3, #16
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00a      	beq.n	80052e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e6:	f003 0320 	and.w	r3, r3, #32
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00a      	beq.n	8005304 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800530c:	2b00      	cmp	r3, #0
 800530e:	d01a      	beq.n	8005346 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800532a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800532e:	d10a      	bne.n	8005346 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00a      	beq.n	8005368 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	605a      	str	r2, [r3, #4]
  }
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b098      	sub	sp, #96	@ 0x60
 8005378:	af02      	add	r7, sp, #8
 800537a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005384:	f7fb ff82 	bl	800128c <HAL_GetTick>
 8005388:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0308 	and.w	r3, r3, #8
 8005394:	2b08      	cmp	r3, #8
 8005396:	d12e      	bne.n	80053f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005398:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053a0:	2200      	movs	r2, #0
 80053a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f88c 	bl	80054c4 <UART_WaitOnFlagUntilTimeout>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d021      	beq.n	80053f6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ba:	e853 3f00 	ldrex	r3, [r3]
 80053be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	461a      	mov	r2, r3
 80053ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80053d2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053d8:	e841 2300 	strex	r3, r2, [r1]
 80053dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1e6      	bne.n	80053b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2220      	movs	r2, #32
 80053e8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e062      	b.n	80054bc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0304 	and.w	r3, r3, #4
 8005400:	2b04      	cmp	r3, #4
 8005402:	d149      	bne.n	8005498 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005404:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800540c:	2200      	movs	r2, #0
 800540e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f856 	bl	80054c4 <UART_WaitOnFlagUntilTimeout>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d03c      	beq.n	8005498 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005426:	e853 3f00 	ldrex	r3, [r3]
 800542a:	623b      	str	r3, [r7, #32]
   return(result);
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005432:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	461a      	mov	r2, r3
 800543a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800543c:	633b      	str	r3, [r7, #48]	@ 0x30
 800543e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005440:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005442:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005444:	e841 2300 	strex	r3, r2, [r1]
 8005448:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800544a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1e6      	bne.n	800541e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	3308      	adds	r3, #8
 8005456:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	e853 3f00 	ldrex	r3, [r3]
 800545e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f023 0301 	bic.w	r3, r3, #1
 8005466:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3308      	adds	r3, #8
 800546e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005470:	61fa      	str	r2, [r7, #28]
 8005472:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005474:	69b9      	ldr	r1, [r7, #24]
 8005476:	69fa      	ldr	r2, [r7, #28]
 8005478:	e841 2300 	strex	r3, r2, [r1]
 800547c:	617b      	str	r3, [r7, #20]
   return(result);
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1e5      	bne.n	8005450 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2220      	movs	r2, #32
 8005488:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e011      	b.n	80054bc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2220      	movs	r2, #32
 800549c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2220      	movs	r2, #32
 80054a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3758      	adds	r7, #88	@ 0x58
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	603b      	str	r3, [r7, #0]
 80054d0:	4613      	mov	r3, r2
 80054d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054d4:	e04f      	b.n	8005576 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054dc:	d04b      	beq.n	8005576 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054de:	f7fb fed5 	bl	800128c <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d302      	bcc.n	80054f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e04e      	b.n	8005596 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0304 	and.w	r3, r3, #4
 8005502:	2b00      	cmp	r3, #0
 8005504:	d037      	beq.n	8005576 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	2b80      	cmp	r3, #128	@ 0x80
 800550a:	d034      	beq.n	8005576 <UART_WaitOnFlagUntilTimeout+0xb2>
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	2b40      	cmp	r3, #64	@ 0x40
 8005510:	d031      	beq.n	8005576 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	f003 0308 	and.w	r3, r3, #8
 800551c:	2b08      	cmp	r3, #8
 800551e:	d110      	bne.n	8005542 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2208      	movs	r2, #8
 8005526:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f000 f838 	bl	800559e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2208      	movs	r2, #8
 8005532:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e029      	b.n	8005596 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800554c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005550:	d111      	bne.n	8005576 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800555a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 f81e 	bl	800559e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2220      	movs	r2, #32
 8005566:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e00f      	b.n	8005596 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	69da      	ldr	r2, [r3, #28]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	4013      	ands	r3, r2
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	429a      	cmp	r2, r3
 8005584:	bf0c      	ite	eq
 8005586:	2301      	moveq	r3, #1
 8005588:	2300      	movne	r3, #0
 800558a:	b2db      	uxtb	r3, r3
 800558c:	461a      	mov	r2, r3
 800558e:	79fb      	ldrb	r3, [r7, #7]
 8005590:	429a      	cmp	r2, r3
 8005592:	d0a0      	beq.n	80054d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800559e:	b480      	push	{r7}
 80055a0:	b095      	sub	sp, #84	@ 0x54
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ae:	e853 3f00 	ldrex	r3, [r3]
 80055b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	461a      	mov	r2, r3
 80055c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80055c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80055ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055cc:	e841 2300 	strex	r3, r2, [r1]
 80055d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80055d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1e6      	bne.n	80055a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3308      	adds	r3, #8
 80055de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e0:	6a3b      	ldr	r3, [r7, #32]
 80055e2:	e853 3f00 	ldrex	r3, [r3]
 80055e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	f023 0301 	bic.w	r3, r3, #1
 80055ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	3308      	adds	r3, #8
 80055f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005600:	e841 2300 	strex	r3, r2, [r1]
 8005604:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1e5      	bne.n	80055d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005610:	2b01      	cmp	r3, #1
 8005612:	d118      	bne.n	8005646 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	e853 3f00 	ldrex	r3, [r3]
 8005620:	60bb      	str	r3, [r7, #8]
   return(result);
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f023 0310 	bic.w	r3, r3, #16
 8005628:	647b      	str	r3, [r7, #68]	@ 0x44
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005632:	61bb      	str	r3, [r7, #24]
 8005634:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005636:	6979      	ldr	r1, [r7, #20]
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	e841 2300 	strex	r3, r2, [r1]
 800563e:	613b      	str	r3, [r7, #16]
   return(result);
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1e6      	bne.n	8005614 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2220      	movs	r2, #32
 800564a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800565a:	bf00      	nop
 800565c:	3754      	adds	r7, #84	@ 0x54
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
	...

08005668 <std>:
 8005668:	2300      	movs	r3, #0
 800566a:	b510      	push	{r4, lr}
 800566c:	4604      	mov	r4, r0
 800566e:	e9c0 3300 	strd	r3, r3, [r0]
 8005672:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005676:	6083      	str	r3, [r0, #8]
 8005678:	8181      	strh	r1, [r0, #12]
 800567a:	6643      	str	r3, [r0, #100]	@ 0x64
 800567c:	81c2      	strh	r2, [r0, #14]
 800567e:	6183      	str	r3, [r0, #24]
 8005680:	4619      	mov	r1, r3
 8005682:	2208      	movs	r2, #8
 8005684:	305c      	adds	r0, #92	@ 0x5c
 8005686:	f000 fab5 	bl	8005bf4 <memset>
 800568a:	4b0d      	ldr	r3, [pc, #52]	@ (80056c0 <std+0x58>)
 800568c:	6263      	str	r3, [r4, #36]	@ 0x24
 800568e:	4b0d      	ldr	r3, [pc, #52]	@ (80056c4 <std+0x5c>)
 8005690:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005692:	4b0d      	ldr	r3, [pc, #52]	@ (80056c8 <std+0x60>)
 8005694:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005696:	4b0d      	ldr	r3, [pc, #52]	@ (80056cc <std+0x64>)
 8005698:	6323      	str	r3, [r4, #48]	@ 0x30
 800569a:	4b0d      	ldr	r3, [pc, #52]	@ (80056d0 <std+0x68>)
 800569c:	6224      	str	r4, [r4, #32]
 800569e:	429c      	cmp	r4, r3
 80056a0:	d006      	beq.n	80056b0 <std+0x48>
 80056a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80056a6:	4294      	cmp	r4, r2
 80056a8:	d002      	beq.n	80056b0 <std+0x48>
 80056aa:	33d0      	adds	r3, #208	@ 0xd0
 80056ac:	429c      	cmp	r4, r3
 80056ae:	d105      	bne.n	80056bc <std+0x54>
 80056b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80056b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056b8:	f000 bb14 	b.w	8005ce4 <__retarget_lock_init_recursive>
 80056bc:	bd10      	pop	{r4, pc}
 80056be:	bf00      	nop
 80056c0:	08005a45 	.word	0x08005a45
 80056c4:	08005a67 	.word	0x08005a67
 80056c8:	08005a9f 	.word	0x08005a9f
 80056cc:	08005ac3 	.word	0x08005ac3
 80056d0:	2000027c 	.word	0x2000027c

080056d4 <stdio_exit_handler>:
 80056d4:	4a02      	ldr	r2, [pc, #8]	@ (80056e0 <stdio_exit_handler+0xc>)
 80056d6:	4903      	ldr	r1, [pc, #12]	@ (80056e4 <stdio_exit_handler+0x10>)
 80056d8:	4803      	ldr	r0, [pc, #12]	@ (80056e8 <stdio_exit_handler+0x14>)
 80056da:	f000 b869 	b.w	80057b0 <_fwalk_sglue>
 80056de:	bf00      	nop
 80056e0:	2000000c 	.word	0x2000000c
 80056e4:	08006591 	.word	0x08006591
 80056e8:	2000001c 	.word	0x2000001c

080056ec <cleanup_stdio>:
 80056ec:	6841      	ldr	r1, [r0, #4]
 80056ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005720 <cleanup_stdio+0x34>)
 80056f0:	4299      	cmp	r1, r3
 80056f2:	b510      	push	{r4, lr}
 80056f4:	4604      	mov	r4, r0
 80056f6:	d001      	beq.n	80056fc <cleanup_stdio+0x10>
 80056f8:	f000 ff4a 	bl	8006590 <_fflush_r>
 80056fc:	68a1      	ldr	r1, [r4, #8]
 80056fe:	4b09      	ldr	r3, [pc, #36]	@ (8005724 <cleanup_stdio+0x38>)
 8005700:	4299      	cmp	r1, r3
 8005702:	d002      	beq.n	800570a <cleanup_stdio+0x1e>
 8005704:	4620      	mov	r0, r4
 8005706:	f000 ff43 	bl	8006590 <_fflush_r>
 800570a:	68e1      	ldr	r1, [r4, #12]
 800570c:	4b06      	ldr	r3, [pc, #24]	@ (8005728 <cleanup_stdio+0x3c>)
 800570e:	4299      	cmp	r1, r3
 8005710:	d004      	beq.n	800571c <cleanup_stdio+0x30>
 8005712:	4620      	mov	r0, r4
 8005714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005718:	f000 bf3a 	b.w	8006590 <_fflush_r>
 800571c:	bd10      	pop	{r4, pc}
 800571e:	bf00      	nop
 8005720:	2000027c 	.word	0x2000027c
 8005724:	200002e4 	.word	0x200002e4
 8005728:	2000034c 	.word	0x2000034c

0800572c <global_stdio_init.part.0>:
 800572c:	b510      	push	{r4, lr}
 800572e:	4b0b      	ldr	r3, [pc, #44]	@ (800575c <global_stdio_init.part.0+0x30>)
 8005730:	4c0b      	ldr	r4, [pc, #44]	@ (8005760 <global_stdio_init.part.0+0x34>)
 8005732:	4a0c      	ldr	r2, [pc, #48]	@ (8005764 <global_stdio_init.part.0+0x38>)
 8005734:	601a      	str	r2, [r3, #0]
 8005736:	4620      	mov	r0, r4
 8005738:	2200      	movs	r2, #0
 800573a:	2104      	movs	r1, #4
 800573c:	f7ff ff94 	bl	8005668 <std>
 8005740:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005744:	2201      	movs	r2, #1
 8005746:	2109      	movs	r1, #9
 8005748:	f7ff ff8e 	bl	8005668 <std>
 800574c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005750:	2202      	movs	r2, #2
 8005752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005756:	2112      	movs	r1, #18
 8005758:	f7ff bf86 	b.w	8005668 <std>
 800575c:	200003b4 	.word	0x200003b4
 8005760:	2000027c 	.word	0x2000027c
 8005764:	080056d5 	.word	0x080056d5

08005768 <__sfp_lock_acquire>:
 8005768:	4801      	ldr	r0, [pc, #4]	@ (8005770 <__sfp_lock_acquire+0x8>)
 800576a:	f000 babc 	b.w	8005ce6 <__retarget_lock_acquire_recursive>
 800576e:	bf00      	nop
 8005770:	200003bd 	.word	0x200003bd

08005774 <__sfp_lock_release>:
 8005774:	4801      	ldr	r0, [pc, #4]	@ (800577c <__sfp_lock_release+0x8>)
 8005776:	f000 bab7 	b.w	8005ce8 <__retarget_lock_release_recursive>
 800577a:	bf00      	nop
 800577c:	200003bd 	.word	0x200003bd

08005780 <__sinit>:
 8005780:	b510      	push	{r4, lr}
 8005782:	4604      	mov	r4, r0
 8005784:	f7ff fff0 	bl	8005768 <__sfp_lock_acquire>
 8005788:	6a23      	ldr	r3, [r4, #32]
 800578a:	b11b      	cbz	r3, 8005794 <__sinit+0x14>
 800578c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005790:	f7ff bff0 	b.w	8005774 <__sfp_lock_release>
 8005794:	4b04      	ldr	r3, [pc, #16]	@ (80057a8 <__sinit+0x28>)
 8005796:	6223      	str	r3, [r4, #32]
 8005798:	4b04      	ldr	r3, [pc, #16]	@ (80057ac <__sinit+0x2c>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1f5      	bne.n	800578c <__sinit+0xc>
 80057a0:	f7ff ffc4 	bl	800572c <global_stdio_init.part.0>
 80057a4:	e7f2      	b.n	800578c <__sinit+0xc>
 80057a6:	bf00      	nop
 80057a8:	080056ed 	.word	0x080056ed
 80057ac:	200003b4 	.word	0x200003b4

080057b0 <_fwalk_sglue>:
 80057b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057b4:	4607      	mov	r7, r0
 80057b6:	4688      	mov	r8, r1
 80057b8:	4614      	mov	r4, r2
 80057ba:	2600      	movs	r6, #0
 80057bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057c0:	f1b9 0901 	subs.w	r9, r9, #1
 80057c4:	d505      	bpl.n	80057d2 <_fwalk_sglue+0x22>
 80057c6:	6824      	ldr	r4, [r4, #0]
 80057c8:	2c00      	cmp	r4, #0
 80057ca:	d1f7      	bne.n	80057bc <_fwalk_sglue+0xc>
 80057cc:	4630      	mov	r0, r6
 80057ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057d2:	89ab      	ldrh	r3, [r5, #12]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d907      	bls.n	80057e8 <_fwalk_sglue+0x38>
 80057d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057dc:	3301      	adds	r3, #1
 80057de:	d003      	beq.n	80057e8 <_fwalk_sglue+0x38>
 80057e0:	4629      	mov	r1, r5
 80057e2:	4638      	mov	r0, r7
 80057e4:	47c0      	blx	r8
 80057e6:	4306      	orrs	r6, r0
 80057e8:	3568      	adds	r5, #104	@ 0x68
 80057ea:	e7e9      	b.n	80057c0 <_fwalk_sglue+0x10>

080057ec <iprintf>:
 80057ec:	b40f      	push	{r0, r1, r2, r3}
 80057ee:	b507      	push	{r0, r1, r2, lr}
 80057f0:	4906      	ldr	r1, [pc, #24]	@ (800580c <iprintf+0x20>)
 80057f2:	ab04      	add	r3, sp, #16
 80057f4:	6808      	ldr	r0, [r1, #0]
 80057f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80057fa:	6881      	ldr	r1, [r0, #8]
 80057fc:	9301      	str	r3, [sp, #4]
 80057fe:	f000 fb9f 	bl	8005f40 <_vfiprintf_r>
 8005802:	b003      	add	sp, #12
 8005804:	f85d eb04 	ldr.w	lr, [sp], #4
 8005808:	b004      	add	sp, #16
 800580a:	4770      	bx	lr
 800580c:	20000018 	.word	0x20000018

08005810 <_puts_r>:
 8005810:	6a03      	ldr	r3, [r0, #32]
 8005812:	b570      	push	{r4, r5, r6, lr}
 8005814:	6884      	ldr	r4, [r0, #8]
 8005816:	4605      	mov	r5, r0
 8005818:	460e      	mov	r6, r1
 800581a:	b90b      	cbnz	r3, 8005820 <_puts_r+0x10>
 800581c:	f7ff ffb0 	bl	8005780 <__sinit>
 8005820:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005822:	07db      	lsls	r3, r3, #31
 8005824:	d405      	bmi.n	8005832 <_puts_r+0x22>
 8005826:	89a3      	ldrh	r3, [r4, #12]
 8005828:	0598      	lsls	r0, r3, #22
 800582a:	d402      	bmi.n	8005832 <_puts_r+0x22>
 800582c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800582e:	f000 fa5a 	bl	8005ce6 <__retarget_lock_acquire_recursive>
 8005832:	89a3      	ldrh	r3, [r4, #12]
 8005834:	0719      	lsls	r1, r3, #28
 8005836:	d502      	bpl.n	800583e <_puts_r+0x2e>
 8005838:	6923      	ldr	r3, [r4, #16]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d135      	bne.n	80058aa <_puts_r+0x9a>
 800583e:	4621      	mov	r1, r4
 8005840:	4628      	mov	r0, r5
 8005842:	f000 f981 	bl	8005b48 <__swsetup_r>
 8005846:	b380      	cbz	r0, 80058aa <_puts_r+0x9a>
 8005848:	f04f 35ff 	mov.w	r5, #4294967295
 800584c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800584e:	07da      	lsls	r2, r3, #31
 8005850:	d405      	bmi.n	800585e <_puts_r+0x4e>
 8005852:	89a3      	ldrh	r3, [r4, #12]
 8005854:	059b      	lsls	r3, r3, #22
 8005856:	d402      	bmi.n	800585e <_puts_r+0x4e>
 8005858:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800585a:	f000 fa45 	bl	8005ce8 <__retarget_lock_release_recursive>
 800585e:	4628      	mov	r0, r5
 8005860:	bd70      	pop	{r4, r5, r6, pc}
 8005862:	2b00      	cmp	r3, #0
 8005864:	da04      	bge.n	8005870 <_puts_r+0x60>
 8005866:	69a2      	ldr	r2, [r4, #24]
 8005868:	429a      	cmp	r2, r3
 800586a:	dc17      	bgt.n	800589c <_puts_r+0x8c>
 800586c:	290a      	cmp	r1, #10
 800586e:	d015      	beq.n	800589c <_puts_r+0x8c>
 8005870:	6823      	ldr	r3, [r4, #0]
 8005872:	1c5a      	adds	r2, r3, #1
 8005874:	6022      	str	r2, [r4, #0]
 8005876:	7019      	strb	r1, [r3, #0]
 8005878:	68a3      	ldr	r3, [r4, #8]
 800587a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800587e:	3b01      	subs	r3, #1
 8005880:	60a3      	str	r3, [r4, #8]
 8005882:	2900      	cmp	r1, #0
 8005884:	d1ed      	bne.n	8005862 <_puts_r+0x52>
 8005886:	2b00      	cmp	r3, #0
 8005888:	da11      	bge.n	80058ae <_puts_r+0x9e>
 800588a:	4622      	mov	r2, r4
 800588c:	210a      	movs	r1, #10
 800588e:	4628      	mov	r0, r5
 8005890:	f000 f91b 	bl	8005aca <__swbuf_r>
 8005894:	3001      	adds	r0, #1
 8005896:	d0d7      	beq.n	8005848 <_puts_r+0x38>
 8005898:	250a      	movs	r5, #10
 800589a:	e7d7      	b.n	800584c <_puts_r+0x3c>
 800589c:	4622      	mov	r2, r4
 800589e:	4628      	mov	r0, r5
 80058a0:	f000 f913 	bl	8005aca <__swbuf_r>
 80058a4:	3001      	adds	r0, #1
 80058a6:	d1e7      	bne.n	8005878 <_puts_r+0x68>
 80058a8:	e7ce      	b.n	8005848 <_puts_r+0x38>
 80058aa:	3e01      	subs	r6, #1
 80058ac:	e7e4      	b.n	8005878 <_puts_r+0x68>
 80058ae:	6823      	ldr	r3, [r4, #0]
 80058b0:	1c5a      	adds	r2, r3, #1
 80058b2:	6022      	str	r2, [r4, #0]
 80058b4:	220a      	movs	r2, #10
 80058b6:	701a      	strb	r2, [r3, #0]
 80058b8:	e7ee      	b.n	8005898 <_puts_r+0x88>
	...

080058bc <puts>:
 80058bc:	4b02      	ldr	r3, [pc, #8]	@ (80058c8 <puts+0xc>)
 80058be:	4601      	mov	r1, r0
 80058c0:	6818      	ldr	r0, [r3, #0]
 80058c2:	f7ff bfa5 	b.w	8005810 <_puts_r>
 80058c6:	bf00      	nop
 80058c8:	20000018 	.word	0x20000018

080058cc <setbuf>:
 80058cc:	fab1 f281 	clz	r2, r1
 80058d0:	0952      	lsrs	r2, r2, #5
 80058d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80058d6:	0052      	lsls	r2, r2, #1
 80058d8:	f000 b800 	b.w	80058dc <setvbuf>

080058dc <setvbuf>:
 80058dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80058e0:	461d      	mov	r5, r3
 80058e2:	4b57      	ldr	r3, [pc, #348]	@ (8005a40 <setvbuf+0x164>)
 80058e4:	681f      	ldr	r7, [r3, #0]
 80058e6:	4604      	mov	r4, r0
 80058e8:	460e      	mov	r6, r1
 80058ea:	4690      	mov	r8, r2
 80058ec:	b127      	cbz	r7, 80058f8 <setvbuf+0x1c>
 80058ee:	6a3b      	ldr	r3, [r7, #32]
 80058f0:	b913      	cbnz	r3, 80058f8 <setvbuf+0x1c>
 80058f2:	4638      	mov	r0, r7
 80058f4:	f7ff ff44 	bl	8005780 <__sinit>
 80058f8:	f1b8 0f02 	cmp.w	r8, #2
 80058fc:	d006      	beq.n	800590c <setvbuf+0x30>
 80058fe:	f1b8 0f01 	cmp.w	r8, #1
 8005902:	f200 809a 	bhi.w	8005a3a <setvbuf+0x15e>
 8005906:	2d00      	cmp	r5, #0
 8005908:	f2c0 8097 	blt.w	8005a3a <setvbuf+0x15e>
 800590c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800590e:	07d9      	lsls	r1, r3, #31
 8005910:	d405      	bmi.n	800591e <setvbuf+0x42>
 8005912:	89a3      	ldrh	r3, [r4, #12]
 8005914:	059a      	lsls	r2, r3, #22
 8005916:	d402      	bmi.n	800591e <setvbuf+0x42>
 8005918:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800591a:	f000 f9e4 	bl	8005ce6 <__retarget_lock_acquire_recursive>
 800591e:	4621      	mov	r1, r4
 8005920:	4638      	mov	r0, r7
 8005922:	f000 fe35 	bl	8006590 <_fflush_r>
 8005926:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005928:	b141      	cbz	r1, 800593c <setvbuf+0x60>
 800592a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800592e:	4299      	cmp	r1, r3
 8005930:	d002      	beq.n	8005938 <setvbuf+0x5c>
 8005932:	4638      	mov	r0, r7
 8005934:	f000 f9da 	bl	8005cec <_free_r>
 8005938:	2300      	movs	r3, #0
 800593a:	6363      	str	r3, [r4, #52]	@ 0x34
 800593c:	2300      	movs	r3, #0
 800593e:	61a3      	str	r3, [r4, #24]
 8005940:	6063      	str	r3, [r4, #4]
 8005942:	89a3      	ldrh	r3, [r4, #12]
 8005944:	061b      	lsls	r3, r3, #24
 8005946:	d503      	bpl.n	8005950 <setvbuf+0x74>
 8005948:	6921      	ldr	r1, [r4, #16]
 800594a:	4638      	mov	r0, r7
 800594c:	f000 f9ce 	bl	8005cec <_free_r>
 8005950:	89a3      	ldrh	r3, [r4, #12]
 8005952:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8005956:	f023 0303 	bic.w	r3, r3, #3
 800595a:	f1b8 0f02 	cmp.w	r8, #2
 800595e:	81a3      	strh	r3, [r4, #12]
 8005960:	d061      	beq.n	8005a26 <setvbuf+0x14a>
 8005962:	ab01      	add	r3, sp, #4
 8005964:	466a      	mov	r2, sp
 8005966:	4621      	mov	r1, r4
 8005968:	4638      	mov	r0, r7
 800596a:	f000 fe39 	bl	80065e0 <__swhatbuf_r>
 800596e:	89a3      	ldrh	r3, [r4, #12]
 8005970:	4318      	orrs	r0, r3
 8005972:	81a0      	strh	r0, [r4, #12]
 8005974:	bb2d      	cbnz	r5, 80059c2 <setvbuf+0xe6>
 8005976:	9d00      	ldr	r5, [sp, #0]
 8005978:	4628      	mov	r0, r5
 800597a:	f000 fa01 	bl	8005d80 <malloc>
 800597e:	4606      	mov	r6, r0
 8005980:	2800      	cmp	r0, #0
 8005982:	d152      	bne.n	8005a2a <setvbuf+0x14e>
 8005984:	f8dd 9000 	ldr.w	r9, [sp]
 8005988:	45a9      	cmp	r9, r5
 800598a:	d140      	bne.n	8005a0e <setvbuf+0x132>
 800598c:	f04f 35ff 	mov.w	r5, #4294967295
 8005990:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005994:	f043 0202 	orr.w	r2, r3, #2
 8005998:	81a2      	strh	r2, [r4, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	60a2      	str	r2, [r4, #8]
 800599e:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80059a2:	6022      	str	r2, [r4, #0]
 80059a4:	6122      	str	r2, [r4, #16]
 80059a6:	2201      	movs	r2, #1
 80059a8:	6162      	str	r2, [r4, #20]
 80059aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80059ac:	07d6      	lsls	r6, r2, #31
 80059ae:	d404      	bmi.n	80059ba <setvbuf+0xde>
 80059b0:	0598      	lsls	r0, r3, #22
 80059b2:	d402      	bmi.n	80059ba <setvbuf+0xde>
 80059b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059b6:	f000 f997 	bl	8005ce8 <__retarget_lock_release_recursive>
 80059ba:	4628      	mov	r0, r5
 80059bc:	b003      	add	sp, #12
 80059be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80059c2:	2e00      	cmp	r6, #0
 80059c4:	d0d8      	beq.n	8005978 <setvbuf+0x9c>
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	b913      	cbnz	r3, 80059d0 <setvbuf+0xf4>
 80059ca:	4638      	mov	r0, r7
 80059cc:	f7ff fed8 	bl	8005780 <__sinit>
 80059d0:	f1b8 0f01 	cmp.w	r8, #1
 80059d4:	bf08      	it	eq
 80059d6:	89a3      	ldrheq	r3, [r4, #12]
 80059d8:	6026      	str	r6, [r4, #0]
 80059da:	bf04      	itt	eq
 80059dc:	f043 0301 	orreq.w	r3, r3, #1
 80059e0:	81a3      	strheq	r3, [r4, #12]
 80059e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059e6:	f013 0208 	ands.w	r2, r3, #8
 80059ea:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80059ee:	d01e      	beq.n	8005a2e <setvbuf+0x152>
 80059f0:	07d9      	lsls	r1, r3, #31
 80059f2:	bf41      	itttt	mi
 80059f4:	2200      	movmi	r2, #0
 80059f6:	426d      	negmi	r5, r5
 80059f8:	60a2      	strmi	r2, [r4, #8]
 80059fa:	61a5      	strmi	r5, [r4, #24]
 80059fc:	bf58      	it	pl
 80059fe:	60a5      	strpl	r5, [r4, #8]
 8005a00:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005a02:	07d2      	lsls	r2, r2, #31
 8005a04:	d401      	bmi.n	8005a0a <setvbuf+0x12e>
 8005a06:	059b      	lsls	r3, r3, #22
 8005a08:	d513      	bpl.n	8005a32 <setvbuf+0x156>
 8005a0a:	2500      	movs	r5, #0
 8005a0c:	e7d5      	b.n	80059ba <setvbuf+0xde>
 8005a0e:	4648      	mov	r0, r9
 8005a10:	f000 f9b6 	bl	8005d80 <malloc>
 8005a14:	4606      	mov	r6, r0
 8005a16:	2800      	cmp	r0, #0
 8005a18:	d0b8      	beq.n	800598c <setvbuf+0xb0>
 8005a1a:	89a3      	ldrh	r3, [r4, #12]
 8005a1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a20:	81a3      	strh	r3, [r4, #12]
 8005a22:	464d      	mov	r5, r9
 8005a24:	e7cf      	b.n	80059c6 <setvbuf+0xea>
 8005a26:	2500      	movs	r5, #0
 8005a28:	e7b2      	b.n	8005990 <setvbuf+0xb4>
 8005a2a:	46a9      	mov	r9, r5
 8005a2c:	e7f5      	b.n	8005a1a <setvbuf+0x13e>
 8005a2e:	60a2      	str	r2, [r4, #8]
 8005a30:	e7e6      	b.n	8005a00 <setvbuf+0x124>
 8005a32:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a34:	f000 f958 	bl	8005ce8 <__retarget_lock_release_recursive>
 8005a38:	e7e7      	b.n	8005a0a <setvbuf+0x12e>
 8005a3a:	f04f 35ff 	mov.w	r5, #4294967295
 8005a3e:	e7bc      	b.n	80059ba <setvbuf+0xde>
 8005a40:	20000018 	.word	0x20000018

08005a44 <__sread>:
 8005a44:	b510      	push	{r4, lr}
 8005a46:	460c      	mov	r4, r1
 8005a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a4c:	f000 f8fc 	bl	8005c48 <_read_r>
 8005a50:	2800      	cmp	r0, #0
 8005a52:	bfab      	itete	ge
 8005a54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005a56:	89a3      	ldrhlt	r3, [r4, #12]
 8005a58:	181b      	addge	r3, r3, r0
 8005a5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005a5e:	bfac      	ite	ge
 8005a60:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005a62:	81a3      	strhlt	r3, [r4, #12]
 8005a64:	bd10      	pop	{r4, pc}

08005a66 <__swrite>:
 8005a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a6a:	461f      	mov	r7, r3
 8005a6c:	898b      	ldrh	r3, [r1, #12]
 8005a6e:	05db      	lsls	r3, r3, #23
 8005a70:	4605      	mov	r5, r0
 8005a72:	460c      	mov	r4, r1
 8005a74:	4616      	mov	r6, r2
 8005a76:	d505      	bpl.n	8005a84 <__swrite+0x1e>
 8005a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f000 f8d0 	bl	8005c24 <_lseek_r>
 8005a84:	89a3      	ldrh	r3, [r4, #12]
 8005a86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a8e:	81a3      	strh	r3, [r4, #12]
 8005a90:	4632      	mov	r2, r6
 8005a92:	463b      	mov	r3, r7
 8005a94:	4628      	mov	r0, r5
 8005a96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a9a:	f000 b8e7 	b.w	8005c6c <_write_r>

08005a9e <__sseek>:
 8005a9e:	b510      	push	{r4, lr}
 8005aa0:	460c      	mov	r4, r1
 8005aa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aa6:	f000 f8bd 	bl	8005c24 <_lseek_r>
 8005aaa:	1c43      	adds	r3, r0, #1
 8005aac:	89a3      	ldrh	r3, [r4, #12]
 8005aae:	bf15      	itete	ne
 8005ab0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005ab2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005ab6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005aba:	81a3      	strheq	r3, [r4, #12]
 8005abc:	bf18      	it	ne
 8005abe:	81a3      	strhne	r3, [r4, #12]
 8005ac0:	bd10      	pop	{r4, pc}

08005ac2 <__sclose>:
 8005ac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ac6:	f000 b89d 	b.w	8005c04 <_close_r>

08005aca <__swbuf_r>:
 8005aca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005acc:	460e      	mov	r6, r1
 8005ace:	4614      	mov	r4, r2
 8005ad0:	4605      	mov	r5, r0
 8005ad2:	b118      	cbz	r0, 8005adc <__swbuf_r+0x12>
 8005ad4:	6a03      	ldr	r3, [r0, #32]
 8005ad6:	b90b      	cbnz	r3, 8005adc <__swbuf_r+0x12>
 8005ad8:	f7ff fe52 	bl	8005780 <__sinit>
 8005adc:	69a3      	ldr	r3, [r4, #24]
 8005ade:	60a3      	str	r3, [r4, #8]
 8005ae0:	89a3      	ldrh	r3, [r4, #12]
 8005ae2:	071a      	lsls	r2, r3, #28
 8005ae4:	d501      	bpl.n	8005aea <__swbuf_r+0x20>
 8005ae6:	6923      	ldr	r3, [r4, #16]
 8005ae8:	b943      	cbnz	r3, 8005afc <__swbuf_r+0x32>
 8005aea:	4621      	mov	r1, r4
 8005aec:	4628      	mov	r0, r5
 8005aee:	f000 f82b 	bl	8005b48 <__swsetup_r>
 8005af2:	b118      	cbz	r0, 8005afc <__swbuf_r+0x32>
 8005af4:	f04f 37ff 	mov.w	r7, #4294967295
 8005af8:	4638      	mov	r0, r7
 8005afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005afc:	6823      	ldr	r3, [r4, #0]
 8005afe:	6922      	ldr	r2, [r4, #16]
 8005b00:	1a98      	subs	r0, r3, r2
 8005b02:	6963      	ldr	r3, [r4, #20]
 8005b04:	b2f6      	uxtb	r6, r6
 8005b06:	4283      	cmp	r3, r0
 8005b08:	4637      	mov	r7, r6
 8005b0a:	dc05      	bgt.n	8005b18 <__swbuf_r+0x4e>
 8005b0c:	4621      	mov	r1, r4
 8005b0e:	4628      	mov	r0, r5
 8005b10:	f000 fd3e 	bl	8006590 <_fflush_r>
 8005b14:	2800      	cmp	r0, #0
 8005b16:	d1ed      	bne.n	8005af4 <__swbuf_r+0x2a>
 8005b18:	68a3      	ldr	r3, [r4, #8]
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	60a3      	str	r3, [r4, #8]
 8005b1e:	6823      	ldr	r3, [r4, #0]
 8005b20:	1c5a      	adds	r2, r3, #1
 8005b22:	6022      	str	r2, [r4, #0]
 8005b24:	701e      	strb	r6, [r3, #0]
 8005b26:	6962      	ldr	r2, [r4, #20]
 8005b28:	1c43      	adds	r3, r0, #1
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d004      	beq.n	8005b38 <__swbuf_r+0x6e>
 8005b2e:	89a3      	ldrh	r3, [r4, #12]
 8005b30:	07db      	lsls	r3, r3, #31
 8005b32:	d5e1      	bpl.n	8005af8 <__swbuf_r+0x2e>
 8005b34:	2e0a      	cmp	r6, #10
 8005b36:	d1df      	bne.n	8005af8 <__swbuf_r+0x2e>
 8005b38:	4621      	mov	r1, r4
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	f000 fd28 	bl	8006590 <_fflush_r>
 8005b40:	2800      	cmp	r0, #0
 8005b42:	d0d9      	beq.n	8005af8 <__swbuf_r+0x2e>
 8005b44:	e7d6      	b.n	8005af4 <__swbuf_r+0x2a>
	...

08005b48 <__swsetup_r>:
 8005b48:	b538      	push	{r3, r4, r5, lr}
 8005b4a:	4b29      	ldr	r3, [pc, #164]	@ (8005bf0 <__swsetup_r+0xa8>)
 8005b4c:	4605      	mov	r5, r0
 8005b4e:	6818      	ldr	r0, [r3, #0]
 8005b50:	460c      	mov	r4, r1
 8005b52:	b118      	cbz	r0, 8005b5c <__swsetup_r+0x14>
 8005b54:	6a03      	ldr	r3, [r0, #32]
 8005b56:	b90b      	cbnz	r3, 8005b5c <__swsetup_r+0x14>
 8005b58:	f7ff fe12 	bl	8005780 <__sinit>
 8005b5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b60:	0719      	lsls	r1, r3, #28
 8005b62:	d422      	bmi.n	8005baa <__swsetup_r+0x62>
 8005b64:	06da      	lsls	r2, r3, #27
 8005b66:	d407      	bmi.n	8005b78 <__swsetup_r+0x30>
 8005b68:	2209      	movs	r2, #9
 8005b6a:	602a      	str	r2, [r5, #0]
 8005b6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b70:	81a3      	strh	r3, [r4, #12]
 8005b72:	f04f 30ff 	mov.w	r0, #4294967295
 8005b76:	e033      	b.n	8005be0 <__swsetup_r+0x98>
 8005b78:	0758      	lsls	r0, r3, #29
 8005b7a:	d512      	bpl.n	8005ba2 <__swsetup_r+0x5a>
 8005b7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b7e:	b141      	cbz	r1, 8005b92 <__swsetup_r+0x4a>
 8005b80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b84:	4299      	cmp	r1, r3
 8005b86:	d002      	beq.n	8005b8e <__swsetup_r+0x46>
 8005b88:	4628      	mov	r0, r5
 8005b8a:	f000 f8af 	bl	8005cec <_free_r>
 8005b8e:	2300      	movs	r3, #0
 8005b90:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b92:	89a3      	ldrh	r3, [r4, #12]
 8005b94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005b98:	81a3      	strh	r3, [r4, #12]
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	6063      	str	r3, [r4, #4]
 8005b9e:	6923      	ldr	r3, [r4, #16]
 8005ba0:	6023      	str	r3, [r4, #0]
 8005ba2:	89a3      	ldrh	r3, [r4, #12]
 8005ba4:	f043 0308 	orr.w	r3, r3, #8
 8005ba8:	81a3      	strh	r3, [r4, #12]
 8005baa:	6923      	ldr	r3, [r4, #16]
 8005bac:	b94b      	cbnz	r3, 8005bc2 <__swsetup_r+0x7a>
 8005bae:	89a3      	ldrh	r3, [r4, #12]
 8005bb0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005bb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bb8:	d003      	beq.n	8005bc2 <__swsetup_r+0x7a>
 8005bba:	4621      	mov	r1, r4
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	f000 fd35 	bl	800662c <__smakebuf_r>
 8005bc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bc6:	f013 0201 	ands.w	r2, r3, #1
 8005bca:	d00a      	beq.n	8005be2 <__swsetup_r+0x9a>
 8005bcc:	2200      	movs	r2, #0
 8005bce:	60a2      	str	r2, [r4, #8]
 8005bd0:	6962      	ldr	r2, [r4, #20]
 8005bd2:	4252      	negs	r2, r2
 8005bd4:	61a2      	str	r2, [r4, #24]
 8005bd6:	6922      	ldr	r2, [r4, #16]
 8005bd8:	b942      	cbnz	r2, 8005bec <__swsetup_r+0xa4>
 8005bda:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005bde:	d1c5      	bne.n	8005b6c <__swsetup_r+0x24>
 8005be0:	bd38      	pop	{r3, r4, r5, pc}
 8005be2:	0799      	lsls	r1, r3, #30
 8005be4:	bf58      	it	pl
 8005be6:	6962      	ldrpl	r2, [r4, #20]
 8005be8:	60a2      	str	r2, [r4, #8]
 8005bea:	e7f4      	b.n	8005bd6 <__swsetup_r+0x8e>
 8005bec:	2000      	movs	r0, #0
 8005bee:	e7f7      	b.n	8005be0 <__swsetup_r+0x98>
 8005bf0:	20000018 	.word	0x20000018

08005bf4 <memset>:
 8005bf4:	4402      	add	r2, r0
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d100      	bne.n	8005bfe <memset+0xa>
 8005bfc:	4770      	bx	lr
 8005bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8005c02:	e7f9      	b.n	8005bf8 <memset+0x4>

08005c04 <_close_r>:
 8005c04:	b538      	push	{r3, r4, r5, lr}
 8005c06:	4d06      	ldr	r5, [pc, #24]	@ (8005c20 <_close_r+0x1c>)
 8005c08:	2300      	movs	r3, #0
 8005c0a:	4604      	mov	r4, r0
 8005c0c:	4608      	mov	r0, r1
 8005c0e:	602b      	str	r3, [r5, #0]
 8005c10:	f7fb fa3b 	bl	800108a <_close>
 8005c14:	1c43      	adds	r3, r0, #1
 8005c16:	d102      	bne.n	8005c1e <_close_r+0x1a>
 8005c18:	682b      	ldr	r3, [r5, #0]
 8005c1a:	b103      	cbz	r3, 8005c1e <_close_r+0x1a>
 8005c1c:	6023      	str	r3, [r4, #0]
 8005c1e:	bd38      	pop	{r3, r4, r5, pc}
 8005c20:	200003b8 	.word	0x200003b8

08005c24 <_lseek_r>:
 8005c24:	b538      	push	{r3, r4, r5, lr}
 8005c26:	4d07      	ldr	r5, [pc, #28]	@ (8005c44 <_lseek_r+0x20>)
 8005c28:	4604      	mov	r4, r0
 8005c2a:	4608      	mov	r0, r1
 8005c2c:	4611      	mov	r1, r2
 8005c2e:	2200      	movs	r2, #0
 8005c30:	602a      	str	r2, [r5, #0]
 8005c32:	461a      	mov	r2, r3
 8005c34:	f7fb fa50 	bl	80010d8 <_lseek>
 8005c38:	1c43      	adds	r3, r0, #1
 8005c3a:	d102      	bne.n	8005c42 <_lseek_r+0x1e>
 8005c3c:	682b      	ldr	r3, [r5, #0]
 8005c3e:	b103      	cbz	r3, 8005c42 <_lseek_r+0x1e>
 8005c40:	6023      	str	r3, [r4, #0]
 8005c42:	bd38      	pop	{r3, r4, r5, pc}
 8005c44:	200003b8 	.word	0x200003b8

08005c48 <_read_r>:
 8005c48:	b538      	push	{r3, r4, r5, lr}
 8005c4a:	4d07      	ldr	r5, [pc, #28]	@ (8005c68 <_read_r+0x20>)
 8005c4c:	4604      	mov	r4, r0
 8005c4e:	4608      	mov	r0, r1
 8005c50:	4611      	mov	r1, r2
 8005c52:	2200      	movs	r2, #0
 8005c54:	602a      	str	r2, [r5, #0]
 8005c56:	461a      	mov	r2, r3
 8005c58:	f7fb f9fa 	bl	8001050 <_read>
 8005c5c:	1c43      	adds	r3, r0, #1
 8005c5e:	d102      	bne.n	8005c66 <_read_r+0x1e>
 8005c60:	682b      	ldr	r3, [r5, #0]
 8005c62:	b103      	cbz	r3, 8005c66 <_read_r+0x1e>
 8005c64:	6023      	str	r3, [r4, #0]
 8005c66:	bd38      	pop	{r3, r4, r5, pc}
 8005c68:	200003b8 	.word	0x200003b8

08005c6c <_write_r>:
 8005c6c:	b538      	push	{r3, r4, r5, lr}
 8005c6e:	4d07      	ldr	r5, [pc, #28]	@ (8005c8c <_write_r+0x20>)
 8005c70:	4604      	mov	r4, r0
 8005c72:	4608      	mov	r0, r1
 8005c74:	4611      	mov	r1, r2
 8005c76:	2200      	movs	r2, #0
 8005c78:	602a      	str	r2, [r5, #0]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	f7fa fb74 	bl	8000368 <_write>
 8005c80:	1c43      	adds	r3, r0, #1
 8005c82:	d102      	bne.n	8005c8a <_write_r+0x1e>
 8005c84:	682b      	ldr	r3, [r5, #0]
 8005c86:	b103      	cbz	r3, 8005c8a <_write_r+0x1e>
 8005c88:	6023      	str	r3, [r4, #0]
 8005c8a:	bd38      	pop	{r3, r4, r5, pc}
 8005c8c:	200003b8 	.word	0x200003b8

08005c90 <__errno>:
 8005c90:	4b01      	ldr	r3, [pc, #4]	@ (8005c98 <__errno+0x8>)
 8005c92:	6818      	ldr	r0, [r3, #0]
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	20000018 	.word	0x20000018

08005c9c <__libc_init_array>:
 8005c9c:	b570      	push	{r4, r5, r6, lr}
 8005c9e:	4d0d      	ldr	r5, [pc, #52]	@ (8005cd4 <__libc_init_array+0x38>)
 8005ca0:	4c0d      	ldr	r4, [pc, #52]	@ (8005cd8 <__libc_init_array+0x3c>)
 8005ca2:	1b64      	subs	r4, r4, r5
 8005ca4:	10a4      	asrs	r4, r4, #2
 8005ca6:	2600      	movs	r6, #0
 8005ca8:	42a6      	cmp	r6, r4
 8005caa:	d109      	bne.n	8005cc0 <__libc_init_array+0x24>
 8005cac:	4d0b      	ldr	r5, [pc, #44]	@ (8005cdc <__libc_init_array+0x40>)
 8005cae:	4c0c      	ldr	r4, [pc, #48]	@ (8005ce0 <__libc_init_array+0x44>)
 8005cb0:	f000 fd2a 	bl	8006708 <_init>
 8005cb4:	1b64      	subs	r4, r4, r5
 8005cb6:	10a4      	asrs	r4, r4, #2
 8005cb8:	2600      	movs	r6, #0
 8005cba:	42a6      	cmp	r6, r4
 8005cbc:	d105      	bne.n	8005cca <__libc_init_array+0x2e>
 8005cbe:	bd70      	pop	{r4, r5, r6, pc}
 8005cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cc4:	4798      	blx	r3
 8005cc6:	3601      	adds	r6, #1
 8005cc8:	e7ee      	b.n	8005ca8 <__libc_init_array+0xc>
 8005cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cce:	4798      	blx	r3
 8005cd0:	3601      	adds	r6, #1
 8005cd2:	e7f2      	b.n	8005cba <__libc_init_array+0x1e>
 8005cd4:	080067a8 	.word	0x080067a8
 8005cd8:	080067a8 	.word	0x080067a8
 8005cdc:	080067a8 	.word	0x080067a8
 8005ce0:	080067ac 	.word	0x080067ac

08005ce4 <__retarget_lock_init_recursive>:
 8005ce4:	4770      	bx	lr

08005ce6 <__retarget_lock_acquire_recursive>:
 8005ce6:	4770      	bx	lr

08005ce8 <__retarget_lock_release_recursive>:
 8005ce8:	4770      	bx	lr
	...

08005cec <_free_r>:
 8005cec:	b538      	push	{r3, r4, r5, lr}
 8005cee:	4605      	mov	r5, r0
 8005cf0:	2900      	cmp	r1, #0
 8005cf2:	d041      	beq.n	8005d78 <_free_r+0x8c>
 8005cf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cf8:	1f0c      	subs	r4, r1, #4
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	bfb8      	it	lt
 8005cfe:	18e4      	addlt	r4, r4, r3
 8005d00:	f000 f8e8 	bl	8005ed4 <__malloc_lock>
 8005d04:	4a1d      	ldr	r2, [pc, #116]	@ (8005d7c <_free_r+0x90>)
 8005d06:	6813      	ldr	r3, [r2, #0]
 8005d08:	b933      	cbnz	r3, 8005d18 <_free_r+0x2c>
 8005d0a:	6063      	str	r3, [r4, #4]
 8005d0c:	6014      	str	r4, [r2, #0]
 8005d0e:	4628      	mov	r0, r5
 8005d10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d14:	f000 b8e4 	b.w	8005ee0 <__malloc_unlock>
 8005d18:	42a3      	cmp	r3, r4
 8005d1a:	d908      	bls.n	8005d2e <_free_r+0x42>
 8005d1c:	6820      	ldr	r0, [r4, #0]
 8005d1e:	1821      	adds	r1, r4, r0
 8005d20:	428b      	cmp	r3, r1
 8005d22:	bf01      	itttt	eq
 8005d24:	6819      	ldreq	r1, [r3, #0]
 8005d26:	685b      	ldreq	r3, [r3, #4]
 8005d28:	1809      	addeq	r1, r1, r0
 8005d2a:	6021      	streq	r1, [r4, #0]
 8005d2c:	e7ed      	b.n	8005d0a <_free_r+0x1e>
 8005d2e:	461a      	mov	r2, r3
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	b10b      	cbz	r3, 8005d38 <_free_r+0x4c>
 8005d34:	42a3      	cmp	r3, r4
 8005d36:	d9fa      	bls.n	8005d2e <_free_r+0x42>
 8005d38:	6811      	ldr	r1, [r2, #0]
 8005d3a:	1850      	adds	r0, r2, r1
 8005d3c:	42a0      	cmp	r0, r4
 8005d3e:	d10b      	bne.n	8005d58 <_free_r+0x6c>
 8005d40:	6820      	ldr	r0, [r4, #0]
 8005d42:	4401      	add	r1, r0
 8005d44:	1850      	adds	r0, r2, r1
 8005d46:	4283      	cmp	r3, r0
 8005d48:	6011      	str	r1, [r2, #0]
 8005d4a:	d1e0      	bne.n	8005d0e <_free_r+0x22>
 8005d4c:	6818      	ldr	r0, [r3, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	6053      	str	r3, [r2, #4]
 8005d52:	4408      	add	r0, r1
 8005d54:	6010      	str	r0, [r2, #0]
 8005d56:	e7da      	b.n	8005d0e <_free_r+0x22>
 8005d58:	d902      	bls.n	8005d60 <_free_r+0x74>
 8005d5a:	230c      	movs	r3, #12
 8005d5c:	602b      	str	r3, [r5, #0]
 8005d5e:	e7d6      	b.n	8005d0e <_free_r+0x22>
 8005d60:	6820      	ldr	r0, [r4, #0]
 8005d62:	1821      	adds	r1, r4, r0
 8005d64:	428b      	cmp	r3, r1
 8005d66:	bf04      	itt	eq
 8005d68:	6819      	ldreq	r1, [r3, #0]
 8005d6a:	685b      	ldreq	r3, [r3, #4]
 8005d6c:	6063      	str	r3, [r4, #4]
 8005d6e:	bf04      	itt	eq
 8005d70:	1809      	addeq	r1, r1, r0
 8005d72:	6021      	streq	r1, [r4, #0]
 8005d74:	6054      	str	r4, [r2, #4]
 8005d76:	e7ca      	b.n	8005d0e <_free_r+0x22>
 8005d78:	bd38      	pop	{r3, r4, r5, pc}
 8005d7a:	bf00      	nop
 8005d7c:	200003c4 	.word	0x200003c4

08005d80 <malloc>:
 8005d80:	4b02      	ldr	r3, [pc, #8]	@ (8005d8c <malloc+0xc>)
 8005d82:	4601      	mov	r1, r0
 8005d84:	6818      	ldr	r0, [r3, #0]
 8005d86:	f000 b825 	b.w	8005dd4 <_malloc_r>
 8005d8a:	bf00      	nop
 8005d8c:	20000018 	.word	0x20000018

08005d90 <sbrk_aligned>:
 8005d90:	b570      	push	{r4, r5, r6, lr}
 8005d92:	4e0f      	ldr	r6, [pc, #60]	@ (8005dd0 <sbrk_aligned+0x40>)
 8005d94:	460c      	mov	r4, r1
 8005d96:	6831      	ldr	r1, [r6, #0]
 8005d98:	4605      	mov	r5, r0
 8005d9a:	b911      	cbnz	r1, 8005da2 <sbrk_aligned+0x12>
 8005d9c:	f000 fca4 	bl	80066e8 <_sbrk_r>
 8005da0:	6030      	str	r0, [r6, #0]
 8005da2:	4621      	mov	r1, r4
 8005da4:	4628      	mov	r0, r5
 8005da6:	f000 fc9f 	bl	80066e8 <_sbrk_r>
 8005daa:	1c43      	adds	r3, r0, #1
 8005dac:	d103      	bne.n	8005db6 <sbrk_aligned+0x26>
 8005dae:	f04f 34ff 	mov.w	r4, #4294967295
 8005db2:	4620      	mov	r0, r4
 8005db4:	bd70      	pop	{r4, r5, r6, pc}
 8005db6:	1cc4      	adds	r4, r0, #3
 8005db8:	f024 0403 	bic.w	r4, r4, #3
 8005dbc:	42a0      	cmp	r0, r4
 8005dbe:	d0f8      	beq.n	8005db2 <sbrk_aligned+0x22>
 8005dc0:	1a21      	subs	r1, r4, r0
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	f000 fc90 	bl	80066e8 <_sbrk_r>
 8005dc8:	3001      	adds	r0, #1
 8005dca:	d1f2      	bne.n	8005db2 <sbrk_aligned+0x22>
 8005dcc:	e7ef      	b.n	8005dae <sbrk_aligned+0x1e>
 8005dce:	bf00      	nop
 8005dd0:	200003c0 	.word	0x200003c0

08005dd4 <_malloc_r>:
 8005dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dd8:	1ccd      	adds	r5, r1, #3
 8005dda:	f025 0503 	bic.w	r5, r5, #3
 8005dde:	3508      	adds	r5, #8
 8005de0:	2d0c      	cmp	r5, #12
 8005de2:	bf38      	it	cc
 8005de4:	250c      	movcc	r5, #12
 8005de6:	2d00      	cmp	r5, #0
 8005de8:	4606      	mov	r6, r0
 8005dea:	db01      	blt.n	8005df0 <_malloc_r+0x1c>
 8005dec:	42a9      	cmp	r1, r5
 8005dee:	d904      	bls.n	8005dfa <_malloc_r+0x26>
 8005df0:	230c      	movs	r3, #12
 8005df2:	6033      	str	r3, [r6, #0]
 8005df4:	2000      	movs	r0, #0
 8005df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dfa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005ed0 <_malloc_r+0xfc>
 8005dfe:	f000 f869 	bl	8005ed4 <__malloc_lock>
 8005e02:	f8d8 3000 	ldr.w	r3, [r8]
 8005e06:	461c      	mov	r4, r3
 8005e08:	bb44      	cbnz	r4, 8005e5c <_malloc_r+0x88>
 8005e0a:	4629      	mov	r1, r5
 8005e0c:	4630      	mov	r0, r6
 8005e0e:	f7ff ffbf 	bl	8005d90 <sbrk_aligned>
 8005e12:	1c43      	adds	r3, r0, #1
 8005e14:	4604      	mov	r4, r0
 8005e16:	d158      	bne.n	8005eca <_malloc_r+0xf6>
 8005e18:	f8d8 4000 	ldr.w	r4, [r8]
 8005e1c:	4627      	mov	r7, r4
 8005e1e:	2f00      	cmp	r7, #0
 8005e20:	d143      	bne.n	8005eaa <_malloc_r+0xd6>
 8005e22:	2c00      	cmp	r4, #0
 8005e24:	d04b      	beq.n	8005ebe <_malloc_r+0xea>
 8005e26:	6823      	ldr	r3, [r4, #0]
 8005e28:	4639      	mov	r1, r7
 8005e2a:	4630      	mov	r0, r6
 8005e2c:	eb04 0903 	add.w	r9, r4, r3
 8005e30:	f000 fc5a 	bl	80066e8 <_sbrk_r>
 8005e34:	4581      	cmp	r9, r0
 8005e36:	d142      	bne.n	8005ebe <_malloc_r+0xea>
 8005e38:	6821      	ldr	r1, [r4, #0]
 8005e3a:	1a6d      	subs	r5, r5, r1
 8005e3c:	4629      	mov	r1, r5
 8005e3e:	4630      	mov	r0, r6
 8005e40:	f7ff ffa6 	bl	8005d90 <sbrk_aligned>
 8005e44:	3001      	adds	r0, #1
 8005e46:	d03a      	beq.n	8005ebe <_malloc_r+0xea>
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	442b      	add	r3, r5
 8005e4c:	6023      	str	r3, [r4, #0]
 8005e4e:	f8d8 3000 	ldr.w	r3, [r8]
 8005e52:	685a      	ldr	r2, [r3, #4]
 8005e54:	bb62      	cbnz	r2, 8005eb0 <_malloc_r+0xdc>
 8005e56:	f8c8 7000 	str.w	r7, [r8]
 8005e5a:	e00f      	b.n	8005e7c <_malloc_r+0xa8>
 8005e5c:	6822      	ldr	r2, [r4, #0]
 8005e5e:	1b52      	subs	r2, r2, r5
 8005e60:	d420      	bmi.n	8005ea4 <_malloc_r+0xd0>
 8005e62:	2a0b      	cmp	r2, #11
 8005e64:	d917      	bls.n	8005e96 <_malloc_r+0xc2>
 8005e66:	1961      	adds	r1, r4, r5
 8005e68:	42a3      	cmp	r3, r4
 8005e6a:	6025      	str	r5, [r4, #0]
 8005e6c:	bf18      	it	ne
 8005e6e:	6059      	strne	r1, [r3, #4]
 8005e70:	6863      	ldr	r3, [r4, #4]
 8005e72:	bf08      	it	eq
 8005e74:	f8c8 1000 	streq.w	r1, [r8]
 8005e78:	5162      	str	r2, [r4, r5]
 8005e7a:	604b      	str	r3, [r1, #4]
 8005e7c:	4630      	mov	r0, r6
 8005e7e:	f000 f82f 	bl	8005ee0 <__malloc_unlock>
 8005e82:	f104 000b 	add.w	r0, r4, #11
 8005e86:	1d23      	adds	r3, r4, #4
 8005e88:	f020 0007 	bic.w	r0, r0, #7
 8005e8c:	1ac2      	subs	r2, r0, r3
 8005e8e:	bf1c      	itt	ne
 8005e90:	1a1b      	subne	r3, r3, r0
 8005e92:	50a3      	strne	r3, [r4, r2]
 8005e94:	e7af      	b.n	8005df6 <_malloc_r+0x22>
 8005e96:	6862      	ldr	r2, [r4, #4]
 8005e98:	42a3      	cmp	r3, r4
 8005e9a:	bf0c      	ite	eq
 8005e9c:	f8c8 2000 	streq.w	r2, [r8]
 8005ea0:	605a      	strne	r2, [r3, #4]
 8005ea2:	e7eb      	b.n	8005e7c <_malloc_r+0xa8>
 8005ea4:	4623      	mov	r3, r4
 8005ea6:	6864      	ldr	r4, [r4, #4]
 8005ea8:	e7ae      	b.n	8005e08 <_malloc_r+0x34>
 8005eaa:	463c      	mov	r4, r7
 8005eac:	687f      	ldr	r7, [r7, #4]
 8005eae:	e7b6      	b.n	8005e1e <_malloc_r+0x4a>
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	42a3      	cmp	r3, r4
 8005eb6:	d1fb      	bne.n	8005eb0 <_malloc_r+0xdc>
 8005eb8:	2300      	movs	r3, #0
 8005eba:	6053      	str	r3, [r2, #4]
 8005ebc:	e7de      	b.n	8005e7c <_malloc_r+0xa8>
 8005ebe:	230c      	movs	r3, #12
 8005ec0:	6033      	str	r3, [r6, #0]
 8005ec2:	4630      	mov	r0, r6
 8005ec4:	f000 f80c 	bl	8005ee0 <__malloc_unlock>
 8005ec8:	e794      	b.n	8005df4 <_malloc_r+0x20>
 8005eca:	6005      	str	r5, [r0, #0]
 8005ecc:	e7d6      	b.n	8005e7c <_malloc_r+0xa8>
 8005ece:	bf00      	nop
 8005ed0:	200003c4 	.word	0x200003c4

08005ed4 <__malloc_lock>:
 8005ed4:	4801      	ldr	r0, [pc, #4]	@ (8005edc <__malloc_lock+0x8>)
 8005ed6:	f7ff bf06 	b.w	8005ce6 <__retarget_lock_acquire_recursive>
 8005eda:	bf00      	nop
 8005edc:	200003bc 	.word	0x200003bc

08005ee0 <__malloc_unlock>:
 8005ee0:	4801      	ldr	r0, [pc, #4]	@ (8005ee8 <__malloc_unlock+0x8>)
 8005ee2:	f7ff bf01 	b.w	8005ce8 <__retarget_lock_release_recursive>
 8005ee6:	bf00      	nop
 8005ee8:	200003bc 	.word	0x200003bc

08005eec <__sfputc_r>:
 8005eec:	6893      	ldr	r3, [r2, #8]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	b410      	push	{r4}
 8005ef4:	6093      	str	r3, [r2, #8]
 8005ef6:	da08      	bge.n	8005f0a <__sfputc_r+0x1e>
 8005ef8:	6994      	ldr	r4, [r2, #24]
 8005efa:	42a3      	cmp	r3, r4
 8005efc:	db01      	blt.n	8005f02 <__sfputc_r+0x16>
 8005efe:	290a      	cmp	r1, #10
 8005f00:	d103      	bne.n	8005f0a <__sfputc_r+0x1e>
 8005f02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f06:	f7ff bde0 	b.w	8005aca <__swbuf_r>
 8005f0a:	6813      	ldr	r3, [r2, #0]
 8005f0c:	1c58      	adds	r0, r3, #1
 8005f0e:	6010      	str	r0, [r2, #0]
 8005f10:	7019      	strb	r1, [r3, #0]
 8005f12:	4608      	mov	r0, r1
 8005f14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <__sfputs_r>:
 8005f1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1c:	4606      	mov	r6, r0
 8005f1e:	460f      	mov	r7, r1
 8005f20:	4614      	mov	r4, r2
 8005f22:	18d5      	adds	r5, r2, r3
 8005f24:	42ac      	cmp	r4, r5
 8005f26:	d101      	bne.n	8005f2c <__sfputs_r+0x12>
 8005f28:	2000      	movs	r0, #0
 8005f2a:	e007      	b.n	8005f3c <__sfputs_r+0x22>
 8005f2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f30:	463a      	mov	r2, r7
 8005f32:	4630      	mov	r0, r6
 8005f34:	f7ff ffda 	bl	8005eec <__sfputc_r>
 8005f38:	1c43      	adds	r3, r0, #1
 8005f3a:	d1f3      	bne.n	8005f24 <__sfputs_r+0xa>
 8005f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f40 <_vfiprintf_r>:
 8005f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f44:	460d      	mov	r5, r1
 8005f46:	b09d      	sub	sp, #116	@ 0x74
 8005f48:	4614      	mov	r4, r2
 8005f4a:	4698      	mov	r8, r3
 8005f4c:	4606      	mov	r6, r0
 8005f4e:	b118      	cbz	r0, 8005f58 <_vfiprintf_r+0x18>
 8005f50:	6a03      	ldr	r3, [r0, #32]
 8005f52:	b90b      	cbnz	r3, 8005f58 <_vfiprintf_r+0x18>
 8005f54:	f7ff fc14 	bl	8005780 <__sinit>
 8005f58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f5a:	07d9      	lsls	r1, r3, #31
 8005f5c:	d405      	bmi.n	8005f6a <_vfiprintf_r+0x2a>
 8005f5e:	89ab      	ldrh	r3, [r5, #12]
 8005f60:	059a      	lsls	r2, r3, #22
 8005f62:	d402      	bmi.n	8005f6a <_vfiprintf_r+0x2a>
 8005f64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f66:	f7ff febe 	bl	8005ce6 <__retarget_lock_acquire_recursive>
 8005f6a:	89ab      	ldrh	r3, [r5, #12]
 8005f6c:	071b      	lsls	r3, r3, #28
 8005f6e:	d501      	bpl.n	8005f74 <_vfiprintf_r+0x34>
 8005f70:	692b      	ldr	r3, [r5, #16]
 8005f72:	b99b      	cbnz	r3, 8005f9c <_vfiprintf_r+0x5c>
 8005f74:	4629      	mov	r1, r5
 8005f76:	4630      	mov	r0, r6
 8005f78:	f7ff fde6 	bl	8005b48 <__swsetup_r>
 8005f7c:	b170      	cbz	r0, 8005f9c <_vfiprintf_r+0x5c>
 8005f7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f80:	07dc      	lsls	r4, r3, #31
 8005f82:	d504      	bpl.n	8005f8e <_vfiprintf_r+0x4e>
 8005f84:	f04f 30ff 	mov.w	r0, #4294967295
 8005f88:	b01d      	add	sp, #116	@ 0x74
 8005f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f8e:	89ab      	ldrh	r3, [r5, #12]
 8005f90:	0598      	lsls	r0, r3, #22
 8005f92:	d4f7      	bmi.n	8005f84 <_vfiprintf_r+0x44>
 8005f94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f96:	f7ff fea7 	bl	8005ce8 <__retarget_lock_release_recursive>
 8005f9a:	e7f3      	b.n	8005f84 <_vfiprintf_r+0x44>
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fa0:	2320      	movs	r3, #32
 8005fa2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005fa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005faa:	2330      	movs	r3, #48	@ 0x30
 8005fac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800615c <_vfiprintf_r+0x21c>
 8005fb0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005fb4:	f04f 0901 	mov.w	r9, #1
 8005fb8:	4623      	mov	r3, r4
 8005fba:	469a      	mov	sl, r3
 8005fbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fc0:	b10a      	cbz	r2, 8005fc6 <_vfiprintf_r+0x86>
 8005fc2:	2a25      	cmp	r2, #37	@ 0x25
 8005fc4:	d1f9      	bne.n	8005fba <_vfiprintf_r+0x7a>
 8005fc6:	ebba 0b04 	subs.w	fp, sl, r4
 8005fca:	d00b      	beq.n	8005fe4 <_vfiprintf_r+0xa4>
 8005fcc:	465b      	mov	r3, fp
 8005fce:	4622      	mov	r2, r4
 8005fd0:	4629      	mov	r1, r5
 8005fd2:	4630      	mov	r0, r6
 8005fd4:	f7ff ffa1 	bl	8005f1a <__sfputs_r>
 8005fd8:	3001      	adds	r0, #1
 8005fda:	f000 80a7 	beq.w	800612c <_vfiprintf_r+0x1ec>
 8005fde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fe0:	445a      	add	r2, fp
 8005fe2:	9209      	str	r2, [sp, #36]	@ 0x24
 8005fe4:	f89a 3000 	ldrb.w	r3, [sl]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f000 809f 	beq.w	800612c <_vfiprintf_r+0x1ec>
 8005fee:	2300      	movs	r3, #0
 8005ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ff4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ff8:	f10a 0a01 	add.w	sl, sl, #1
 8005ffc:	9304      	str	r3, [sp, #16]
 8005ffe:	9307      	str	r3, [sp, #28]
 8006000:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006004:	931a      	str	r3, [sp, #104]	@ 0x68
 8006006:	4654      	mov	r4, sl
 8006008:	2205      	movs	r2, #5
 800600a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800600e:	4853      	ldr	r0, [pc, #332]	@ (800615c <_vfiprintf_r+0x21c>)
 8006010:	f7fa f8de 	bl	80001d0 <memchr>
 8006014:	9a04      	ldr	r2, [sp, #16]
 8006016:	b9d8      	cbnz	r0, 8006050 <_vfiprintf_r+0x110>
 8006018:	06d1      	lsls	r1, r2, #27
 800601a:	bf44      	itt	mi
 800601c:	2320      	movmi	r3, #32
 800601e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006022:	0713      	lsls	r3, r2, #28
 8006024:	bf44      	itt	mi
 8006026:	232b      	movmi	r3, #43	@ 0x2b
 8006028:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800602c:	f89a 3000 	ldrb.w	r3, [sl]
 8006030:	2b2a      	cmp	r3, #42	@ 0x2a
 8006032:	d015      	beq.n	8006060 <_vfiprintf_r+0x120>
 8006034:	9a07      	ldr	r2, [sp, #28]
 8006036:	4654      	mov	r4, sl
 8006038:	2000      	movs	r0, #0
 800603a:	f04f 0c0a 	mov.w	ip, #10
 800603e:	4621      	mov	r1, r4
 8006040:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006044:	3b30      	subs	r3, #48	@ 0x30
 8006046:	2b09      	cmp	r3, #9
 8006048:	d94b      	bls.n	80060e2 <_vfiprintf_r+0x1a2>
 800604a:	b1b0      	cbz	r0, 800607a <_vfiprintf_r+0x13a>
 800604c:	9207      	str	r2, [sp, #28]
 800604e:	e014      	b.n	800607a <_vfiprintf_r+0x13a>
 8006050:	eba0 0308 	sub.w	r3, r0, r8
 8006054:	fa09 f303 	lsl.w	r3, r9, r3
 8006058:	4313      	orrs	r3, r2
 800605a:	9304      	str	r3, [sp, #16]
 800605c:	46a2      	mov	sl, r4
 800605e:	e7d2      	b.n	8006006 <_vfiprintf_r+0xc6>
 8006060:	9b03      	ldr	r3, [sp, #12]
 8006062:	1d19      	adds	r1, r3, #4
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	9103      	str	r1, [sp, #12]
 8006068:	2b00      	cmp	r3, #0
 800606a:	bfbb      	ittet	lt
 800606c:	425b      	neglt	r3, r3
 800606e:	f042 0202 	orrlt.w	r2, r2, #2
 8006072:	9307      	strge	r3, [sp, #28]
 8006074:	9307      	strlt	r3, [sp, #28]
 8006076:	bfb8      	it	lt
 8006078:	9204      	strlt	r2, [sp, #16]
 800607a:	7823      	ldrb	r3, [r4, #0]
 800607c:	2b2e      	cmp	r3, #46	@ 0x2e
 800607e:	d10a      	bne.n	8006096 <_vfiprintf_r+0x156>
 8006080:	7863      	ldrb	r3, [r4, #1]
 8006082:	2b2a      	cmp	r3, #42	@ 0x2a
 8006084:	d132      	bne.n	80060ec <_vfiprintf_r+0x1ac>
 8006086:	9b03      	ldr	r3, [sp, #12]
 8006088:	1d1a      	adds	r2, r3, #4
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	9203      	str	r2, [sp, #12]
 800608e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006092:	3402      	adds	r4, #2
 8006094:	9305      	str	r3, [sp, #20]
 8006096:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800616c <_vfiprintf_r+0x22c>
 800609a:	7821      	ldrb	r1, [r4, #0]
 800609c:	2203      	movs	r2, #3
 800609e:	4650      	mov	r0, sl
 80060a0:	f7fa f896 	bl	80001d0 <memchr>
 80060a4:	b138      	cbz	r0, 80060b6 <_vfiprintf_r+0x176>
 80060a6:	9b04      	ldr	r3, [sp, #16]
 80060a8:	eba0 000a 	sub.w	r0, r0, sl
 80060ac:	2240      	movs	r2, #64	@ 0x40
 80060ae:	4082      	lsls	r2, r0
 80060b0:	4313      	orrs	r3, r2
 80060b2:	3401      	adds	r4, #1
 80060b4:	9304      	str	r3, [sp, #16]
 80060b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060ba:	4829      	ldr	r0, [pc, #164]	@ (8006160 <_vfiprintf_r+0x220>)
 80060bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80060c0:	2206      	movs	r2, #6
 80060c2:	f7fa f885 	bl	80001d0 <memchr>
 80060c6:	2800      	cmp	r0, #0
 80060c8:	d03f      	beq.n	800614a <_vfiprintf_r+0x20a>
 80060ca:	4b26      	ldr	r3, [pc, #152]	@ (8006164 <_vfiprintf_r+0x224>)
 80060cc:	bb1b      	cbnz	r3, 8006116 <_vfiprintf_r+0x1d6>
 80060ce:	9b03      	ldr	r3, [sp, #12]
 80060d0:	3307      	adds	r3, #7
 80060d2:	f023 0307 	bic.w	r3, r3, #7
 80060d6:	3308      	adds	r3, #8
 80060d8:	9303      	str	r3, [sp, #12]
 80060da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060dc:	443b      	add	r3, r7
 80060de:	9309      	str	r3, [sp, #36]	@ 0x24
 80060e0:	e76a      	b.n	8005fb8 <_vfiprintf_r+0x78>
 80060e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80060e6:	460c      	mov	r4, r1
 80060e8:	2001      	movs	r0, #1
 80060ea:	e7a8      	b.n	800603e <_vfiprintf_r+0xfe>
 80060ec:	2300      	movs	r3, #0
 80060ee:	3401      	adds	r4, #1
 80060f0:	9305      	str	r3, [sp, #20]
 80060f2:	4619      	mov	r1, r3
 80060f4:	f04f 0c0a 	mov.w	ip, #10
 80060f8:	4620      	mov	r0, r4
 80060fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060fe:	3a30      	subs	r2, #48	@ 0x30
 8006100:	2a09      	cmp	r2, #9
 8006102:	d903      	bls.n	800610c <_vfiprintf_r+0x1cc>
 8006104:	2b00      	cmp	r3, #0
 8006106:	d0c6      	beq.n	8006096 <_vfiprintf_r+0x156>
 8006108:	9105      	str	r1, [sp, #20]
 800610a:	e7c4      	b.n	8006096 <_vfiprintf_r+0x156>
 800610c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006110:	4604      	mov	r4, r0
 8006112:	2301      	movs	r3, #1
 8006114:	e7f0      	b.n	80060f8 <_vfiprintf_r+0x1b8>
 8006116:	ab03      	add	r3, sp, #12
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	462a      	mov	r2, r5
 800611c:	4b12      	ldr	r3, [pc, #72]	@ (8006168 <_vfiprintf_r+0x228>)
 800611e:	a904      	add	r1, sp, #16
 8006120:	4630      	mov	r0, r6
 8006122:	f3af 8000 	nop.w
 8006126:	4607      	mov	r7, r0
 8006128:	1c78      	adds	r0, r7, #1
 800612a:	d1d6      	bne.n	80060da <_vfiprintf_r+0x19a>
 800612c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800612e:	07d9      	lsls	r1, r3, #31
 8006130:	d405      	bmi.n	800613e <_vfiprintf_r+0x1fe>
 8006132:	89ab      	ldrh	r3, [r5, #12]
 8006134:	059a      	lsls	r2, r3, #22
 8006136:	d402      	bmi.n	800613e <_vfiprintf_r+0x1fe>
 8006138:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800613a:	f7ff fdd5 	bl	8005ce8 <__retarget_lock_release_recursive>
 800613e:	89ab      	ldrh	r3, [r5, #12]
 8006140:	065b      	lsls	r3, r3, #25
 8006142:	f53f af1f 	bmi.w	8005f84 <_vfiprintf_r+0x44>
 8006146:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006148:	e71e      	b.n	8005f88 <_vfiprintf_r+0x48>
 800614a:	ab03      	add	r3, sp, #12
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	462a      	mov	r2, r5
 8006150:	4b05      	ldr	r3, [pc, #20]	@ (8006168 <_vfiprintf_r+0x228>)
 8006152:	a904      	add	r1, sp, #16
 8006154:	4630      	mov	r0, r6
 8006156:	f000 f879 	bl	800624c <_printf_i>
 800615a:	e7e4      	b.n	8006126 <_vfiprintf_r+0x1e6>
 800615c:	0800676c 	.word	0x0800676c
 8006160:	08006776 	.word	0x08006776
 8006164:	00000000 	.word	0x00000000
 8006168:	08005f1b 	.word	0x08005f1b
 800616c:	08006772 	.word	0x08006772

08006170 <_printf_common>:
 8006170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006174:	4616      	mov	r6, r2
 8006176:	4698      	mov	r8, r3
 8006178:	688a      	ldr	r2, [r1, #8]
 800617a:	690b      	ldr	r3, [r1, #16]
 800617c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006180:	4293      	cmp	r3, r2
 8006182:	bfb8      	it	lt
 8006184:	4613      	movlt	r3, r2
 8006186:	6033      	str	r3, [r6, #0]
 8006188:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800618c:	4607      	mov	r7, r0
 800618e:	460c      	mov	r4, r1
 8006190:	b10a      	cbz	r2, 8006196 <_printf_common+0x26>
 8006192:	3301      	adds	r3, #1
 8006194:	6033      	str	r3, [r6, #0]
 8006196:	6823      	ldr	r3, [r4, #0]
 8006198:	0699      	lsls	r1, r3, #26
 800619a:	bf42      	ittt	mi
 800619c:	6833      	ldrmi	r3, [r6, #0]
 800619e:	3302      	addmi	r3, #2
 80061a0:	6033      	strmi	r3, [r6, #0]
 80061a2:	6825      	ldr	r5, [r4, #0]
 80061a4:	f015 0506 	ands.w	r5, r5, #6
 80061a8:	d106      	bne.n	80061b8 <_printf_common+0x48>
 80061aa:	f104 0a19 	add.w	sl, r4, #25
 80061ae:	68e3      	ldr	r3, [r4, #12]
 80061b0:	6832      	ldr	r2, [r6, #0]
 80061b2:	1a9b      	subs	r3, r3, r2
 80061b4:	42ab      	cmp	r3, r5
 80061b6:	dc26      	bgt.n	8006206 <_printf_common+0x96>
 80061b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80061bc:	6822      	ldr	r2, [r4, #0]
 80061be:	3b00      	subs	r3, #0
 80061c0:	bf18      	it	ne
 80061c2:	2301      	movne	r3, #1
 80061c4:	0692      	lsls	r2, r2, #26
 80061c6:	d42b      	bmi.n	8006220 <_printf_common+0xb0>
 80061c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80061cc:	4641      	mov	r1, r8
 80061ce:	4638      	mov	r0, r7
 80061d0:	47c8      	blx	r9
 80061d2:	3001      	adds	r0, #1
 80061d4:	d01e      	beq.n	8006214 <_printf_common+0xa4>
 80061d6:	6823      	ldr	r3, [r4, #0]
 80061d8:	6922      	ldr	r2, [r4, #16]
 80061da:	f003 0306 	and.w	r3, r3, #6
 80061de:	2b04      	cmp	r3, #4
 80061e0:	bf02      	ittt	eq
 80061e2:	68e5      	ldreq	r5, [r4, #12]
 80061e4:	6833      	ldreq	r3, [r6, #0]
 80061e6:	1aed      	subeq	r5, r5, r3
 80061e8:	68a3      	ldr	r3, [r4, #8]
 80061ea:	bf0c      	ite	eq
 80061ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061f0:	2500      	movne	r5, #0
 80061f2:	4293      	cmp	r3, r2
 80061f4:	bfc4      	itt	gt
 80061f6:	1a9b      	subgt	r3, r3, r2
 80061f8:	18ed      	addgt	r5, r5, r3
 80061fa:	2600      	movs	r6, #0
 80061fc:	341a      	adds	r4, #26
 80061fe:	42b5      	cmp	r5, r6
 8006200:	d11a      	bne.n	8006238 <_printf_common+0xc8>
 8006202:	2000      	movs	r0, #0
 8006204:	e008      	b.n	8006218 <_printf_common+0xa8>
 8006206:	2301      	movs	r3, #1
 8006208:	4652      	mov	r2, sl
 800620a:	4641      	mov	r1, r8
 800620c:	4638      	mov	r0, r7
 800620e:	47c8      	blx	r9
 8006210:	3001      	adds	r0, #1
 8006212:	d103      	bne.n	800621c <_printf_common+0xac>
 8006214:	f04f 30ff 	mov.w	r0, #4294967295
 8006218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800621c:	3501      	adds	r5, #1
 800621e:	e7c6      	b.n	80061ae <_printf_common+0x3e>
 8006220:	18e1      	adds	r1, r4, r3
 8006222:	1c5a      	adds	r2, r3, #1
 8006224:	2030      	movs	r0, #48	@ 0x30
 8006226:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800622a:	4422      	add	r2, r4
 800622c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006230:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006234:	3302      	adds	r3, #2
 8006236:	e7c7      	b.n	80061c8 <_printf_common+0x58>
 8006238:	2301      	movs	r3, #1
 800623a:	4622      	mov	r2, r4
 800623c:	4641      	mov	r1, r8
 800623e:	4638      	mov	r0, r7
 8006240:	47c8      	blx	r9
 8006242:	3001      	adds	r0, #1
 8006244:	d0e6      	beq.n	8006214 <_printf_common+0xa4>
 8006246:	3601      	adds	r6, #1
 8006248:	e7d9      	b.n	80061fe <_printf_common+0x8e>
	...

0800624c <_printf_i>:
 800624c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006250:	7e0f      	ldrb	r7, [r1, #24]
 8006252:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006254:	2f78      	cmp	r7, #120	@ 0x78
 8006256:	4691      	mov	r9, r2
 8006258:	4680      	mov	r8, r0
 800625a:	460c      	mov	r4, r1
 800625c:	469a      	mov	sl, r3
 800625e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006262:	d807      	bhi.n	8006274 <_printf_i+0x28>
 8006264:	2f62      	cmp	r7, #98	@ 0x62
 8006266:	d80a      	bhi.n	800627e <_printf_i+0x32>
 8006268:	2f00      	cmp	r7, #0
 800626a:	f000 80d1 	beq.w	8006410 <_printf_i+0x1c4>
 800626e:	2f58      	cmp	r7, #88	@ 0x58
 8006270:	f000 80b8 	beq.w	80063e4 <_printf_i+0x198>
 8006274:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006278:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800627c:	e03a      	b.n	80062f4 <_printf_i+0xa8>
 800627e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006282:	2b15      	cmp	r3, #21
 8006284:	d8f6      	bhi.n	8006274 <_printf_i+0x28>
 8006286:	a101      	add	r1, pc, #4	@ (adr r1, 800628c <_printf_i+0x40>)
 8006288:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800628c:	080062e5 	.word	0x080062e5
 8006290:	080062f9 	.word	0x080062f9
 8006294:	08006275 	.word	0x08006275
 8006298:	08006275 	.word	0x08006275
 800629c:	08006275 	.word	0x08006275
 80062a0:	08006275 	.word	0x08006275
 80062a4:	080062f9 	.word	0x080062f9
 80062a8:	08006275 	.word	0x08006275
 80062ac:	08006275 	.word	0x08006275
 80062b0:	08006275 	.word	0x08006275
 80062b4:	08006275 	.word	0x08006275
 80062b8:	080063f7 	.word	0x080063f7
 80062bc:	08006323 	.word	0x08006323
 80062c0:	080063b1 	.word	0x080063b1
 80062c4:	08006275 	.word	0x08006275
 80062c8:	08006275 	.word	0x08006275
 80062cc:	08006419 	.word	0x08006419
 80062d0:	08006275 	.word	0x08006275
 80062d4:	08006323 	.word	0x08006323
 80062d8:	08006275 	.word	0x08006275
 80062dc:	08006275 	.word	0x08006275
 80062e0:	080063b9 	.word	0x080063b9
 80062e4:	6833      	ldr	r3, [r6, #0]
 80062e6:	1d1a      	adds	r2, r3, #4
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	6032      	str	r2, [r6, #0]
 80062ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80062f4:	2301      	movs	r3, #1
 80062f6:	e09c      	b.n	8006432 <_printf_i+0x1e6>
 80062f8:	6833      	ldr	r3, [r6, #0]
 80062fa:	6820      	ldr	r0, [r4, #0]
 80062fc:	1d19      	adds	r1, r3, #4
 80062fe:	6031      	str	r1, [r6, #0]
 8006300:	0606      	lsls	r6, r0, #24
 8006302:	d501      	bpl.n	8006308 <_printf_i+0xbc>
 8006304:	681d      	ldr	r5, [r3, #0]
 8006306:	e003      	b.n	8006310 <_printf_i+0xc4>
 8006308:	0645      	lsls	r5, r0, #25
 800630a:	d5fb      	bpl.n	8006304 <_printf_i+0xb8>
 800630c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006310:	2d00      	cmp	r5, #0
 8006312:	da03      	bge.n	800631c <_printf_i+0xd0>
 8006314:	232d      	movs	r3, #45	@ 0x2d
 8006316:	426d      	negs	r5, r5
 8006318:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800631c:	4858      	ldr	r0, [pc, #352]	@ (8006480 <_printf_i+0x234>)
 800631e:	230a      	movs	r3, #10
 8006320:	e011      	b.n	8006346 <_printf_i+0xfa>
 8006322:	6821      	ldr	r1, [r4, #0]
 8006324:	6833      	ldr	r3, [r6, #0]
 8006326:	0608      	lsls	r0, r1, #24
 8006328:	f853 5b04 	ldr.w	r5, [r3], #4
 800632c:	d402      	bmi.n	8006334 <_printf_i+0xe8>
 800632e:	0649      	lsls	r1, r1, #25
 8006330:	bf48      	it	mi
 8006332:	b2ad      	uxthmi	r5, r5
 8006334:	2f6f      	cmp	r7, #111	@ 0x6f
 8006336:	4852      	ldr	r0, [pc, #328]	@ (8006480 <_printf_i+0x234>)
 8006338:	6033      	str	r3, [r6, #0]
 800633a:	bf14      	ite	ne
 800633c:	230a      	movne	r3, #10
 800633e:	2308      	moveq	r3, #8
 8006340:	2100      	movs	r1, #0
 8006342:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006346:	6866      	ldr	r6, [r4, #4]
 8006348:	60a6      	str	r6, [r4, #8]
 800634a:	2e00      	cmp	r6, #0
 800634c:	db05      	blt.n	800635a <_printf_i+0x10e>
 800634e:	6821      	ldr	r1, [r4, #0]
 8006350:	432e      	orrs	r6, r5
 8006352:	f021 0104 	bic.w	r1, r1, #4
 8006356:	6021      	str	r1, [r4, #0]
 8006358:	d04b      	beq.n	80063f2 <_printf_i+0x1a6>
 800635a:	4616      	mov	r6, r2
 800635c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006360:	fb03 5711 	mls	r7, r3, r1, r5
 8006364:	5dc7      	ldrb	r7, [r0, r7]
 8006366:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800636a:	462f      	mov	r7, r5
 800636c:	42bb      	cmp	r3, r7
 800636e:	460d      	mov	r5, r1
 8006370:	d9f4      	bls.n	800635c <_printf_i+0x110>
 8006372:	2b08      	cmp	r3, #8
 8006374:	d10b      	bne.n	800638e <_printf_i+0x142>
 8006376:	6823      	ldr	r3, [r4, #0]
 8006378:	07df      	lsls	r7, r3, #31
 800637a:	d508      	bpl.n	800638e <_printf_i+0x142>
 800637c:	6923      	ldr	r3, [r4, #16]
 800637e:	6861      	ldr	r1, [r4, #4]
 8006380:	4299      	cmp	r1, r3
 8006382:	bfde      	ittt	le
 8006384:	2330      	movle	r3, #48	@ 0x30
 8006386:	f806 3c01 	strble.w	r3, [r6, #-1]
 800638a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800638e:	1b92      	subs	r2, r2, r6
 8006390:	6122      	str	r2, [r4, #16]
 8006392:	f8cd a000 	str.w	sl, [sp]
 8006396:	464b      	mov	r3, r9
 8006398:	aa03      	add	r2, sp, #12
 800639a:	4621      	mov	r1, r4
 800639c:	4640      	mov	r0, r8
 800639e:	f7ff fee7 	bl	8006170 <_printf_common>
 80063a2:	3001      	adds	r0, #1
 80063a4:	d14a      	bne.n	800643c <_printf_i+0x1f0>
 80063a6:	f04f 30ff 	mov.w	r0, #4294967295
 80063aa:	b004      	add	sp, #16
 80063ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063b0:	6823      	ldr	r3, [r4, #0]
 80063b2:	f043 0320 	orr.w	r3, r3, #32
 80063b6:	6023      	str	r3, [r4, #0]
 80063b8:	4832      	ldr	r0, [pc, #200]	@ (8006484 <_printf_i+0x238>)
 80063ba:	2778      	movs	r7, #120	@ 0x78
 80063bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80063c0:	6823      	ldr	r3, [r4, #0]
 80063c2:	6831      	ldr	r1, [r6, #0]
 80063c4:	061f      	lsls	r7, r3, #24
 80063c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80063ca:	d402      	bmi.n	80063d2 <_printf_i+0x186>
 80063cc:	065f      	lsls	r7, r3, #25
 80063ce:	bf48      	it	mi
 80063d0:	b2ad      	uxthmi	r5, r5
 80063d2:	6031      	str	r1, [r6, #0]
 80063d4:	07d9      	lsls	r1, r3, #31
 80063d6:	bf44      	itt	mi
 80063d8:	f043 0320 	orrmi.w	r3, r3, #32
 80063dc:	6023      	strmi	r3, [r4, #0]
 80063de:	b11d      	cbz	r5, 80063e8 <_printf_i+0x19c>
 80063e0:	2310      	movs	r3, #16
 80063e2:	e7ad      	b.n	8006340 <_printf_i+0xf4>
 80063e4:	4826      	ldr	r0, [pc, #152]	@ (8006480 <_printf_i+0x234>)
 80063e6:	e7e9      	b.n	80063bc <_printf_i+0x170>
 80063e8:	6823      	ldr	r3, [r4, #0]
 80063ea:	f023 0320 	bic.w	r3, r3, #32
 80063ee:	6023      	str	r3, [r4, #0]
 80063f0:	e7f6      	b.n	80063e0 <_printf_i+0x194>
 80063f2:	4616      	mov	r6, r2
 80063f4:	e7bd      	b.n	8006372 <_printf_i+0x126>
 80063f6:	6833      	ldr	r3, [r6, #0]
 80063f8:	6825      	ldr	r5, [r4, #0]
 80063fa:	6961      	ldr	r1, [r4, #20]
 80063fc:	1d18      	adds	r0, r3, #4
 80063fe:	6030      	str	r0, [r6, #0]
 8006400:	062e      	lsls	r6, r5, #24
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	d501      	bpl.n	800640a <_printf_i+0x1be>
 8006406:	6019      	str	r1, [r3, #0]
 8006408:	e002      	b.n	8006410 <_printf_i+0x1c4>
 800640a:	0668      	lsls	r0, r5, #25
 800640c:	d5fb      	bpl.n	8006406 <_printf_i+0x1ba>
 800640e:	8019      	strh	r1, [r3, #0]
 8006410:	2300      	movs	r3, #0
 8006412:	6123      	str	r3, [r4, #16]
 8006414:	4616      	mov	r6, r2
 8006416:	e7bc      	b.n	8006392 <_printf_i+0x146>
 8006418:	6833      	ldr	r3, [r6, #0]
 800641a:	1d1a      	adds	r2, r3, #4
 800641c:	6032      	str	r2, [r6, #0]
 800641e:	681e      	ldr	r6, [r3, #0]
 8006420:	6862      	ldr	r2, [r4, #4]
 8006422:	2100      	movs	r1, #0
 8006424:	4630      	mov	r0, r6
 8006426:	f7f9 fed3 	bl	80001d0 <memchr>
 800642a:	b108      	cbz	r0, 8006430 <_printf_i+0x1e4>
 800642c:	1b80      	subs	r0, r0, r6
 800642e:	6060      	str	r0, [r4, #4]
 8006430:	6863      	ldr	r3, [r4, #4]
 8006432:	6123      	str	r3, [r4, #16]
 8006434:	2300      	movs	r3, #0
 8006436:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800643a:	e7aa      	b.n	8006392 <_printf_i+0x146>
 800643c:	6923      	ldr	r3, [r4, #16]
 800643e:	4632      	mov	r2, r6
 8006440:	4649      	mov	r1, r9
 8006442:	4640      	mov	r0, r8
 8006444:	47d0      	blx	sl
 8006446:	3001      	adds	r0, #1
 8006448:	d0ad      	beq.n	80063a6 <_printf_i+0x15a>
 800644a:	6823      	ldr	r3, [r4, #0]
 800644c:	079b      	lsls	r3, r3, #30
 800644e:	d413      	bmi.n	8006478 <_printf_i+0x22c>
 8006450:	68e0      	ldr	r0, [r4, #12]
 8006452:	9b03      	ldr	r3, [sp, #12]
 8006454:	4298      	cmp	r0, r3
 8006456:	bfb8      	it	lt
 8006458:	4618      	movlt	r0, r3
 800645a:	e7a6      	b.n	80063aa <_printf_i+0x15e>
 800645c:	2301      	movs	r3, #1
 800645e:	4632      	mov	r2, r6
 8006460:	4649      	mov	r1, r9
 8006462:	4640      	mov	r0, r8
 8006464:	47d0      	blx	sl
 8006466:	3001      	adds	r0, #1
 8006468:	d09d      	beq.n	80063a6 <_printf_i+0x15a>
 800646a:	3501      	adds	r5, #1
 800646c:	68e3      	ldr	r3, [r4, #12]
 800646e:	9903      	ldr	r1, [sp, #12]
 8006470:	1a5b      	subs	r3, r3, r1
 8006472:	42ab      	cmp	r3, r5
 8006474:	dcf2      	bgt.n	800645c <_printf_i+0x210>
 8006476:	e7eb      	b.n	8006450 <_printf_i+0x204>
 8006478:	2500      	movs	r5, #0
 800647a:	f104 0619 	add.w	r6, r4, #25
 800647e:	e7f5      	b.n	800646c <_printf_i+0x220>
 8006480:	0800677d 	.word	0x0800677d
 8006484:	0800678e 	.word	0x0800678e

08006488 <__sflush_r>:
 8006488:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800648c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006490:	0716      	lsls	r6, r2, #28
 8006492:	4605      	mov	r5, r0
 8006494:	460c      	mov	r4, r1
 8006496:	d454      	bmi.n	8006542 <__sflush_r+0xba>
 8006498:	684b      	ldr	r3, [r1, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	dc02      	bgt.n	80064a4 <__sflush_r+0x1c>
 800649e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	dd48      	ble.n	8006536 <__sflush_r+0xae>
 80064a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80064a6:	2e00      	cmp	r6, #0
 80064a8:	d045      	beq.n	8006536 <__sflush_r+0xae>
 80064aa:	2300      	movs	r3, #0
 80064ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80064b0:	682f      	ldr	r7, [r5, #0]
 80064b2:	6a21      	ldr	r1, [r4, #32]
 80064b4:	602b      	str	r3, [r5, #0]
 80064b6:	d030      	beq.n	800651a <__sflush_r+0x92>
 80064b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80064ba:	89a3      	ldrh	r3, [r4, #12]
 80064bc:	0759      	lsls	r1, r3, #29
 80064be:	d505      	bpl.n	80064cc <__sflush_r+0x44>
 80064c0:	6863      	ldr	r3, [r4, #4]
 80064c2:	1ad2      	subs	r2, r2, r3
 80064c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80064c6:	b10b      	cbz	r3, 80064cc <__sflush_r+0x44>
 80064c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80064ca:	1ad2      	subs	r2, r2, r3
 80064cc:	2300      	movs	r3, #0
 80064ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80064d0:	6a21      	ldr	r1, [r4, #32]
 80064d2:	4628      	mov	r0, r5
 80064d4:	47b0      	blx	r6
 80064d6:	1c43      	adds	r3, r0, #1
 80064d8:	89a3      	ldrh	r3, [r4, #12]
 80064da:	d106      	bne.n	80064ea <__sflush_r+0x62>
 80064dc:	6829      	ldr	r1, [r5, #0]
 80064de:	291d      	cmp	r1, #29
 80064e0:	d82b      	bhi.n	800653a <__sflush_r+0xb2>
 80064e2:	4a2a      	ldr	r2, [pc, #168]	@ (800658c <__sflush_r+0x104>)
 80064e4:	40ca      	lsrs	r2, r1
 80064e6:	07d6      	lsls	r6, r2, #31
 80064e8:	d527      	bpl.n	800653a <__sflush_r+0xb2>
 80064ea:	2200      	movs	r2, #0
 80064ec:	6062      	str	r2, [r4, #4]
 80064ee:	04d9      	lsls	r1, r3, #19
 80064f0:	6922      	ldr	r2, [r4, #16]
 80064f2:	6022      	str	r2, [r4, #0]
 80064f4:	d504      	bpl.n	8006500 <__sflush_r+0x78>
 80064f6:	1c42      	adds	r2, r0, #1
 80064f8:	d101      	bne.n	80064fe <__sflush_r+0x76>
 80064fa:	682b      	ldr	r3, [r5, #0]
 80064fc:	b903      	cbnz	r3, 8006500 <__sflush_r+0x78>
 80064fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8006500:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006502:	602f      	str	r7, [r5, #0]
 8006504:	b1b9      	cbz	r1, 8006536 <__sflush_r+0xae>
 8006506:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800650a:	4299      	cmp	r1, r3
 800650c:	d002      	beq.n	8006514 <__sflush_r+0x8c>
 800650e:	4628      	mov	r0, r5
 8006510:	f7ff fbec 	bl	8005cec <_free_r>
 8006514:	2300      	movs	r3, #0
 8006516:	6363      	str	r3, [r4, #52]	@ 0x34
 8006518:	e00d      	b.n	8006536 <__sflush_r+0xae>
 800651a:	2301      	movs	r3, #1
 800651c:	4628      	mov	r0, r5
 800651e:	47b0      	blx	r6
 8006520:	4602      	mov	r2, r0
 8006522:	1c50      	adds	r0, r2, #1
 8006524:	d1c9      	bne.n	80064ba <__sflush_r+0x32>
 8006526:	682b      	ldr	r3, [r5, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d0c6      	beq.n	80064ba <__sflush_r+0x32>
 800652c:	2b1d      	cmp	r3, #29
 800652e:	d001      	beq.n	8006534 <__sflush_r+0xac>
 8006530:	2b16      	cmp	r3, #22
 8006532:	d11e      	bne.n	8006572 <__sflush_r+0xea>
 8006534:	602f      	str	r7, [r5, #0]
 8006536:	2000      	movs	r0, #0
 8006538:	e022      	b.n	8006580 <__sflush_r+0xf8>
 800653a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800653e:	b21b      	sxth	r3, r3
 8006540:	e01b      	b.n	800657a <__sflush_r+0xf2>
 8006542:	690f      	ldr	r7, [r1, #16]
 8006544:	2f00      	cmp	r7, #0
 8006546:	d0f6      	beq.n	8006536 <__sflush_r+0xae>
 8006548:	0793      	lsls	r3, r2, #30
 800654a:	680e      	ldr	r6, [r1, #0]
 800654c:	bf08      	it	eq
 800654e:	694b      	ldreq	r3, [r1, #20]
 8006550:	600f      	str	r7, [r1, #0]
 8006552:	bf18      	it	ne
 8006554:	2300      	movne	r3, #0
 8006556:	eba6 0807 	sub.w	r8, r6, r7
 800655a:	608b      	str	r3, [r1, #8]
 800655c:	f1b8 0f00 	cmp.w	r8, #0
 8006560:	dde9      	ble.n	8006536 <__sflush_r+0xae>
 8006562:	6a21      	ldr	r1, [r4, #32]
 8006564:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006566:	4643      	mov	r3, r8
 8006568:	463a      	mov	r2, r7
 800656a:	4628      	mov	r0, r5
 800656c:	47b0      	blx	r6
 800656e:	2800      	cmp	r0, #0
 8006570:	dc08      	bgt.n	8006584 <__sflush_r+0xfc>
 8006572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006576:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800657a:	81a3      	strh	r3, [r4, #12]
 800657c:	f04f 30ff 	mov.w	r0, #4294967295
 8006580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006584:	4407      	add	r7, r0
 8006586:	eba8 0800 	sub.w	r8, r8, r0
 800658a:	e7e7      	b.n	800655c <__sflush_r+0xd4>
 800658c:	20400001 	.word	0x20400001

08006590 <_fflush_r>:
 8006590:	b538      	push	{r3, r4, r5, lr}
 8006592:	690b      	ldr	r3, [r1, #16]
 8006594:	4605      	mov	r5, r0
 8006596:	460c      	mov	r4, r1
 8006598:	b913      	cbnz	r3, 80065a0 <_fflush_r+0x10>
 800659a:	2500      	movs	r5, #0
 800659c:	4628      	mov	r0, r5
 800659e:	bd38      	pop	{r3, r4, r5, pc}
 80065a0:	b118      	cbz	r0, 80065aa <_fflush_r+0x1a>
 80065a2:	6a03      	ldr	r3, [r0, #32]
 80065a4:	b90b      	cbnz	r3, 80065aa <_fflush_r+0x1a>
 80065a6:	f7ff f8eb 	bl	8005780 <__sinit>
 80065aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d0f3      	beq.n	800659a <_fflush_r+0xa>
 80065b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80065b4:	07d0      	lsls	r0, r2, #31
 80065b6:	d404      	bmi.n	80065c2 <_fflush_r+0x32>
 80065b8:	0599      	lsls	r1, r3, #22
 80065ba:	d402      	bmi.n	80065c2 <_fflush_r+0x32>
 80065bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065be:	f7ff fb92 	bl	8005ce6 <__retarget_lock_acquire_recursive>
 80065c2:	4628      	mov	r0, r5
 80065c4:	4621      	mov	r1, r4
 80065c6:	f7ff ff5f 	bl	8006488 <__sflush_r>
 80065ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065cc:	07da      	lsls	r2, r3, #31
 80065ce:	4605      	mov	r5, r0
 80065d0:	d4e4      	bmi.n	800659c <_fflush_r+0xc>
 80065d2:	89a3      	ldrh	r3, [r4, #12]
 80065d4:	059b      	lsls	r3, r3, #22
 80065d6:	d4e1      	bmi.n	800659c <_fflush_r+0xc>
 80065d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065da:	f7ff fb85 	bl	8005ce8 <__retarget_lock_release_recursive>
 80065de:	e7dd      	b.n	800659c <_fflush_r+0xc>

080065e0 <__swhatbuf_r>:
 80065e0:	b570      	push	{r4, r5, r6, lr}
 80065e2:	460c      	mov	r4, r1
 80065e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065e8:	2900      	cmp	r1, #0
 80065ea:	b096      	sub	sp, #88	@ 0x58
 80065ec:	4615      	mov	r5, r2
 80065ee:	461e      	mov	r6, r3
 80065f0:	da0d      	bge.n	800660e <__swhatbuf_r+0x2e>
 80065f2:	89a3      	ldrh	r3, [r4, #12]
 80065f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80065f8:	f04f 0100 	mov.w	r1, #0
 80065fc:	bf14      	ite	ne
 80065fe:	2340      	movne	r3, #64	@ 0x40
 8006600:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006604:	2000      	movs	r0, #0
 8006606:	6031      	str	r1, [r6, #0]
 8006608:	602b      	str	r3, [r5, #0]
 800660a:	b016      	add	sp, #88	@ 0x58
 800660c:	bd70      	pop	{r4, r5, r6, pc}
 800660e:	466a      	mov	r2, sp
 8006610:	f000 f848 	bl	80066a4 <_fstat_r>
 8006614:	2800      	cmp	r0, #0
 8006616:	dbec      	blt.n	80065f2 <__swhatbuf_r+0x12>
 8006618:	9901      	ldr	r1, [sp, #4]
 800661a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800661e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006622:	4259      	negs	r1, r3
 8006624:	4159      	adcs	r1, r3
 8006626:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800662a:	e7eb      	b.n	8006604 <__swhatbuf_r+0x24>

0800662c <__smakebuf_r>:
 800662c:	898b      	ldrh	r3, [r1, #12]
 800662e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006630:	079d      	lsls	r5, r3, #30
 8006632:	4606      	mov	r6, r0
 8006634:	460c      	mov	r4, r1
 8006636:	d507      	bpl.n	8006648 <__smakebuf_r+0x1c>
 8006638:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800663c:	6023      	str	r3, [r4, #0]
 800663e:	6123      	str	r3, [r4, #16]
 8006640:	2301      	movs	r3, #1
 8006642:	6163      	str	r3, [r4, #20]
 8006644:	b003      	add	sp, #12
 8006646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006648:	ab01      	add	r3, sp, #4
 800664a:	466a      	mov	r2, sp
 800664c:	f7ff ffc8 	bl	80065e0 <__swhatbuf_r>
 8006650:	9f00      	ldr	r7, [sp, #0]
 8006652:	4605      	mov	r5, r0
 8006654:	4639      	mov	r1, r7
 8006656:	4630      	mov	r0, r6
 8006658:	f7ff fbbc 	bl	8005dd4 <_malloc_r>
 800665c:	b948      	cbnz	r0, 8006672 <__smakebuf_r+0x46>
 800665e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006662:	059a      	lsls	r2, r3, #22
 8006664:	d4ee      	bmi.n	8006644 <__smakebuf_r+0x18>
 8006666:	f023 0303 	bic.w	r3, r3, #3
 800666a:	f043 0302 	orr.w	r3, r3, #2
 800666e:	81a3      	strh	r3, [r4, #12]
 8006670:	e7e2      	b.n	8006638 <__smakebuf_r+0xc>
 8006672:	89a3      	ldrh	r3, [r4, #12]
 8006674:	6020      	str	r0, [r4, #0]
 8006676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800667a:	81a3      	strh	r3, [r4, #12]
 800667c:	9b01      	ldr	r3, [sp, #4]
 800667e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006682:	b15b      	cbz	r3, 800669c <__smakebuf_r+0x70>
 8006684:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006688:	4630      	mov	r0, r6
 800668a:	f000 f81d 	bl	80066c8 <_isatty_r>
 800668e:	b128      	cbz	r0, 800669c <__smakebuf_r+0x70>
 8006690:	89a3      	ldrh	r3, [r4, #12]
 8006692:	f023 0303 	bic.w	r3, r3, #3
 8006696:	f043 0301 	orr.w	r3, r3, #1
 800669a:	81a3      	strh	r3, [r4, #12]
 800669c:	89a3      	ldrh	r3, [r4, #12]
 800669e:	431d      	orrs	r5, r3
 80066a0:	81a5      	strh	r5, [r4, #12]
 80066a2:	e7cf      	b.n	8006644 <__smakebuf_r+0x18>

080066a4 <_fstat_r>:
 80066a4:	b538      	push	{r3, r4, r5, lr}
 80066a6:	4d07      	ldr	r5, [pc, #28]	@ (80066c4 <_fstat_r+0x20>)
 80066a8:	2300      	movs	r3, #0
 80066aa:	4604      	mov	r4, r0
 80066ac:	4608      	mov	r0, r1
 80066ae:	4611      	mov	r1, r2
 80066b0:	602b      	str	r3, [r5, #0]
 80066b2:	f7fa fcf6 	bl	80010a2 <_fstat>
 80066b6:	1c43      	adds	r3, r0, #1
 80066b8:	d102      	bne.n	80066c0 <_fstat_r+0x1c>
 80066ba:	682b      	ldr	r3, [r5, #0]
 80066bc:	b103      	cbz	r3, 80066c0 <_fstat_r+0x1c>
 80066be:	6023      	str	r3, [r4, #0]
 80066c0:	bd38      	pop	{r3, r4, r5, pc}
 80066c2:	bf00      	nop
 80066c4:	200003b8 	.word	0x200003b8

080066c8 <_isatty_r>:
 80066c8:	b538      	push	{r3, r4, r5, lr}
 80066ca:	4d06      	ldr	r5, [pc, #24]	@ (80066e4 <_isatty_r+0x1c>)
 80066cc:	2300      	movs	r3, #0
 80066ce:	4604      	mov	r4, r0
 80066d0:	4608      	mov	r0, r1
 80066d2:	602b      	str	r3, [r5, #0]
 80066d4:	f7fa fcf5 	bl	80010c2 <_isatty>
 80066d8:	1c43      	adds	r3, r0, #1
 80066da:	d102      	bne.n	80066e2 <_isatty_r+0x1a>
 80066dc:	682b      	ldr	r3, [r5, #0]
 80066de:	b103      	cbz	r3, 80066e2 <_isatty_r+0x1a>
 80066e0:	6023      	str	r3, [r4, #0]
 80066e2:	bd38      	pop	{r3, r4, r5, pc}
 80066e4:	200003b8 	.word	0x200003b8

080066e8 <_sbrk_r>:
 80066e8:	b538      	push	{r3, r4, r5, lr}
 80066ea:	4d06      	ldr	r5, [pc, #24]	@ (8006704 <_sbrk_r+0x1c>)
 80066ec:	2300      	movs	r3, #0
 80066ee:	4604      	mov	r4, r0
 80066f0:	4608      	mov	r0, r1
 80066f2:	602b      	str	r3, [r5, #0]
 80066f4:	f7fa fcfe 	bl	80010f4 <_sbrk>
 80066f8:	1c43      	adds	r3, r0, #1
 80066fa:	d102      	bne.n	8006702 <_sbrk_r+0x1a>
 80066fc:	682b      	ldr	r3, [r5, #0]
 80066fe:	b103      	cbz	r3, 8006702 <_sbrk_r+0x1a>
 8006700:	6023      	str	r3, [r4, #0]
 8006702:	bd38      	pop	{r3, r4, r5, pc}
 8006704:	200003b8 	.word	0x200003b8

08006708 <_init>:
 8006708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800670a:	bf00      	nop
 800670c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800670e:	bc08      	pop	{r3}
 8006710:	469e      	mov	lr, r3
 8006712:	4770      	bx	lr

08006714 <_fini>:
 8006714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006716:	bf00      	nop
 8006718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800671a:	bc08      	pop	{r3}
 800671c:	469e      	mov	lr, r3
 800671e:	4770      	bx	lr
